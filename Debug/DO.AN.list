
DO.AN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800a038  0800a038  0000b038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a368  0800a368  0000c468  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a368  0800a368  0000b368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a370  0800a370  0000c468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a370  0800a370  0000b370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a374  0800a374  0000b374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  0800a378  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c468  2**0
                  CONTENTS
 10 .bss          0000136c  20000468  20000468  0000c468  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200017d4  200017d4  0000c468  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c468  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d163  00000000  00000000  0000c498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002680  00000000  00000000  000195fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0001bc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a93  00000000  00000000  0001ca50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022948  00000000  00000000  0001d4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f60  00000000  00000000  0003fe2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce0f9  00000000  00000000  00050d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  0011ee84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000485c  00000000  00000000  0011ef44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  001237a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000468 	.word	0x20000468
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a020 	.word	0x0800a020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000046c 	.word	0x2000046c
 80001cc:	0800a020 	.word	0x0800a020

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b988 	b.w	8000f74 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	468e      	mov	lr, r1
 8000c84:	4604      	mov	r4, r0
 8000c86:	4688      	mov	r8, r1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d14a      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4617      	mov	r7, r2
 8000c90:	d962      	bls.n	8000d58 <__udivmoddi4+0xdc>
 8000c92:	fab2 f682 	clz	r6, r2
 8000c96:	b14e      	cbz	r6, 8000cac <__udivmoddi4+0x30>
 8000c98:	f1c6 0320 	rsb	r3, r6, #32
 8000c9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000ca0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca4:	40b7      	lsls	r7, r6
 8000ca6:	ea43 0808 	orr.w	r8, r3, r8
 8000caa:	40b4      	lsls	r4, r6
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	fa1f fc87 	uxth.w	ip, r7
 8000cb4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cc2:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0x62>
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cd0:	f080 80ea 	bcs.w	8000ea8 <__udivmoddi4+0x22c>
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	f240 80e7 	bls.w	8000ea8 <__udivmoddi4+0x22c>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	443b      	add	r3, r7
 8000cde:	1a9a      	subs	r2, r3, r2
 8000ce0:	b2a3      	uxth	r3, r4
 8000ce2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cf2:	459c      	cmp	ip, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x8e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfc:	f080 80d6 	bcs.w	8000eac <__udivmoddi4+0x230>
 8000d00:	459c      	cmp	ip, r3
 8000d02:	f240 80d3 	bls.w	8000eac <__udivmoddi4+0x230>
 8000d06:	443b      	add	r3, r7
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0e:	eba3 030c 	sub.w	r3, r3, ip
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa2>
 8000d16:	40f3      	lsrs	r3, r6
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xb6>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb0>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x14c>
 8000d3a:	4573      	cmp	r3, lr
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xc8>
 8000d3e:	4282      	cmp	r2, r0
 8000d40:	f200 8105 	bhi.w	8000f4e <__udivmoddi4+0x2d2>
 8000d44:	1a84      	subs	r4, r0, r2
 8000d46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	4690      	mov	r8, r2
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d0e5      	beq.n	8000d1e <__udivmoddi4+0xa2>
 8000d52:	e9c5 4800 	strd	r4, r8, [r5]
 8000d56:	e7e2      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	f000 8090 	beq.w	8000e7e <__udivmoddi4+0x202>
 8000d5e:	fab2 f682 	clz	r6, r2
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f040 80a4 	bne.w	8000eb0 <__udivmoddi4+0x234>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	0c03      	lsrs	r3, r0, #16
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	b280      	uxth	r0, r0
 8000d72:	b2bc      	uxth	r4, r7
 8000d74:	2101      	movs	r1, #1
 8000d76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d82:	fb04 f20c 	mul.w	r2, r4, ip
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x11e>
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d90:	d202      	bcs.n	8000d98 <__udivmoddi4+0x11c>
 8000d92:	429a      	cmp	r2, r3
 8000d94:	f200 80e0 	bhi.w	8000f58 <__udivmoddi4+0x2dc>
 8000d98:	46c4      	mov	ip, r8
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000da0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da8:	fb02 f404 	mul.w	r4, r2, r4
 8000dac:	429c      	cmp	r4, r3
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x144>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x142>
 8000db8:	429c      	cmp	r4, r3
 8000dba:	f200 80ca 	bhi.w	8000f52 <__udivmoddi4+0x2d6>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x98>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ddc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000de0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de4:	4323      	orrs	r3, r4
 8000de6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dea:	fa1f fc87 	uxth.w	ip, r7
 8000dee:	fbbe f0f9 	udiv	r0, lr, r9
 8000df2:	0c1c      	lsrs	r4, r3, #16
 8000df4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d909      	bls.n	8000e1c <__udivmoddi4+0x1a0>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0e:	f080 809c 	bcs.w	8000f4a <__udivmoddi4+0x2ce>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	f240 8099 	bls.w	8000f4a <__udivmoddi4+0x2ce>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	443c      	add	r4, r7
 8000e1c:	eba4 040e 	sub.w	r4, r4, lr
 8000e20:	fa1f fe83 	uxth.w	lr, r3
 8000e24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e28:	fb09 4413 	mls	r4, r9, r3, r4
 8000e2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e34:	45a4      	cmp	ip, r4
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x1ce>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3e:	f080 8082 	bcs.w	8000f46 <__udivmoddi4+0x2ca>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d97f      	bls.n	8000f46 <__udivmoddi4+0x2ca>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4e:	eba4 040c 	sub.w	r4, r4, ip
 8000e52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e56:	4564      	cmp	r4, ip
 8000e58:	4673      	mov	r3, lr
 8000e5a:	46e1      	mov	r9, ip
 8000e5c:	d362      	bcc.n	8000f24 <__udivmoddi4+0x2a8>
 8000e5e:	d05f      	beq.n	8000f20 <__udivmoddi4+0x2a4>
 8000e60:	b15d      	cbz	r5, 8000e7a <__udivmoddi4+0x1fe>
 8000e62:	ebb8 0203 	subs.w	r2, r8, r3
 8000e66:	eb64 0409 	sbc.w	r4, r4, r9
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e72:	431e      	orrs	r6, r3
 8000e74:	40cc      	lsrs	r4, r1
 8000e76:	e9c5 6400 	strd	r6, r4, [r5]
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	e74f      	b.n	8000d1e <__udivmoddi4+0xa2>
 8000e7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e82:	0c01      	lsrs	r1, r0, #16
 8000e84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e88:	b280      	uxth	r0, r0
 8000e8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4638      	mov	r0, r7
 8000e92:	463c      	mov	r4, r7
 8000e94:	46b8      	mov	r8, r7
 8000e96:	46be      	mov	lr, r7
 8000e98:	2620      	movs	r6, #32
 8000e9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ea2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea6:	e766      	b.n	8000d76 <__udivmoddi4+0xfa>
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	e718      	b.n	8000cde <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e72c      	b.n	8000d0a <__udivmoddi4+0x8e>
 8000eb0:	f1c6 0220 	rsb	r2, r6, #32
 8000eb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb8:	40b7      	lsls	r7, r6
 8000eba:	40b1      	lsls	r1, r6
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000eca:	b2bc      	uxth	r4, r7
 8000ecc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ed0:	0c11      	lsrs	r1, r2, #16
 8000ed2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed6:	fb08 f904 	mul.w	r9, r8, r4
 8000eda:	40b0      	lsls	r0, r6
 8000edc:	4589      	cmp	r9, r1
 8000ede:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ee2:	b280      	uxth	r0, r0
 8000ee4:	d93e      	bls.n	8000f64 <__udivmoddi4+0x2e8>
 8000ee6:	1879      	adds	r1, r7, r1
 8000ee8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000eec:	d201      	bcs.n	8000ef2 <__udivmoddi4+0x276>
 8000eee:	4589      	cmp	r9, r1
 8000ef0:	d81f      	bhi.n	8000f32 <__udivmoddi4+0x2b6>
 8000ef2:	eba1 0109 	sub.w	r1, r1, r9
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fb09 f804 	mul.w	r8, r9, r4
 8000efe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f02:	b292      	uxth	r2, r2
 8000f04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f08:	4542      	cmp	r2, r8
 8000f0a:	d229      	bcs.n	8000f60 <__udivmoddi4+0x2e4>
 8000f0c:	18ba      	adds	r2, r7, r2
 8000f0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f12:	d2c4      	bcs.n	8000e9e <__udivmoddi4+0x222>
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d2c2      	bcs.n	8000e9e <__udivmoddi4+0x222>
 8000f18:	f1a9 0102 	sub.w	r1, r9, #2
 8000f1c:	443a      	add	r2, r7
 8000f1e:	e7be      	b.n	8000e9e <__udivmoddi4+0x222>
 8000f20:	45f0      	cmp	r8, lr
 8000f22:	d29d      	bcs.n	8000e60 <__udivmoddi4+0x1e4>
 8000f24:	ebbe 0302 	subs.w	r3, lr, r2
 8000f28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	46e1      	mov	r9, ip
 8000f30:	e796      	b.n	8000e60 <__udivmoddi4+0x1e4>
 8000f32:	eba7 0909 	sub.w	r9, r7, r9
 8000f36:	4449      	add	r1, r9
 8000f38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f40:	fb09 f804 	mul.w	r8, r9, r4
 8000f44:	e7db      	b.n	8000efe <__udivmoddi4+0x282>
 8000f46:	4673      	mov	r3, lr
 8000f48:	e77f      	b.n	8000e4a <__udivmoddi4+0x1ce>
 8000f4a:	4650      	mov	r0, sl
 8000f4c:	e766      	b.n	8000e1c <__udivmoddi4+0x1a0>
 8000f4e:	4608      	mov	r0, r1
 8000f50:	e6fd      	b.n	8000d4e <__udivmoddi4+0xd2>
 8000f52:	443b      	add	r3, r7
 8000f54:	3a02      	subs	r2, #2
 8000f56:	e733      	b.n	8000dc0 <__udivmoddi4+0x144>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	443b      	add	r3, r7
 8000f5e:	e71c      	b.n	8000d9a <__udivmoddi4+0x11e>
 8000f60:	4649      	mov	r1, r9
 8000f62:	e79c      	b.n	8000e9e <__udivmoddi4+0x222>
 8000f64:	eba1 0109 	sub.w	r1, r1, r9
 8000f68:	46c4      	mov	ip, r8
 8000f6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6e:	fb09 f804 	mul.w	r8, r9, r4
 8000f72:	e7c4      	b.n	8000efe <__udivmoddi4+0x282>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f80:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f84:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d013      	beq.n	8000fb8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f90:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f94:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f98:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00b      	beq.n	8000fb8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa0:	e000      	b.n	8000fa4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fa2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fa4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f9      	beq.n	8000fa2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <process_amplitude>:
static void MX_I2S2_Init(void);
static void MX_TIM1_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
int process_amplitude(int16_t *pcm, int len)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
	int32_t sum = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	e010      	b.n	8000ffc <process_amplitude+0x36>
	{
		sum += abs(pcm[i]);
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bfb8      	it	lt
 8000fea:	425b      	neglt	r3, r3
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbea      	blt.n	8000fda <process_amplitude+0x14>
	}
	return sum / len;
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800100c:	4618      	mov	r0, r3
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a06      	ldr	r2, [pc, #24]	@ (8001040 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d106      	bne.n	8001038 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800102a:	2100      	movs	r1, #0
 800102c:	4805      	ldr	r0, [pc, #20]	@ (8001044 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800102e:	f003 fd33 	bl	8004a98 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8001032:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]
	}
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40010000 	.word	0x40010000
 8001044:	20000534 	.word	0x20000534
 8001048:	200009c4 	.word	0x200009c4

0800104c <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	b2d9      	uxtb	r1, r3
 800105e:	4a11      	ldr	r2, [pc, #68]	@ (80010a4 <Set_LED+0x58>)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	b2d9      	uxtb	r1, r3
 800106a:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <Set_LED+0x58>)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	460a      	mov	r2, r1
 8001074:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	b2d9      	uxtb	r1, r3
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <Set_LED+0x58>)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	460a      	mov	r2, r1
 8001084:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2d9      	uxtb	r1, r3
 800108a:	4a06      	ldr	r2, [pc, #24]	@ (80010a4 <Set_LED+0x58>)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	460a      	mov	r2, r1
 8001094:	70da      	strb	r2, [r3, #3]
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200007c4 	.word	0x200007c4

080010a8 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80010b4:	dd01      	ble.n	80010ba <Set_Brightness+0x12>
 80010b6:	232d      	movs	r3, #45	@ 0x2d
 80010b8:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	e060      	b.n	8001182 <Set_Brightness+0xda>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 80010c0:	4a37      	ldr	r2, [pc, #220]	@ (80011a0 <Set_Brightness+0xf8>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 80010c8:	4a36      	ldr	r2, [pc, #216]	@ (80011a4 <Set_Brightness+0xfc>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 80010d0:	2301      	movs	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	e04f      	b.n	8001176 <Set_Brightness+0xce>
		{
			float angle = 90-brightness;  // in degrees
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	edc7 7a03 	vstr	s15, [r7, #12]
			angle = angle*PI / 180;  // in rad
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff fa25 	bl	8000538 <__aeabi_f2d>
 80010ee:	a32a      	add	r3, pc, #168	@ (adr r3, 8001198 <Set_Brightness+0xf0>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff fa78 	bl	80005e8 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b28      	ldr	r3, [pc, #160]	@ (80011a8 <Set_Brightness+0x100>)
 8001106:	f7ff fb99 	bl	800083c <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd4b 	bl	8000bac <__aeabi_d2f>
 8001116:	4603      	mov	r3, r0
 8001118:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 800111a:	4a21      	ldr	r2, [pc, #132]	@ (80011a0 <Set_Brightness+0xf8>)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	441a      	add	r2, r3
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9f3 	bl	8000514 <__aeabi_i2d>
 800112e:	4604      	mov	r4, r0
 8001130:	460d      	mov	r5, r1
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff fa00 	bl	8000538 <__aeabi_f2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	ec43 2b10 	vmov	d0, r2, r3
 8001140:	f007 fafa 	bl	8008738 <tan>
 8001144:	ec53 2b10 	vmov	r2, r3, d0
 8001148:	4620      	mov	r0, r4
 800114a:	4629      	mov	r1, r5
 800114c:	f7ff fb76 	bl	800083c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fd08 	bl	8000b6c <__aeabi_d2uiz>
 800115c:	4603      	mov	r3, r0
 800115e:	b2d9      	uxtb	r1, r3
 8001160:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <Set_Brightness+0xfc>)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	441a      	add	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4413      	add	r3, r2
 800116c:	460a      	mov	r2, r1
 800116e:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	3301      	adds	r3, #1
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	2b03      	cmp	r3, #3
 800117a:	ddac      	ble.n	80010d6 <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b3f      	cmp	r3, #63	@ 0x3f
 8001186:	dd9b      	ble.n	80010c0 <Set_Brightness+0x18>
		}
	}

#endif

}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bdb0      	pop	{r4, r5, r7, pc}
 8001192:	bf00      	nop
 8001194:	f3af 8000 	nop.w
 8001198:	53c8d4f1 	.word	0x53c8d4f1
 800119c:	400921fb 	.word	0x400921fb
 80011a0:	200007c4 	.word	0x200007c4
 80011a4:	200008c4 	.word	0x200008c4
 80011a8:	40668000 	.word	0x40668000

080011ac <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	e036      	b.n	800122a <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 80011bc:	4a30      	ldr	r2, [pc, #192]	@ (8001280 <WS2812_Send+0xd4>)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	041a      	lsls	r2, r3, #16
 80011c8:	492d      	ldr	r1, [pc, #180]	@ (8001280 <WS2812_Send+0xd4>)
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	789b      	ldrb	r3, [r3, #2]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	431a      	orrs	r2, r3
 80011d6:	492a      	ldr	r1, [pc, #168]	@ (8001280 <WS2812_Send+0xd4>)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	78db      	ldrb	r3, [r3, #3]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	603b      	str	r3, [r7, #0]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 80011e4:	2317      	movs	r3, #23
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e019      	b.n	800121e <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 80011ea:	2201      	movs	r2, #1
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d005      	beq.n	8001208 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 80011fc:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <WS2812_Send+0xd8>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	213c      	movs	r1, #60	@ 0x3c
 8001202:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001206:	e004      	b.n	8001212 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8001208:	4a1e      	ldr	r2, [pc, #120]	@ (8001284 <WS2812_Send+0xd8>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	211e      	movs	r1, #30
 800120e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3301      	adds	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3b01      	subs	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	dae2      	bge.n	80011ea <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	3301      	adds	r3, #1
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	2b3f      	cmp	r3, #63	@ 0x3f
 800122e:	ddc5      	ble.n	80011bc <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	e00a      	b.n	800124c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8001236:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <WS2812_Send+0xd8>)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	2100      	movs	r1, #0
 800123c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3301      	adds	r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b31      	cmp	r3, #49	@ 0x31
 8001250:	ddf1      	ble.n	8001236 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	b29b      	uxth	r3, r3
 8001256:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <WS2812_Send+0xd8>)
 8001258:	2100      	movs	r1, #0
 800125a:	480b      	ldr	r0, [pc, #44]	@ (8001288 <WS2812_Send+0xdc>)
 800125c:	f003 fa54 	bl	8004708 <HAL_TIM_PWM_Start_DMA>

	uint32_t timeout = HAL_GetTick();
 8001260:	f000 ffe0 	bl	8002224 <HAL_GetTick>
 8001264:	6078      	str	r0, [r7, #4]

	while (!datasentflag){};
 8001266:	bf00      	nop
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <WS2812_Send+0xe0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0fb      	beq.n	8001268 <WS2812_Send+0xbc>
	datasentflag = 0;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <WS2812_Send+0xe0>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200008c4 	.word	0x200008c4
 8001284:	200009c8 	.word	0x200009c8
 8001288:	20000534 	.word	0x20000534
 800128c:	200009c4 	.word	0x200009c4

08001290 <getLedIndex>:
  else effStep++;
  return 0x01;
}


uint16_t getLedIndex(uint8_t x, uint8_t y) {
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	460a      	mov	r2, r1
 800129a:	71fb      	strb	r3, [r7, #7]
 800129c:	4613      	mov	r3, r2
 800129e:	71bb      	strb	r3, [r7, #6]
    if (y % 2 == 0) {
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d108      	bne.n	80012be <getLedIndex+0x2e>
        return y * 8 + x;
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	e009      	b.n	80012d2 <getLedIndex+0x42>
    } else {
        return y * 8 + (7 - x);  // reverse in odd rows
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3307      	adds	r3, #7
 80012d0:	b29b      	uxth	r3, r3
    }
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <shiftLeft>:
void shiftLeft() {
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
    for (int x = 0; x < 7; x++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	e03b      	b.n	8001364 <shiftLeft+0x84>
        for (int y = 0; y < 8; y++) {
 80012ec:	2300      	movs	r3, #0
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	e032      	b.n	8001358 <shiftLeft+0x78>
            ledR[x][y] = ledR[x+1][y];
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a20      	ldr	r2, [pc, #128]	@ (8001378 <shiftLeft+0x98>)
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	441a      	add	r2, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	7819      	ldrb	r1, [r3, #0]
 8001302:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <shiftLeft+0x98>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	441a      	add	r2, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	460a      	mov	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
            ledG[x][y] = ledG[x+1][y];
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	4a19      	ldr	r2, [pc, #100]	@ (800137c <shiftLeft+0x9c>)
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	441a      	add	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	4413      	add	r3, r2
 8001320:	7819      	ldrb	r1, [r3, #0]
 8001322:	4a16      	ldr	r2, [pc, #88]	@ (800137c <shiftLeft+0x9c>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	441a      	add	r2, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	4413      	add	r3, r2
 800132e:	460a      	mov	r2, r1
 8001330:	701a      	strb	r2, [r3, #0]
            ledB[x][y] = ledB[x+1][y];
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3301      	adds	r3, #1
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <shiftLeft+0xa0>)
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	441a      	add	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4413      	add	r3, r2
 8001340:	7819      	ldrb	r1, [r3, #0]
 8001342:	4a0f      	ldr	r2, [pc, #60]	@ (8001380 <shiftLeft+0xa0>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	441a      	add	r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	460a      	mov	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
        for (int y = 0; y < 8; y++) {
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2b07      	cmp	r3, #7
 800135c:	ddc9      	ble.n	80012f2 <shiftLeft+0x12>
    for (int x = 0; x < 7; x++) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3301      	adds	r3, #1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b06      	cmp	r3, #6
 8001368:	ddc0      	ble.n	80012ec <shiftLeft+0xc>
        }
    }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	20000704 	.word	0x20000704
 800137c:	20000744 	.word	0x20000744
 8001380:	20000784 	.word	0x20000784

08001384 <insertAmplitudeColumn>:
void insertAmplitudeColumn(int amplitude) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    int height = amplitude / 100;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a2f      	ldr	r2, [pc, #188]	@ (800144c <insertAmplitudeColumn+0xc8>)
 8001390:	fb82 1203 	smull	r1, r2, r2, r3
 8001394:	1152      	asrs	r2, r2, #5
 8001396:	17db      	asrs	r3, r3, #31
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	60fb      	str	r3, [r7, #12]
    if (height > 8) height = 8;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b08      	cmp	r3, #8
 80013a0:	dd01      	ble.n	80013a6 <insertAmplitudeColumn+0x22>
 80013a2:	2308      	movs	r3, #8
 80013a4:	60fb      	str	r3, [r7, #12]

    for (int y = 0; y < 8; y++) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	e046      	b.n	800143a <insertAmplitudeColumn+0xb6>
        if (y < height) {
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	da2d      	bge.n	8001410 <insertAmplitudeColumn+0x8c>
            ledR[7][y] = rand() % 256;
 80013b4:	f006 f9d0 	bl	8007758 <rand>
 80013b8:	4603      	mov	r3, r0
 80013ba:	425a      	negs	r2, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	bf58      	it	pl
 80013c2:	4253      	negpl	r3, r2
 80013c4:	b2d9      	uxtb	r1, r3
 80013c6:	4a22      	ldr	r2, [pc, #136]	@ (8001450 <insertAmplitudeColumn+0xcc>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4413      	add	r3, r2
 80013cc:	3338      	adds	r3, #56	@ 0x38
 80013ce:	460a      	mov	r2, r1
 80013d0:	701a      	strb	r2, [r3, #0]
            ledG[7][y] = rand() % 256;
 80013d2:	f006 f9c1 	bl	8007758 <rand>
 80013d6:	4603      	mov	r3, r0
 80013d8:	425a      	negs	r2, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	bf58      	it	pl
 80013e0:	4253      	negpl	r3, r2
 80013e2:	b2d9      	uxtb	r1, r3
 80013e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001454 <insertAmplitudeColumn+0xd0>)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	4413      	add	r3, r2
 80013ea:	3338      	adds	r3, #56	@ 0x38
 80013ec:	460a      	mov	r2, r1
 80013ee:	701a      	strb	r2, [r3, #0]
            ledB[7][y] = rand() % 256;
 80013f0:	f006 f9b2 	bl	8007758 <rand>
 80013f4:	4603      	mov	r3, r0
 80013f6:	425a      	negs	r2, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	bf58      	it	pl
 80013fe:	4253      	negpl	r3, r2
 8001400:	b2d9      	uxtb	r1, r3
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <insertAmplitudeColumn+0xd4>)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4413      	add	r3, r2
 8001408:	3338      	adds	r3, #56	@ 0x38
 800140a:	460a      	mov	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
 800140e:	e011      	b.n	8001434 <insertAmplitudeColumn+0xb0>
        } else {
            ledR[7][y] = 0;
 8001410:	4a0f      	ldr	r2, [pc, #60]	@ (8001450 <insertAmplitudeColumn+0xcc>)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	4413      	add	r3, r2
 8001416:	3338      	adds	r3, #56	@ 0x38
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
            ledG[7][y] = 0;
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <insertAmplitudeColumn+0xd0>)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	4413      	add	r3, r2
 8001422:	3338      	adds	r3, #56	@ 0x38
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
            ledB[7][y] = 0;
 8001428:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <insertAmplitudeColumn+0xd4>)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	4413      	add	r3, r2
 800142e:	3338      	adds	r3, #56	@ 0x38
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
    for (int y = 0; y < 8; y++) {
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	3301      	adds	r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b07      	cmp	r3, #7
 800143e:	ddb5      	ble.n	80013ac <insertAmplitudeColumn+0x28>
        }
    }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	51eb851f 	.word	0x51eb851f
 8001450:	20000704 	.word	0x20000704
 8001454:	20000744 	.word	0x20000744
 8001458:	20000784 	.word	0x20000784

0800145c <updateLEDs>:
void updateLEDs() {
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
    for (int y = 0; y < 8; y++) {
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e030      	b.n	80014ca <updateLEDs+0x6e>
        for (int x = 0; x < 8; x++) {
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	e027      	b.n	80014be <updateLEDs+0x62>
            int i = getLedIndex(x, y);
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff09 	bl	8001290 <getLedIndex>
 800147e:	4603      	mov	r3, r0
 8001480:	607b      	str	r3, [r7, #4]
            Set_LED(i, ledR[x][y], ledG[x][y], ledB[x][y]);
 8001482:	4a18      	ldr	r2, [pc, #96]	@ (80014e4 <updateLEDs+0x88>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	441a      	add	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4a15      	ldr	r2, [pc, #84]	@ (80014e8 <updateLEDs+0x8c>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	441a      	add	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4413      	add	r3, r2
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <updateLEDs+0x90>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	441a      	add	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4602      	mov	r2, r0
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fdca 	bl	800104c <Set_LED>
        for (int x = 0; x < 8; x++) {
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	3301      	adds	r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	ddd4      	ble.n	800146e <updateLEDs+0x12>
    for (int y = 0; y < 8; y++) {
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b07      	cmp	r3, #7
 80014ce:	ddcb      	ble.n	8001468 <updateLEDs+0xc>
        }
    }
    Set_Brightness(10);
 80014d0:	200a      	movs	r0, #10
 80014d2:	f7ff fde9 	bl	80010a8 <Set_Brightness>
    WS2812_Send();
 80014d6:	f7ff fe69 	bl	80011ac <WS2812_Send>
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000704 	.word	0x20000704
 80014e8:	20000744 	.word	0x20000744
 80014ec:	20000784 	.word	0x20000784

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014f4:	f000 fe30 	bl	8002158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f8:	f000 f846 	bl	8001588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fc:	f000 f9ce 	bl	800189c <MX_GPIO_Init>
  MX_DMA_Init();
 8001500:	f000 f996 	bl	8001830 <MX_DMA_Init>
  MX_I2S2_Init();
 8001504:	f000 f8c6 	bl	8001694 <MX_I2S2_Init>
  MX_TIM1_Init();
 8001508:	f000 f8f2 	bl	80016f0 <MX_TIM1_Init>
  MX_CRC_Init();
 800150c:	f000 f8a6 	bl	800165c <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8001510:	f004 f9e6 	bl	80058e0 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */



  HAL_I2S_Receive_DMA(&hi2s2,(uint8_t*) pdmBuffer, PDM_BUFFER_SIZE);
 8001514:	2280      	movs	r2, #128	@ 0x80
 8001516:	4915      	ldr	r1, [pc, #84]	@ (800156c <main+0x7c>)
 8001518:	4815      	ldr	r0, [pc, #84]	@ (8001570 <main+0x80>)
 800151a:	f001 fe45 	bl	80031a8 <HAL_I2S_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(pdmReady == 1)
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <main+0x84>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d1fb      	bne.n	800151e <main+0x2e>
	  {
		  pdmReady = 0;
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <main+0x84>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
	      // Convert PDM to PCM
		  MX_PDM2PCM_Process(&pdmBuffer[PDM_BUFFER_SIZE / 2], pcmBuffer);
 800152c:	4912      	ldr	r1, [pc, #72]	@ (8001578 <main+0x88>)
 800152e:	4813      	ldr	r0, [pc, #76]	@ (800157c <main+0x8c>)
 8001530:	f004 fa00 	bl	8005934 <MX_PDM2PCM_Process>

	      // Get amplitude
	      amplitude = process_amplitude((int16_t*)pcmBuffer, PCM_BUFFER_SIZE);
 8001534:	2110      	movs	r1, #16
 8001536:	4810      	ldr	r0, [pc, #64]	@ (8001578 <main+0x88>)
 8001538:	f7ff fd45 	bl	8000fc6 <process_amplitude>
 800153c:	4603      	mov	r3, r0
 800153e:	4a10      	ldr	r2, [pc, #64]	@ (8001580 <main+0x90>)
 8001540:	6013      	str	r3, [r2, #0]
	      printf("AMP: %d\n", amplitude);
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <main+0x90>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4619      	mov	r1, r3
 8001548:	480e      	ldr	r0, [pc, #56]	@ (8001584 <main+0x94>)
 800154a:	f006 fa05 	bl	8007958 <iprintf>

	      Set_Brightness(1);
	      WS2812_Send();
	      */

	      shiftLeft();
 800154e:	f7ff fec7 	bl	80012e0 <shiftLeft>
	      insertAmplitudeColumn(amplitude);
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <main+0x90>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff14 	bl	8001384 <insertAmplitudeColumn>
	      updateLEDs();
 800155c:	f7ff ff7e 	bl	800145c <updateLEDs>
	      // Restart I2S DMA
	      HAL_I2S_Receive_DMA(&hi2s2, pdmBuffer, PDM_BUFFER_SIZE);
 8001560:	2280      	movs	r2, #128	@ 0x80
 8001562:	4902      	ldr	r1, [pc, #8]	@ (800156c <main+0x7c>)
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <main+0x80>)
 8001566:	f001 fe1f 	bl	80031a8 <HAL_I2S_Receive_DMA>
	  if(pdmReady == 1)
 800156a:	e7d8      	b.n	800151e <main+0x2e>
 800156c:	200005dc 	.word	0x200005dc
 8001570:	2000048c 	.word	0x2000048c
 8001574:	20000700 	.word	0x20000700
 8001578:	200006dc 	.word	0x200006dc
 800157c:	2000065c 	.word	0x2000065c
 8001580:	200006fc 	.word	0x200006fc
 8001584:	0800a038 	.word	0x0800a038

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b094      	sub	sp, #80	@ 0x50
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0320 	add.w	r3, r7, #32
 8001592:	2230      	movs	r2, #48	@ 0x30
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f006 fa33 	bl	8007a02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <SystemClock_Config+0xcc>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b4:	4a27      	ldr	r2, [pc, #156]	@ (8001654 <SystemClock_Config+0xcc>)
 80015b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80015bc:	4b25      	ldr	r3, [pc, #148]	@ (8001654 <SystemClock_Config+0xcc>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <SystemClock_Config+0xd0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <SystemClock_Config+0xd0>)
 80015d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <SystemClock_Config+0xd0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015e4:	2302      	movs	r3, #2
 80015e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e8:	2301      	movs	r3, #1
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ec:	2310      	movs	r3, #16
 80015ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f0:	2302      	movs	r3, #2
 80015f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015f4:	2300      	movs	r3, #0
 80015f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015f8:	2308      	movs	r3, #8
 80015fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80015fc:	23a0      	movs	r3, #160	@ 0xa0
 80015fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001600:	2302      	movs	r3, #2
 8001602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001604:	2307      	movs	r3, #7
 8001606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fa2d 	bl	8003a6c <HAL_RCC_OscConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001618:	f000 fae0 	bl	8001bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161c:	230f      	movs	r3, #15
 800161e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001620:	2302      	movs	r3, #2
 8001622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001628:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800162c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800162e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2105      	movs	r1, #5
 800163a:	4618      	mov	r0, r3
 800163c:	f002 fc8e 	bl	8003f5c <HAL_RCC_ClockConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001646:	f000 fac9 	bl	8001bdc <Error_Handler>
  }
}
 800164a:	bf00      	nop
 800164c:	3750      	adds	r7, #80	@ 0x50
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000

0800165c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001660:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <MX_CRC_Init+0x30>)
 8001662:	4a0b      	ldr	r2, [pc, #44]	@ (8001690 <MX_CRC_Init+0x34>)
 8001664:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001666:	4809      	ldr	r0, [pc, #36]	@ (800168c <MX_CRC_Init+0x30>)
 8001668:	f000 fef9 	bl	800245e <HAL_CRC_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001672:	f000 fab3 	bl	8001bdc <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8001676:	4b05      	ldr	r3, [pc, #20]	@ (800168c <MX_CRC_Init+0x30>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <MX_CRC_Init+0x30>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000484 	.word	0x20000484
 8001690:	40023000 	.word	0x40023000

08001694 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <MX_I2S2_Init+0x54>)
 800169a:	4a14      	ldr	r2, [pc, #80]	@ (80016ec <MX_I2S2_Init+0x58>)
 800169c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <MX_I2S2_Init+0x54>)
 80016a0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80016a4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <MX_I2S2_Init+0x54>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_I2S2_Init+0x54>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80016b2:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <MX_I2S2_Init+0x54>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <MX_I2S2_Init+0x54>)
 80016ba:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80016be:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <MX_I2S2_Init+0x54>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <MX_I2S2_Init+0x54>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_I2S2_Init+0x54>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_I2S2_Init+0x54>)
 80016d4:	f001 fc28 	bl	8002f28 <HAL_I2S_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80016de:	f000 fa7d 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000048c 	.word	0x2000048c
 80016ec:	40003800 	.word	0x40003800

080016f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b096      	sub	sp, #88	@ 0x58
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
 8001720:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2220      	movs	r2, #32
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f006 f96a 	bl	8007a02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800172e:	4b3e      	ldr	r3, [pc, #248]	@ (8001828 <MX_TIM1_Init+0x138>)
 8001730:	4a3e      	ldr	r2, [pc, #248]	@ (800182c <MX_TIM1_Init+0x13c>)
 8001732:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001734:	4b3c      	ldr	r3, [pc, #240]	@ (8001828 <MX_TIM1_Init+0x138>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173a:	4b3b      	ldr	r3, [pc, #236]	@ (8001828 <MX_TIM1_Init+0x138>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001740:	4b39      	ldr	r3, [pc, #228]	@ (8001828 <MX_TIM1_Init+0x138>)
 8001742:	22c7      	movs	r2, #199	@ 0xc7
 8001744:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b38      	ldr	r3, [pc, #224]	@ (8001828 <MX_TIM1_Init+0x138>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800174c:	4b36      	ldr	r3, [pc, #216]	@ (8001828 <MX_TIM1_Init+0x138>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001752:	4b35      	ldr	r3, [pc, #212]	@ (8001828 <MX_TIM1_Init+0x138>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001758:	4833      	ldr	r0, [pc, #204]	@ (8001828 <MX_TIM1_Init+0x138>)
 800175a:	f002 ff2d 	bl	80045b8 <HAL_TIM_Base_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001764:	f000 fa3a 	bl	8001bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800176e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001772:	4619      	mov	r1, r3
 8001774:	482c      	ldr	r0, [pc, #176]	@ (8001828 <MX_TIM1_Init+0x138>)
 8001776:	f003 fb23 	bl	8004dc0 <HAL_TIM_ConfigClockSource>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001780:	f000 fa2c 	bl	8001bdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001784:	4828      	ldr	r0, [pc, #160]	@ (8001828 <MX_TIM1_Init+0x138>)
 8001786:	f002 ff66 	bl	8004656 <HAL_TIM_PWM_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001790:	f000 fa24 	bl	8001bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800179c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017a0:	4619      	mov	r1, r3
 80017a2:	4821      	ldr	r0, [pc, #132]	@ (8001828 <MX_TIM1_Init+0x138>)
 80017a4:	f003 ffce 	bl	8005744 <HAL_TIMEx_MasterConfigSynchronization>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80017ae:	f000 fa15 	bl	8001bdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b2:	2360      	movs	r3, #96	@ 0x60
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d2:	2200      	movs	r2, #0
 80017d4:	4619      	mov	r1, r3
 80017d6:	4814      	ldr	r0, [pc, #80]	@ (8001828 <MX_TIM1_Init+0x138>)
 80017d8:	f003 fa30 	bl	8004c3c <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80017e2:	f000 f9fb 	bl	8001bdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	4619      	mov	r1, r3
 8001808:	4807      	ldr	r0, [pc, #28]	@ (8001828 <MX_TIM1_Init+0x138>)
 800180a:	f004 f817 	bl	800583c <HAL_TIMEx_ConfigBreakDeadTime>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001814:	f000 f9e2 	bl	8001bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001818:	4803      	ldr	r0, [pc, #12]	@ (8001828 <MX_TIM1_Init+0x138>)
 800181a:	f000 fb39 	bl	8001e90 <HAL_TIM_MspPostInit>

}
 800181e:	bf00      	nop
 8001820:	3758      	adds	r7, #88	@ 0x58
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000534 	.word	0x20000534
 800182c:	40010000 	.word	0x40010000

08001830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_DMA_Init+0x68>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a16      	ldr	r2, [pc, #88]	@ (8001898 <MX_DMA_Init+0x68>)
 8001840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_DMA_Init+0x68>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <MX_DMA_Init+0x68>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a0f      	ldr	r2, [pc, #60]	@ (8001898 <MX_DMA_Init+0x68>)
 800185c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <MX_DMA_Init+0x68>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	200e      	movs	r0, #14
 8001874:	f000 fdbd 	bl	80023f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001878:	200e      	movs	r0, #14
 800187a:	f000 fdd6 	bl	800242a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2039      	movs	r0, #57	@ 0x39
 8001884:	f000 fdb5 	bl	80023f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001888:	2039      	movs	r0, #57	@ 0x39
 800188a:	f000 fdce 	bl	800242a <HAL_NVIC_EnableIRQ>

}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	@ 0x30
 80018a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	4b9a      	ldr	r3, [pc, #616]	@ (8001b20 <MX_GPIO_Init+0x284>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a99      	ldr	r2, [pc, #612]	@ (8001b20 <MX_GPIO_Init+0x284>)
 80018bc:	f043 0310 	orr.w	r3, r3, #16
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b97      	ldr	r3, [pc, #604]	@ (8001b20 <MX_GPIO_Init+0x284>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	4b93      	ldr	r3, [pc, #588]	@ (8001b20 <MX_GPIO_Init+0x284>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a92      	ldr	r2, [pc, #584]	@ (8001b20 <MX_GPIO_Init+0x284>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b90      	ldr	r3, [pc, #576]	@ (8001b20 <MX_GPIO_Init+0x284>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b8c      	ldr	r3, [pc, #560]	@ (8001b20 <MX_GPIO_Init+0x284>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a8b      	ldr	r2, [pc, #556]	@ (8001b20 <MX_GPIO_Init+0x284>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b89      	ldr	r3, [pc, #548]	@ (8001b20 <MX_GPIO_Init+0x284>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b85      	ldr	r3, [pc, #532]	@ (8001b20 <MX_GPIO_Init+0x284>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a84      	ldr	r2, [pc, #528]	@ (8001b20 <MX_GPIO_Init+0x284>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b82      	ldr	r3, [pc, #520]	@ (8001b20 <MX_GPIO_Init+0x284>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b7e      	ldr	r3, [pc, #504]	@ (8001b20 <MX_GPIO_Init+0x284>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b20 <MX_GPIO_Init+0x284>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b7b      	ldr	r3, [pc, #492]	@ (8001b20 <MX_GPIO_Init+0x284>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b77      	ldr	r3, [pc, #476]	@ (8001b20 <MX_GPIO_Init+0x284>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a76      	ldr	r2, [pc, #472]	@ (8001b20 <MX_GPIO_Init+0x284>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b74      	ldr	r3, [pc, #464]	@ (8001b20 <MX_GPIO_Init+0x284>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2108      	movs	r1, #8
 800195e:	4871      	ldr	r0, [pc, #452]	@ (8001b24 <MX_GPIO_Init+0x288>)
 8001960:	f001 fac8 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	2101      	movs	r1, #1
 8001968:	486f      	ldr	r0, [pc, #444]	@ (8001b28 <MX_GPIO_Init+0x28c>)
 800196a:	f001 fac3 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800196e:	2200      	movs	r2, #0
 8001970:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001974:	486d      	ldr	r0, [pc, #436]	@ (8001b2c <MX_GPIO_Init+0x290>)
 8001976:	f001 fabd 	bl	8002ef4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800197a:	2308      	movs	r3, #8
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	4864      	ldr	r0, [pc, #400]	@ (8001b24 <MX_GPIO_Init+0x288>)
 8001992:	f001 f913 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001996:	2301      	movs	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	485e      	ldr	r0, [pc, #376]	@ (8001b28 <MX_GPIO_Init+0x28c>)
 80019ae:	f001 f905 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	485a      	ldr	r0, [pc, #360]	@ (8001b30 <MX_GPIO_Init+0x294>)
 80019c8:	f001 f8f8 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80019cc:	2310      	movs	r3, #16
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019dc:	2306      	movs	r3, #6
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4852      	ldr	r0, [pc, #328]	@ (8001b30 <MX_GPIO_Init+0x294>)
 80019e8:	f001 f8e8 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80019ec:	23e0      	movs	r3, #224	@ 0xe0
 80019ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019fc:	2305      	movs	r3, #5
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	484a      	ldr	r0, [pc, #296]	@ (8001b30 <MX_GPIO_Init+0x294>)
 8001a08:	f001 f8d8 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4845      	ldr	r0, [pc, #276]	@ (8001b34 <MX_GPIO_Init+0x298>)
 8001a20:	f001 f8cc 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001a24:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001a28:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	483b      	ldr	r0, [pc, #236]	@ (8001b2c <MX_GPIO_Init+0x290>)
 8001a3e:	f001 f8bd 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a42:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a54:	2306      	movs	r3, #6
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4832      	ldr	r0, [pc, #200]	@ (8001b28 <MX_GPIO_Init+0x28c>)
 8001a60:	f001 f8ac 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001a64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	482d      	ldr	r0, [pc, #180]	@ (8001b30 <MX_GPIO_Init+0x294>)
 8001a7a:	f001 f89f 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001a7e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a90:	230a      	movs	r3, #10
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4825      	ldr	r0, [pc, #148]	@ (8001b30 <MX_GPIO_Init+0x294>)
 8001a9c:	f001 f88e 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001aa0:	2320      	movs	r3, #32
 8001aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 031c 	add.w	r3, r7, #28
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	481e      	ldr	r0, [pc, #120]	@ (8001b2c <MX_GPIO_Init+0x290>)
 8001ab4:	f001 f882 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001ab8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001abe:	2312      	movs	r3, #18
 8001ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aca:	2304      	movs	r3, #4
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4817      	ldr	r0, [pc, #92]	@ (8001b34 <MX_GPIO_Init+0x298>)
 8001ad6:	f001 f871 	bl	8002bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001ada:	2302      	movs	r3, #2
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ade:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4619      	mov	r1, r3
 8001aee:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <MX_GPIO_Init+0x288>)
 8001af0:	f001 f864 	bl	8002bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001af4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b02:	2302      	movs	r3, #2
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4804      	ldr	r0, [pc, #16]	@ (8001b24 <MX_GPIO_Init+0x288>)
 8001b12:	f001 f853 	bl	8002bbc <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b16:	bf00      	nop
 8001b18:	3730      	adds	r7, #48	@ 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	40020c00 	.word	0x40020c00
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400

08001b38 <_write>:

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e009      	b.n	8001b5e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	60ba      	str	r2, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fa10 	bl	8000f78 <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	dbf1      	blt.n	8001b4a <_write+0x12>
	}

	return len;
 8001b66:	687b      	ldr	r3, [r7, #4]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a08      	ldr	r2, [pc, #32]	@ (8001ba0 <HAL_I2S_RxHalfCpltCallback+0x30>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10a      	bne.n	8001b98 <HAL_I2S_RxHalfCpltCallback+0x28>
	{
		MX_PDM2PCM_Process(&pdmBuffer[0], pcmBuffer);
 8001b82:	4908      	ldr	r1, [pc, #32]	@ (8001ba4 <HAL_I2S_RxHalfCpltCallback+0x34>)
 8001b84:	4808      	ldr	r0, [pc, #32]	@ (8001ba8 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8001b86:	f003 fed5 	bl	8005934 <MX_PDM2PCM_Process>
		amplitude = process_amplitude(pcmBuffer, PCM_BUFFER_SIZE);
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <HAL_I2S_RxHalfCpltCallback+0x34>)
 8001b8e:	f7ff fa1a 	bl	8000fc6 <process_amplitude>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a05      	ldr	r2, [pc, #20]	@ (8001bac <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8001b96:	6013      	str	r3, [r2, #0]
	}
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40003800 	.word	0x40003800
 8001ba4:	200006dc 	.word	0x200006dc
 8001ba8:	200005dc 	.word	0x200005dc
 8001bac:	200006fc 	.word	0x200006fc

08001bb0 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a05      	ldr	r2, [pc, #20]	@ (8001bd4 <HAL_I2S_RxCpltCallback+0x24>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d102      	bne.n	8001bc8 <HAL_I2S_RxCpltCallback+0x18>
    {
    	//MX_PDM2PCM_Process(&pdmBuffer[PDM_BUFFER_SIZE / 2], pcmBuffer);
    	//amplitude = process_amplitude(pcmBuffer, PCM_BUFFER_SIZE);

    	//printf("AMP: %d\n", amplitude);
    	pdmReady = 1;
 8001bc2:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <HAL_I2S_RxCpltCallback+0x28>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

    }
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40003800 	.word	0x40003800
 8001bd8:	20000700 	.word	0x20000700

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <Error_Handler+0x8>

08001be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c34 <HAL_MspInit+0x4c>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <HAL_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	4a08      	ldr	r2, [pc, #32]	@ (8001c34 <HAL_MspInit+0x4c>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c26:	2007      	movs	r0, #7
 8001c28:	f000 fbd8 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0b      	ldr	r2, [pc, #44]	@ (8001c74 <HAL_CRC_MspInit+0x3c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d10d      	bne.n	8001c66 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <HAL_CRC_MspInit+0x40>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a09      	ldr	r2, [pc, #36]	@ (8001c78 <HAL_CRC_MspInit+0x40>)
 8001c54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <HAL_CRC_MspInit+0x40>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023000 	.word	0x40023000
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08e      	sub	sp, #56	@ 0x38
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8001dd0 <HAL_I2S_MspInit+0x154>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	f040 808c 	bne.w	8001dc6 <HAL_I2S_MspInit+0x14a>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001cb2:	2332      	movs	r3, #50	@ 0x32
 8001cb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 fb38 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001cca:	f7ff ff87 	bl	8001bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b40      	ldr	r3, [pc, #256]	@ (8001dd4 <HAL_I2S_MspInit+0x158>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8001dd4 <HAL_I2S_MspInit+0x158>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cde:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <HAL_I2S_MspInit+0x158>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <HAL_I2S_MspInit+0x158>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a38      	ldr	r2, [pc, #224]	@ (8001dd4 <HAL_I2S_MspInit+0x158>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <HAL_I2S_MspInit+0x158>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <HAL_I2S_MspInit+0x158>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a31      	ldr	r2, [pc, #196]	@ (8001dd4 <HAL_I2S_MspInit+0x158>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd4 <HAL_I2S_MspInit+0x158>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001d22:	2308      	movs	r3, #8
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d32:	2305      	movs	r3, #5
 8001d34:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4826      	ldr	r0, [pc, #152]	@ (8001dd8 <HAL_I2S_MspInit+0x15c>)
 8001d3e:	f000 ff3d 	bl	8002bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001d42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d54:	2305      	movs	r3, #5
 8001d56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	481f      	ldr	r0, [pc, #124]	@ (8001ddc <HAL_I2S_MspInit+0x160>)
 8001d60:	f000 ff2c 	bl	8002bbc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001d64:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001d66:	4a1f      	ldr	r2, [pc, #124]	@ (8001de4 <HAL_I2S_MspInit+0x168>)
 8001d68:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d70:	4b1b      	ldr	r3, [pc, #108]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d7c:	4b18      	ldr	r3, [pc, #96]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001d7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d82:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d84:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001d86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d8a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001d8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d92:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001d96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d9a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d9c:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001d9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001da2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da4:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001daa:	480d      	ldr	r0, [pc, #52]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001dac:	f000 fb74 	bl	8002498 <HAL_DMA_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001db6:	f7ff ff11 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a08      	ldr	r2, [pc, #32]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001dbe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dc0:	4a07      	ldr	r2, [pc, #28]	@ (8001de0 <HAL_I2S_MspInit+0x164>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3738      	adds	r7, #56	@ 0x38
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40003800 	.word	0x40003800
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	200004d4 	.word	0x200004d4
 8001de4:	40026058 	.word	0x40026058

08001de8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a22      	ldr	r2, [pc, #136]	@ (8001e80 <HAL_TIM_Base_MspInit+0x98>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d13e      	bne.n	8001e78 <HAL_TIM_Base_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <HAL_TIM_Base_MspInit+0x9c>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	4a20      	ldr	r2, [pc, #128]	@ (8001e84 <HAL_TIM_Base_MspInit+0x9c>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <HAL_TIM_Base_MspInit+0x9c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8001e16:	4b1c      	ldr	r3, [pc, #112]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e18:	4a1c      	ldr	r2, [pc, #112]	@ (8001e8c <HAL_TIM_Base_MspInit+0xa4>)
 8001e1a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e1e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8001e22:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e24:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2a:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001e30:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e38:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e46:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e54:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e56:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001e5c:	480a      	ldr	r0, [pc, #40]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e5e:	f000 fb1b 	bl	8002498 <HAL_DMA_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001e68:	f7ff feb8 	bl	8001bdc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a06      	ldr	r2, [pc, #24]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e70:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e72:	4a05      	ldr	r2, [pc, #20]	@ (8001e88 <HAL_TIM_Base_MspInit+0xa0>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40010000 	.word	0x40010000
 8001e84:	40023800 	.word	0x40023800
 8001e88:	2000057c 	.word	0x2000057c
 8001e8c:	40026428 	.word	0x40026428

08001e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a12      	ldr	r2, [pc, #72]	@ (8001ef8 <HAL_TIM_MspPostInit+0x68>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d11e      	bne.n	8001ef0 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <HAL_TIM_MspPostInit+0x6c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a10      	ldr	r2, [pc, #64]	@ (8001efc <HAL_TIM_MspPostInit+0x6c>)
 8001ebc:	f043 0310 	orr.w	r3, r3, #16
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_TIM_MspPostInit+0x6c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ece:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ed2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <HAL_TIM_MspPostInit+0x70>)
 8001eec:	f000 fe66 	bl	8002bbc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40021000 	.word	0x40021000

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f08:	bf00      	nop
 8001f0a:	e7fd      	b.n	8001f08 <NMI_Handler+0x4>

08001f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f10:	bf00      	nop
 8001f12:	e7fd      	b.n	8001f10 <HardFault_Handler+0x4>

08001f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f18:	bf00      	nop
 8001f1a:	e7fd      	b.n	8001f18 <MemManage_Handler+0x4>

08001f1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <BusFault_Handler+0x4>

08001f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <UsageFault_Handler+0x4>

08001f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5a:	f000 f94f 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <DMA1_Stream3_IRQHandler+0x10>)
 8001f6a:	f000 fbbd 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200004d4 	.word	0x200004d4

08001f78 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	@ (8001f88 <DMA2_Stream1_IRQHandler+0x10>)
 8001f7e:	f000 fbb3 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000057c 	.word	0x2000057c

08001f8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return 1;
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_kill>:

int _kill(int pid, int sig)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fa6:	f005 fd7b 	bl	8007aa0 <__errno>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2216      	movs	r2, #22
 8001fae:	601a      	str	r2, [r3, #0]
  return -1;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_exit>:

void _exit (int status)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ffe7 	bl	8001f9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fce:	bf00      	nop
 8001fd0:	e7fd      	b.n	8001fce <_exit+0x12>

08001fd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e00a      	b.n	8001ffa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	4601      	mov	r1, r0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	60ba      	str	r2, [r7, #8]
 8001ff0:	b2ca      	uxtb	r2, r1
 8001ff2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	dbf0      	blt.n	8001fe4 <_read+0x12>
  }

  return len;
 8002002:	687b      	ldr	r3, [r7, #4]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_close>:
  }
  return len;
}

int _close(int file)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002034:	605a      	str	r2, [r3, #4]
  return 0;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <_isatty>:

int _isatty(int file)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800204c:	2301      	movs	r3, #1
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a14      	ldr	r2, [pc, #80]	@ (80020d0 <_sbrk+0x5c>)
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <_sbrk+0x60>)
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002088:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <_sbrk+0x64>)
 8002092:	4a12      	ldr	r2, [pc, #72]	@ (80020dc <_sbrk+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d207      	bcs.n	80020b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a4:	f005 fcfc 	bl	8007aa0 <__errno>
 80020a8:	4603      	mov	r3, r0
 80020aa:	220c      	movs	r2, #12
 80020ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e009      	b.n	80020c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ba:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <_sbrk+0x64>)
 80020c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20020000 	.word	0x20020000
 80020d4:	00000400 	.word	0x00000400
 80020d8:	2000162c 	.word	0x2000162c
 80020dc:	200017d8 	.word	0x200017d8

080020e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <SystemInit+0x20>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ea:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <SystemInit+0x20>)
 80020ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800213c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002108:	f7ff ffea 	bl	80020e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800210c:	480c      	ldr	r0, [pc, #48]	@ (8002140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210e:	490d      	ldr	r1, [pc, #52]	@ (8002144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002124:	4c0a      	ldr	r4, [pc, #40]	@ (8002150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002132:	f005 fcbb 	bl	8007aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7ff f9db 	bl	80014f0 <main>
  bx  lr    
 800213a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800213c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002144:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8002148:	0800a378 	.word	0x0800a378
  ldr r2, =_sbss
 800214c:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8002150:	200017d4 	.word	0x200017d4

08002154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC_IRQHandler>
	...

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800215c:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <HAL_Init+0x40>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <HAL_Init+0x40>)
 8002162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <HAL_Init+0x40>)
 800216e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a07      	ldr	r2, [pc, #28]	@ (8002198 <HAL_Init+0x40>)
 800217a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002180:	2003      	movs	r0, #3
 8002182:	f000 f92b 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002186:	2000      	movs	r0, #0
 8002188:	f000 f808 	bl	800219c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800218c:	f7ff fd2c 	bl	8001be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40023c00 	.word	0x40023c00

0800219c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_InitTick+0x54>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <HAL_InitTick+0x58>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f943 	bl	8002446 <HAL_SYSTICK_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00e      	b.n	80021e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d80a      	bhi.n	80021e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d0:	2200      	movs	r2, #0
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f000 f90b 	bl	80023f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021dc:	4a06      	ldr	r2, [pc, #24]	@ (80021f8 <HAL_InitTick+0x5c>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e000      	b.n	80021e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000008 	.word	0x20000008
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000008 	.word	0x20000008
 8002220:	20001630 	.word	0x20001630

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20001630 	.word	0x20001630

0800223c <__NVIC_SetPriorityGrouping>:
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4907      	ldr	r1, [pc, #28]	@ (80022d8 <__NVIC_EnableIRQ+0x38>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000e100 	.word	0xe000e100

080022dc <__NVIC_SetPriority>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	@ (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	@ (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	@ 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	@ (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff29 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff3e 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff8e 	bl	8002330 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5d 	bl	80022dc <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff ff31 	bl	80022a0 <__NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffa2 	bl	8002398 <SysTick_Config>
 8002454:	4603      	mov	r3, r0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e00e      	b.n	800248e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	795b      	ldrb	r3, [r3, #5]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d105      	bne.n	8002486 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fbd9 	bl	8001c38 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff febe 	bl	8002224 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e099      	b.n	80025e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d4:	e00f      	b.n	80024f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d6:	f7ff fea5 	bl	8002224 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d908      	bls.n	80024f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e078      	b.n	80025e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e8      	bne.n	80024d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4b38      	ldr	r3, [pc, #224]	@ (80025f0 <HAL_DMA_Init+0x158>)
 8002510:	4013      	ands	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	2b04      	cmp	r3, #4
 800254e:	d107      	bne.n	8002560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	4313      	orrs	r3, r2
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0307 	bic.w	r3, r3, #7
 8002576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	2b04      	cmp	r3, #4
 8002588:	d117      	bne.n	80025ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fa91 	bl	8002ac4 <DMA_CheckFifoParam>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2240      	movs	r2, #64	@ 0x40
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025b6:	2301      	movs	r3, #1
 80025b8:	e016      	b.n	80025e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa48 	bl	8002a58 <DMA_CalcBaseAndBitshift>
 80025c8:	4603      	mov	r3, r0
 80025ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	223f      	movs	r2, #63	@ 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	f010803f 	.word	0xf010803f

080025f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_DMA_Start_IT+0x26>
 8002616:	2302      	movs	r3, #2
 8002618:	e040      	b.n	800269c <HAL_DMA_Start_IT+0xa8>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d12f      	bne.n	800268e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2202      	movs	r2, #2
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f9da 	bl	80029fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	223f      	movs	r2, #63	@ 0x3f
 800264e:	409a      	lsls	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0216 	orr.w	r2, r2, #22
 8002662:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0208 	orr.w	r2, r2, #8
 800267a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e005      	b.n	800269a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002696:	2302      	movs	r3, #2
 8002698:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800269a:	7dfb      	ldrb	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d004      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2280      	movs	r2, #128	@ 0x80
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00c      	b.n	80026dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2205      	movs	r2, #5
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002930 <HAL_DMA_IRQHandler+0x248>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a8e      	ldr	r2, [pc, #568]	@ (8002934 <HAL_DMA_IRQHandler+0x24c>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0a9b      	lsrs	r3, r3, #10
 8002700:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002712:	2208      	movs	r2, #8
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01a      	beq.n	8002754 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0204 	bic.w	r2, r2, #4
 800273a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	2208      	movs	r2, #8
 8002742:	409a      	lsls	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002758:	2201      	movs	r2, #1
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d012      	beq.n	800278a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002776:	2201      	movs	r2, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002782:	f043 0202 	orr.w	r2, r3, #2
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278e:	2204      	movs	r2, #4
 8002790:	409a      	lsls	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d012      	beq.n	80027c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00b      	beq.n	80027c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	2204      	movs	r2, #4
 80027ae:	409a      	lsls	r2, r3
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b8:	f043 0204 	orr.w	r2, r3, #4
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c4:	2210      	movs	r2, #16
 80027c6:	409a      	lsls	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d043      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d03c      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e2:	2210      	movs	r2, #16
 80027e4:	409a      	lsls	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d018      	beq.n	800282a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d024      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
 8002816:	e01f      	b.n	8002858 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01b      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
 8002828:	e016      	b.n	8002858 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d107      	bne.n	8002848 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0208 	bic.w	r2, r2, #8
 8002846:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	2220      	movs	r2, #32
 800285e:	409a      	lsls	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 808f 	beq.w	8002988 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8087 	beq.w	8002988 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287e:	2220      	movs	r2, #32
 8002880:	409a      	lsls	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b05      	cmp	r3, #5
 8002890:	d136      	bne.n	8002900 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0216 	bic.w	r2, r2, #22
 80028a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <HAL_DMA_IRQHandler+0x1da>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0208 	bic.w	r2, r2, #8
 80028d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d6:	223f      	movs	r2, #63	@ 0x3f
 80028d8:	409a      	lsls	r2, r3
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d07e      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
        }
        return;
 80028fe:	e079      	b.n	80029f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01d      	beq.n	800294a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10d      	bne.n	8002938 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002920:	2b00      	cmp	r3, #0
 8002922:	d031      	beq.n	8002988 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
 800292c:	e02c      	b.n	8002988 <HAL_DMA_IRQHandler+0x2a0>
 800292e:	bf00      	nop
 8002930:	20000000 	.word	0x20000000
 8002934:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d023      	beq.n	8002988 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
 8002948:	e01e      	b.n	8002988 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10f      	bne.n	8002978 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0210 	bic.w	r2, r2, #16
 8002966:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298c:	2b00      	cmp	r3, #0
 800298e:	d032      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d022      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2205      	movs	r2, #5
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	3301      	adds	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d307      	bcc.n	80029d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f2      	bne.n	80029b4 <HAL_DMA_IRQHandler+0x2cc>
 80029ce:	e000      	b.n	80029d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	4798      	blx	r3
 80029f2:	e000      	b.n	80029f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80029f4:	bf00      	nop
    }
  }
}
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b40      	cmp	r3, #64	@ 0x40
 8002a28:	d108      	bne.n	8002a3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a3a:	e007      	b.n	8002a4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3b10      	subs	r3, #16
 8002a68:	4a14      	ldr	r2, [pc, #80]	@ (8002abc <DMA_CalcBaseAndBitshift+0x64>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a72:	4a13      	ldr	r2, [pc, #76]	@ (8002ac0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d909      	bls.n	8002a9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	1d1a      	adds	r2, r3, #4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a98:	e007      	b.n	8002aaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	aaaaaaab 	.word	0xaaaaaaab
 8002ac0:	0800a054 	.word	0x0800a054

08002ac4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11f      	bne.n	8002b1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d856      	bhi.n	8002b92 <DMA_CheckFifoParam+0xce>
 8002ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8002aec <DMA_CheckFifoParam+0x28>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002afd 	.word	0x08002afd
 8002af0:	08002b0f 	.word	0x08002b0f
 8002af4:	08002afd 	.word	0x08002afd
 8002af8:	08002b93 	.word	0x08002b93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d046      	beq.n	8002b96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0c:	e043      	b.n	8002b96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b16:	d140      	bne.n	8002b9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e03d      	b.n	8002b9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b26:	d121      	bne.n	8002b6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d837      	bhi.n	8002b9e <DMA_CheckFifoParam+0xda>
 8002b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b34 <DMA_CheckFifoParam+0x70>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b45 	.word	0x08002b45
 8002b38:	08002b4b 	.word	0x08002b4b
 8002b3c:	08002b45 	.word	0x08002b45
 8002b40:	08002b5d 	.word	0x08002b5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      break;
 8002b48:	e030      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d025      	beq.n	8002ba2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5a:	e022      	b.n	8002ba2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b64:	d11f      	bne.n	8002ba6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b6a:	e01c      	b.n	8002ba6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d903      	bls.n	8002b7a <DMA_CheckFifoParam+0xb6>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d003      	beq.n	8002b80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b78:	e018      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7e:	e015      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b90:	e00b      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
      break;
 8002b92:	bf00      	nop
 8002b94:	e00a      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;
 8002b96:	bf00      	nop
 8002b98:	e008      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e006      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e004      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e002      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;   
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <DMA_CheckFifoParam+0xe8>
      break;
 8002baa:	bf00      	nop
    }
  } 
  
  return status; 
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop

08002bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	@ 0x24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e16b      	b.n	8002eb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	f040 815a 	bne.w	8002eaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d005      	beq.n	8002c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d130      	bne.n	8002c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c44:	2201      	movs	r2, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0201 	and.w	r2, r3, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d017      	beq.n	8002cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d123      	bne.n	8002d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	08da      	lsrs	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3208      	adds	r2, #8
 8002cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	220f      	movs	r2, #15
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	08da      	lsrs	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3208      	adds	r2, #8
 8002cfa:	69b9      	ldr	r1, [r7, #24]
 8002cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0203 	and.w	r2, r3, #3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80b4 	beq.w	8002eaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	4b60      	ldr	r3, [pc, #384]	@ (8002ec8 <HAL_GPIO_Init+0x30c>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002ec8 <HAL_GPIO_Init+0x30c>)
 8002d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d52:	4b5d      	ldr	r3, [pc, #372]	@ (8002ec8 <HAL_GPIO_Init+0x30c>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ecc <HAL_GPIO_Init+0x310>)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	3302      	adds	r3, #2
 8002d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	220f      	movs	r2, #15
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a52      	ldr	r2, [pc, #328]	@ (8002ed0 <HAL_GPIO_Init+0x314>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d02b      	beq.n	8002de2 <HAL_GPIO_Init+0x226>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a51      	ldr	r2, [pc, #324]	@ (8002ed4 <HAL_GPIO_Init+0x318>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d025      	beq.n	8002dde <HAL_GPIO_Init+0x222>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a50      	ldr	r2, [pc, #320]	@ (8002ed8 <HAL_GPIO_Init+0x31c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01f      	beq.n	8002dda <HAL_GPIO_Init+0x21e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002edc <HAL_GPIO_Init+0x320>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d019      	beq.n	8002dd6 <HAL_GPIO_Init+0x21a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee0 <HAL_GPIO_Init+0x324>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d013      	beq.n	8002dd2 <HAL_GPIO_Init+0x216>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee4 <HAL_GPIO_Init+0x328>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00d      	beq.n	8002dce <HAL_GPIO_Init+0x212>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ee8 <HAL_GPIO_Init+0x32c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <HAL_GPIO_Init+0x20e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002eec <HAL_GPIO_Init+0x330>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d101      	bne.n	8002dc6 <HAL_GPIO_Init+0x20a>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e00e      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	e00c      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dca:	2306      	movs	r3, #6
 8002dcc:	e00a      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dce:	2305      	movs	r3, #5
 8002dd0:	e008      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	e006      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e004      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e002      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_GPIO_Init+0x228>
 8002de2:	2300      	movs	r3, #0
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	f002 0203 	and.w	r2, r2, #3
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	4093      	lsls	r3, r2
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df4:	4935      	ldr	r1, [pc, #212]	@ (8002ecc <HAL_GPIO_Init+0x310>)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e02:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e26:	4a32      	ldr	r2, [pc, #200]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e50:	4a27      	ldr	r2, [pc, #156]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e56:	4b26      	ldr	r3, [pc, #152]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea4:	4a12      	ldr	r2, [pc, #72]	@ (8002ef0 <HAL_GPIO_Init+0x334>)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	3301      	adds	r3, #1
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	f67f ae90 	bls.w	8002bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3724      	adds	r7, #36	@ 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40021400 	.word	0x40021400
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40021c00 	.word	0x40021c00
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
 8002f00:	4613      	mov	r3, r2
 8002f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f04:	787b      	ldrb	r3, [r7, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0a:	887a      	ldrh	r2, [r7, #2]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f10:	e003      	b.n	8002f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	041a      	lsls	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	619a      	str	r2, [r3, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e128      	b.n	800318c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a90      	ldr	r2, [pc, #576]	@ (8003194 <HAL_I2S_Init+0x26c>)
 8002f52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7fe fe91 	bl	8001c7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002f70:	f023 030f 	bic.w	r3, r3, #15
 8002f74:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d060      	beq.n	8003048 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d102      	bne.n	8002f94 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f8e:	2310      	movs	r3, #16
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	e001      	b.n	8002f98 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d802      	bhi.n	8002fa6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f001 faa6 	bl	80044f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb6:	d125      	bne.n	8003004 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	3305      	adds	r3, #5
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e01f      	b.n	8003022 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffe:	3305      	adds	r3, #5
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	e00e      	b.n	8003022 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fbb2 f2f3 	udiv	r2, r2, r3
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	461a      	mov	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	3305      	adds	r3, #5
 8003020:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4a5c      	ldr	r2, [pc, #368]	@ (8003198 <HAL_I2S_Init+0x270>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	08db      	lsrs	r3, r3, #3
 800302c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	e003      	b.n	8003050 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003048:	2302      	movs	r3, #2
 800304a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d902      	bls.n	800305c <HAL_I2S_Init+0x134>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	2bff      	cmp	r3, #255	@ 0xff
 800305a:	d907      	bls.n	800306c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003060:	f043 0210 	orr.w	r2, r3, #16
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e08f      	b.n	800318c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	ea42 0103 	orr.w	r1, r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69fa      	ldr	r2, [r7, #28]
 800307c:	430a      	orrs	r2, r1
 800307e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800308a:	f023 030f 	bic.w	r3, r3, #15
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6851      	ldr	r1, [r2, #4]
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6892      	ldr	r2, [r2, #8]
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68d2      	ldr	r2, [r2, #12]
 800309c:	4311      	orrs	r1, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6992      	ldr	r2, [r2, #24]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d161      	bne.n	800317c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a38      	ldr	r2, [pc, #224]	@ (800319c <HAL_I2S_Init+0x274>)
 80030bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a37      	ldr	r2, [pc, #220]	@ (80031a0 <HAL_I2S_Init+0x278>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d101      	bne.n	80030cc <HAL_I2S_Init+0x1a4>
 80030c8:	4b36      	ldr	r3, [pc, #216]	@ (80031a4 <HAL_I2S_Init+0x27c>)
 80030ca:	e001      	b.n	80030d0 <HAL_I2S_Init+0x1a8>
 80030cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	4932      	ldr	r1, [pc, #200]	@ (80031a0 <HAL_I2S_Init+0x278>)
 80030d8:	428a      	cmp	r2, r1
 80030da:	d101      	bne.n	80030e0 <HAL_I2S_Init+0x1b8>
 80030dc:	4a31      	ldr	r2, [pc, #196]	@ (80031a4 <HAL_I2S_Init+0x27c>)
 80030de:	e001      	b.n	80030e4 <HAL_I2S_Init+0x1bc>
 80030e0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80030e4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80030e8:	f023 030f 	bic.w	r3, r3, #15
 80030ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2b      	ldr	r2, [pc, #172]	@ (80031a0 <HAL_I2S_Init+0x278>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d101      	bne.n	80030fc <HAL_I2S_Init+0x1d4>
 80030f8:	4b2a      	ldr	r3, [pc, #168]	@ (80031a4 <HAL_I2S_Init+0x27c>)
 80030fa:	e001      	b.n	8003100 <HAL_I2S_Init+0x1d8>
 80030fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003100:	2202      	movs	r2, #2
 8003102:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a25      	ldr	r2, [pc, #148]	@ (80031a0 <HAL_I2S_Init+0x278>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d101      	bne.n	8003112 <HAL_I2S_Init+0x1ea>
 800310e:	4b25      	ldr	r3, [pc, #148]	@ (80031a4 <HAL_I2S_Init+0x27c>)
 8003110:	e001      	b.n	8003116 <HAL_I2S_Init+0x1ee>
 8003112:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003122:	d003      	beq.n	800312c <HAL_I2S_Init+0x204>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d103      	bne.n	8003134 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800312c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e001      	b.n	8003138 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003134:	2300      	movs	r3, #0
 8003136:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003142:	4313      	orrs	r3, r2
 8003144:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800314c:	4313      	orrs	r3, r2
 800314e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003156:	4313      	orrs	r3, r2
 8003158:	b29a      	uxth	r2, r3
 800315a:	897b      	ldrh	r3, [r7, #10]
 800315c:	4313      	orrs	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003164:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a0d      	ldr	r2, [pc, #52]	@ (80031a0 <HAL_I2S_Init+0x278>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_I2S_Init+0x24c>
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <HAL_I2S_Init+0x27c>)
 8003172:	e001      	b.n	8003178 <HAL_I2S_Init+0x250>
 8003174:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003178:	897a      	ldrh	r2, [r7, #10]
 800317a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	080034a5 	.word	0x080034a5
 8003198:	cccccccd 	.word	0xcccccccd
 800319c:	080035b9 	.word	0x080035b9
 80031a0:	40003800 	.word	0x40003800
 80031a4:	40003400 	.word	0x40003400

080031a8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_I2S_Receive_DMA+0x1a>
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e09d      	b.n	8003302 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 80031d2:	2302      	movs	r3, #2
 80031d4:	e095      	b.n	8003302 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_I2S_Receive_DMA+0x3e>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e08d      	b.n	8003302 <HAL_I2S_Receive_DMA+0x15a>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2204      	movs	r2, #4
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d002      	beq.n	800321a <HAL_I2S_Receive_DMA+0x72>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b05      	cmp	r3, #5
 8003218:	d10a      	bne.n	8003230 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	865a      	strh	r2, [r3, #50]	@ 0x32
 800322e:	e005      	b.n	800323c <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	88fa      	ldrh	r2, [r7, #6]
 8003234:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	88fa      	ldrh	r2, [r7, #6]
 800323a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	4a32      	ldr	r2, [pc, #200]	@ (800330c <HAL_I2S_Receive_DMA+0x164>)
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003248:	4a31      	ldr	r2, [pc, #196]	@ (8003310 <HAL_I2S_Receive_DMA+0x168>)
 800324a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003250:	4a30      	ldr	r2, [pc, #192]	@ (8003314 <HAL_I2S_Receive_DMA+0x16c>)
 8003252:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800325e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003262:	d10a      	bne.n	800327a <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	330c      	adds	r3, #12
 8003284:	4619      	mov	r1, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003290:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003292:	f7ff f9af 	bl	80025f4 <HAL_DMA_Start_IT>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00f      	beq.n	80032bc <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a0:	f043 0208 	orr.w	r2, r3, #8
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e022      	b.n	8003302 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d107      	bne.n	80032e2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032fe:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	08003383 	.word	0x08003383
 8003310:	08003341 	.word	0x08003341
 8003314:	0800339f 	.word	0x0800339f

08003318 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10e      	bne.n	8003374 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0201 	bic.w	r2, r2, #1
 8003364:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f7fe fc1b 	bl	8001bb0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800337a:	bf00      	nop
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7fe fbed 	bl	8001b70 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0203 	bic.w	r2, r2, #3
 80033ba:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d4:	f043 0208 	orr.w	r2, r3, #8
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff ffa5 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	881a      	ldrh	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	1c9a      	adds	r2, r3, #2
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10e      	bne.n	800343e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800342e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff6d 	bl	8003318 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	b292      	uxth	r2, r2
 800345a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	1c9a      	adds	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10e      	bne.n	800349c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800348c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fe fb8a 	bl	8001bb0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d13a      	bne.n	8003536 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d109      	bne.n	80034de <I2S_IRQHandler+0x3a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d4:	2b40      	cmp	r3, #64	@ 0x40
 80034d6:	d102      	bne.n	80034de <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ffb4 	bl	8003446 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e4:	2b40      	cmp	r3, #64	@ 0x40
 80034e6:	d126      	bne.n	8003536 <I2S_IRQHandler+0x92>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d11f      	bne.n	8003536 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003504:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003528:	f043 0202 	orr.w	r2, r3, #2
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff fefb 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b03      	cmp	r3, #3
 8003540:	d136      	bne.n	80035b0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d109      	bne.n	8003560 <I2S_IRQHandler+0xbc>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003556:	2b80      	cmp	r3, #128	@ 0x80
 8003558:	d102      	bne.n	8003560 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ff45 	bl	80033ea <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b08      	cmp	r3, #8
 8003568:	d122      	bne.n	80035b0 <I2S_IRQHandler+0x10c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b20      	cmp	r3, #32
 8003576:	d11b      	bne.n	80035b0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003586:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	f043 0204 	orr.w	r2, r3, #4
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff febe 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a92      	ldr	r2, [pc, #584]	@ (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035d2:	4b92      	ldr	r3, [pc, #584]	@ (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d4:	e001      	b.n	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a8b      	ldr	r2, [pc, #556]	@ (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035f0:	4b8a      	ldr	r3, [pc, #552]	@ (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035f2:	e001      	b.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003604:	d004      	beq.n	8003610 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 8099 	bne.w	8003742 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d107      	bne.n	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f925 	bl	8003874 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b01      	cmp	r3, #1
 8003632:	d107      	bne.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f9c8 	bl	80039d4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364a:	2b40      	cmp	r3, #64	@ 0x40
 800364c:	d13a      	bne.n	80036c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d035      	beq.n	80036c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a6e      	ldr	r2, [pc, #440]	@ (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003662:	4b6e      	ldr	r3, [pc, #440]	@ (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003664:	e001      	b.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003666:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4969      	ldr	r1, [pc, #420]	@ (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003672:	428b      	cmp	r3, r1
 8003674:	d101      	bne.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003676:	4b69      	ldr	r3, [pc, #420]	@ (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003678:	e001      	b.n	800367e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800367a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800367e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003682:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003692:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f043 0202 	orr.w	r2, r3, #2
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fe34 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	f040 80c3 	bne.w	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80bd 	beq.w	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80036ea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a49      	ldr	r2, [pc, #292]	@ (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036f6:	4b49      	ldr	r3, [pc, #292]	@ (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f8:	e001      	b.n	80036fe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4944      	ldr	r1, [pc, #272]	@ (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003706:	428b      	cmp	r3, r1
 8003708:	d101      	bne.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800370a:	4b44      	ldr	r3, [pc, #272]	@ (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800370c:	e001      	b.n	8003712 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800370e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003712:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003716:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003732:	f043 0204 	orr.w	r2, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff fdf6 	bl	800332c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003740:	e089      	b.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b02      	cmp	r3, #2
 800374a:	d107      	bne.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8be 	bl	80038d8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b01      	cmp	r3, #1
 8003764:	d107      	bne.n	8003776 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f8fd 	bl	8003970 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377c:	2b40      	cmp	r3, #64	@ 0x40
 800377e:	d12f      	bne.n	80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d02a      	beq.n	80037e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003798:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1e      	ldr	r2, [pc, #120]	@ (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d101      	bne.n	80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037a4:	4b1d      	ldr	r3, [pc, #116]	@ (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037a6:	e001      	b.n	80037ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4919      	ldr	r1, [pc, #100]	@ (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b4:	428b      	cmp	r3, r1
 80037b6:	d101      	bne.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037b8:	4b18      	ldr	r3, [pc, #96]	@ (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037ba:	e001      	b.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80037c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	f043 0202 	orr.w	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fda6 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d136      	bne.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d031      	beq.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a07      	ldr	r2, [pc, #28]	@ (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d101      	bne.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037fe:	4b07      	ldr	r3, [pc, #28]	@ (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003800:	e001      	b.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003802:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4902      	ldr	r1, [pc, #8]	@ (8003818 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800380e:	428b      	cmp	r3, r1
 8003810:	d106      	bne.n	8003820 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003812:	4b02      	ldr	r3, [pc, #8]	@ (800381c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003814:	e006      	b.n	8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003816:	bf00      	nop
 8003818:	40003800 	.word	0x40003800
 800381c:	40003400 	.word	0x40003400
 8003820:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003824:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003828:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003838:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f043 0204 	orr.w	r2, r3, #4
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff fd6c 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003854:	e000      	b.n	8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003856:	bf00      	nop
}
 8003858:	bf00      	nop
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003880:	1c99      	adds	r1, r3, #2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6251      	str	r1, [r2, #36]	@ 0x24
 8003886:	881a      	ldrh	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d113      	bne.n	80038ce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80038b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d106      	bne.n	80038ce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ffc9 	bl	8003860 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	1c99      	adds	r1, r3, #2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6251      	str	r1, [r2, #36]	@ 0x24
 80038ea:	8819      	ldrh	r1, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003968 <I2SEx_TxISR_I2SExt+0x90>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <I2SEx_TxISR_I2SExt+0x22>
 80038f6:	4b1d      	ldr	r3, [pc, #116]	@ (800396c <I2SEx_TxISR_I2SExt+0x94>)
 80038f8:	e001      	b.n	80038fe <I2SEx_TxISR_I2SExt+0x26>
 80038fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80038fe:	460a      	mov	r2, r1
 8003900:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d121      	bne.n	800395e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a12      	ldr	r2, [pc, #72]	@ (8003968 <I2SEx_TxISR_I2SExt+0x90>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d101      	bne.n	8003928 <I2SEx_TxISR_I2SExt+0x50>
 8003924:	4b11      	ldr	r3, [pc, #68]	@ (800396c <I2SEx_TxISR_I2SExt+0x94>)
 8003926:	e001      	b.n	800392c <I2SEx_TxISR_I2SExt+0x54>
 8003928:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	490d      	ldr	r1, [pc, #52]	@ (8003968 <I2SEx_TxISR_I2SExt+0x90>)
 8003934:	428b      	cmp	r3, r1
 8003936:	d101      	bne.n	800393c <I2SEx_TxISR_I2SExt+0x64>
 8003938:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <I2SEx_TxISR_I2SExt+0x94>)
 800393a:	e001      	b.n	8003940 <I2SEx_TxISR_I2SExt+0x68>
 800393c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003940:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003944:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff81 	bl	8003860 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40003800 	.word	0x40003800
 800396c:	40003400 	.word	0x40003400

08003970 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68d8      	ldr	r0, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003982:	1c99      	adds	r1, r3, #2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003988:	b282      	uxth	r2, r0
 800398a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d113      	bne.n	80039cc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039b2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ff4a 	bl	8003860 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039cc:	bf00      	nop
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a20      	ldr	r2, [pc, #128]	@ (8003a64 <I2SEx_RxISR_I2SExt+0x90>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <I2SEx_RxISR_I2SExt+0x16>
 80039e6:	4b20      	ldr	r3, [pc, #128]	@ (8003a68 <I2SEx_RxISR_I2SExt+0x94>)
 80039e8:	e001      	b.n	80039ee <I2SEx_RxISR_I2SExt+0x1a>
 80039ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80039ee:	68d8      	ldr	r0, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	1c99      	adds	r1, r3, #2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80039fa:	b282      	uxth	r2, r0
 80039fc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d121      	bne.n	8003a5a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a12      	ldr	r2, [pc, #72]	@ (8003a64 <I2SEx_RxISR_I2SExt+0x90>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d101      	bne.n	8003a24 <I2SEx_RxISR_I2SExt+0x50>
 8003a20:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <I2SEx_RxISR_I2SExt+0x94>)
 8003a22:	e001      	b.n	8003a28 <I2SEx_RxISR_I2SExt+0x54>
 8003a24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	490d      	ldr	r1, [pc, #52]	@ (8003a64 <I2SEx_RxISR_I2SExt+0x90>)
 8003a30:	428b      	cmp	r3, r1
 8003a32:	d101      	bne.n	8003a38 <I2SEx_RxISR_I2SExt+0x64>
 8003a34:	4b0c      	ldr	r3, [pc, #48]	@ (8003a68 <I2SEx_RxISR_I2SExt+0x94>)
 8003a36:	e001      	b.n	8003a3c <I2SEx_RxISR_I2SExt+0x68>
 8003a38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a3c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a40:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ff03 	bl	8003860 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40003800 	.word	0x40003800
 8003a68:	40003400 	.word	0x40003400

08003a6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e267      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d075      	beq.n	8003b76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a8a:	4b88      	ldr	r3, [pc, #544]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d00c      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a96:	4b85      	ldr	r3, [pc, #532]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a9e:	2b08      	cmp	r3, #8
 8003aa0:	d112      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa2:	4b82      	ldr	r3, [pc, #520]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003aae:	d10b      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d05b      	beq.n	8003b74 <HAL_RCC_OscConfig+0x108>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d157      	bne.n	8003b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e242      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad0:	d106      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x74>
 8003ad2:	4b76      	ldr	r3, [pc, #472]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a75      	ldr	r2, [pc, #468]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e01d      	b.n	8003b1c <HAL_RCC_OscConfig+0xb0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ae8:	d10c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x98>
 8003aea:	4b70      	ldr	r3, [pc, #448]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a6f      	ldr	r2, [pc, #444]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003af4:	6013      	str	r3, [r2, #0]
 8003af6:	4b6d      	ldr	r3, [pc, #436]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a6c      	ldr	r2, [pc, #432]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e00b      	b.n	8003b1c <HAL_RCC_OscConfig+0xb0>
 8003b04:	4b69      	ldr	r3, [pc, #420]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a68      	ldr	r2, [pc, #416]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b66      	ldr	r3, [pc, #408]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a65      	ldr	r2, [pc, #404]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fe fb7e 	bl	8002224 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2c:	f7fe fb7a 	bl	8002224 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b64      	cmp	r3, #100	@ 0x64
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e207      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0xc0>
 8003b4a:	e014      	b.n	8003b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fb6a 	bl	8002224 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7fe fb66 	bl	8002224 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	@ 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e1f3      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	4b51      	ldr	r3, [pc, #324]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0xe8>
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d063      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b82:	4b4a      	ldr	r3, [pc, #296]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b8e:	4b47      	ldr	r3, [pc, #284]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d11c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9a:	4b44      	ldr	r3, [pc, #272]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d116      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba6:	4b41      	ldr	r3, [pc, #260]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_RCC_OscConfig+0x152>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d001      	beq.n	8003bbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e1c7      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4937      	ldr	r1, [pc, #220]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd2:	e03a      	b.n	8003c4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bdc:	4b34      	ldr	r3, [pc, #208]	@ (8003cb0 <HAL_RCC_OscConfig+0x244>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be2:	f7fe fb1f 	bl	8002224 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bea:	f7fe fb1b 	bl	8002224 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e1a8      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c08:	4b28      	ldr	r3, [pc, #160]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4925      	ldr	r1, [pc, #148]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	600b      	str	r3, [r1, #0]
 8003c1c:	e015      	b.n	8003c4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1e:	4b24      	ldr	r3, [pc, #144]	@ (8003cb0 <HAL_RCC_OscConfig+0x244>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fe fafe 	bl	8002224 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c2c:	f7fe fafa 	bl	8002224 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e187      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d036      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d016      	beq.n	8003c8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5e:	4b15      	ldr	r3, [pc, #84]	@ (8003cb4 <HAL_RCC_OscConfig+0x248>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c64:	f7fe fade 	bl	8002224 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6c:	f7fe fada 	bl	8002224 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e167      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <HAL_RCC_OscConfig+0x240>)
 8003c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x200>
 8003c8a:	e01b      	b.n	8003cc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8c:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <HAL_RCC_OscConfig+0x248>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c92:	f7fe fac7 	bl	8002224 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c98:	e00e      	b.n	8003cb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9a:	f7fe fac3 	bl	8002224 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d907      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e150      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	42470000 	.word	0x42470000
 8003cb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cb8:	4b88      	ldr	r3, [pc, #544]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ea      	bne.n	8003c9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8097 	beq.w	8003e00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd6:	4b81      	ldr	r3, [pc, #516]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10f      	bne.n	8003d02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	4b7d      	ldr	r3, [pc, #500]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	4a7c      	ldr	r2, [pc, #496]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf2:	4b7a      	ldr	r3, [pc, #488]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d02:	4b77      	ldr	r3, [pc, #476]	@ (8003ee0 <HAL_RCC_OscConfig+0x474>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d118      	bne.n	8003d40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d0e:	4b74      	ldr	r3, [pc, #464]	@ (8003ee0 <HAL_RCC_OscConfig+0x474>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a73      	ldr	r2, [pc, #460]	@ (8003ee0 <HAL_RCC_OscConfig+0x474>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1a:	f7fe fa83 	bl	8002224 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d22:	f7fe fa7f 	bl	8002224 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e10c      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d34:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee0 <HAL_RCC_OscConfig+0x474>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d106      	bne.n	8003d56 <HAL_RCC_OscConfig+0x2ea>
 8003d48:	4b64      	ldr	r3, [pc, #400]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a63      	ldr	r2, [pc, #396]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d54:	e01c      	b.n	8003d90 <HAL_RCC_OscConfig+0x324>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b05      	cmp	r3, #5
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x30c>
 8003d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d62:	4a5e      	ldr	r2, [pc, #376]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d64:	f043 0304 	orr.w	r3, r3, #4
 8003d68:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6a:	4b5c      	ldr	r3, [pc, #368]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6e:	4a5b      	ldr	r2, [pc, #364]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d76:	e00b      	b.n	8003d90 <HAL_RCC_OscConfig+0x324>
 8003d78:	4b58      	ldr	r3, [pc, #352]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7c:	4a57      	ldr	r2, [pc, #348]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d84:	4b55      	ldr	r3, [pc, #340]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d88:	4a54      	ldr	r2, [pc, #336]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003d8a:	f023 0304 	bic.w	r3, r3, #4
 8003d8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d015      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fe fa44 	bl	8002224 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da0:	f7fe fa40 	bl	8002224 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e0cb      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db6:	4b49      	ldr	r3, [pc, #292]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0ee      	beq.n	8003da0 <HAL_RCC_OscConfig+0x334>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc4:	f7fe fa2e 	bl	8002224 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fa2a 	bl	8002224 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0b5      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de2:	4b3e      	ldr	r3, [pc, #248]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1ee      	bne.n	8003dcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d105      	bne.n	8003e00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df4:	4b39      	ldr	r3, [pc, #228]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	4a38      	ldr	r2, [pc, #224]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003dfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80a1 	beq.w	8003f4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e0a:	4b34      	ldr	r3, [pc, #208]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d05c      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d141      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ee4 <HAL_RCC_OscConfig+0x478>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe f9fe 	bl	8002224 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2c:	f7fe f9fa 	bl	8002224 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e087      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3e:	4b27      	ldr	r3, [pc, #156]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	019b      	lsls	r3, r3, #6
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	3b01      	subs	r3, #1
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	491b      	ldr	r1, [pc, #108]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <HAL_RCC_OscConfig+0x478>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7fe f9d3 	bl	8002224 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fe f9cf 	bl	8002224 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e05c      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e94:	4b11      	ldr	r3, [pc, #68]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x416>
 8003ea0:	e054      	b.n	8003f4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea2:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <HAL_RCC_OscConfig+0x478>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe f9bc 	bl	8002224 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fe f9b8 	bl	8002224 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e045      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <HAL_RCC_OscConfig+0x470>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x444>
 8003ece:	e03d      	b.n	8003f4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e038      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40007000 	.word	0x40007000
 8003ee4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f58 <HAL_RCC_OscConfig+0x4ec>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d028      	beq.n	8003f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d121      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d11a      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f18:	4013      	ands	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d111      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2e:	085b      	lsrs	r3, r3, #1
 8003f30:	3b01      	subs	r3, #1
 8003f32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d107      	bne.n	8003f48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800

08003f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0cc      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f70:	4b68      	ldr	r3, [pc, #416]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d90c      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b65      	ldr	r3, [pc, #404]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b63      	ldr	r3, [pc, #396]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0b8      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d020      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb0:	4b59      	ldr	r3, [pc, #356]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4a58      	ldr	r2, [pc, #352]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc8:	4b53      	ldr	r3, [pc, #332]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4a52      	ldr	r2, [pc, #328]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd4:	4b50      	ldr	r3, [pc, #320]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	494d      	ldr	r1, [pc, #308]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d044      	beq.n	800407c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffa:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d119      	bne.n	800403a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e07f      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d003      	beq.n	800401a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004016:	2b03      	cmp	r3, #3
 8004018:	d107      	bne.n	800402a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401a:	4b3f      	ldr	r3, [pc, #252]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e06f      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e067      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403a:	4b37      	ldr	r3, [pc, #220]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f023 0203 	bic.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4934      	ldr	r1, [pc, #208]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800404c:	f7fe f8ea 	bl	8002224 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	e00a      	b.n	800406a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004054:	f7fe f8e6 	bl	8002224 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e04f      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	4b2b      	ldr	r3, [pc, #172]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 020c 	and.w	r2, r3, #12
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	429a      	cmp	r2, r3
 800407a:	d1eb      	bne.n	8004054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800407c:	4b25      	ldr	r3, [pc, #148]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d20c      	bcs.n	80040a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b22      	ldr	r3, [pc, #136]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b20      	ldr	r3, [pc, #128]	@ (8004114 <HAL_RCC_ClockConfig+0x1b8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e032      	b.n	800410a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b0:	4b19      	ldr	r3, [pc, #100]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4916      	ldr	r1, [pc, #88]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ce:	4b12      	ldr	r3, [pc, #72]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	490e      	ldr	r1, [pc, #56]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040e2:	f000 f821 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80040e6:	4602      	mov	r2, r0
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f003 030f 	and.w	r3, r3, #15
 80040f2:	490a      	ldr	r1, [pc, #40]	@ (800411c <HAL_RCC_ClockConfig+0x1c0>)
 80040f4:	5ccb      	ldrb	r3, [r1, r3]
 80040f6:	fa22 f303 	lsr.w	r3, r2, r3
 80040fa:	4a09      	ldr	r2, [pc, #36]	@ (8004120 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040fe:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <HAL_RCC_ClockConfig+0x1c8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe f84a 	bl	800219c <HAL_InitTick>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023c00 	.word	0x40023c00
 8004118:	40023800 	.word	0x40023800
 800411c:	0800a044 	.word	0x0800a044
 8004120:	20000000 	.word	0x20000000
 8004124:	20000004 	.word	0x20000004

08004128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800412c:	b094      	sub	sp, #80	@ 0x50
 800412e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004140:	4b79      	ldr	r3, [pc, #484]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b08      	cmp	r3, #8
 800414a:	d00d      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x40>
 800414c:	2b08      	cmp	r3, #8
 800414e:	f200 80e1 	bhi.w	8004314 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0x34>
 8004156:	2b04      	cmp	r3, #4
 8004158:	d003      	beq.n	8004162 <HAL_RCC_GetSysClockFreq+0x3a>
 800415a:	e0db      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800415c:	4b73      	ldr	r3, [pc, #460]	@ (800432c <HAL_RCC_GetSysClockFreq+0x204>)
 800415e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004160:	e0db      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004162:	4b73      	ldr	r3, [pc, #460]	@ (8004330 <HAL_RCC_GetSysClockFreq+0x208>)
 8004164:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004166:	e0d8      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004168:	4b6f      	ldr	r3, [pc, #444]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004170:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004172:	4b6d      	ldr	r3, [pc, #436]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d063      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417e:	4b6a      	ldr	r3, [pc, #424]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	099b      	lsrs	r3, r3, #6
 8004184:	2200      	movs	r2, #0
 8004186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004188:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800418a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800418c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004190:	633b      	str	r3, [r7, #48]	@ 0x30
 8004192:	2300      	movs	r3, #0
 8004194:	637b      	str	r3, [r7, #52]	@ 0x34
 8004196:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800419a:	4622      	mov	r2, r4
 800419c:	462b      	mov	r3, r5
 800419e:	f04f 0000 	mov.w	r0, #0
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	0159      	lsls	r1, r3, #5
 80041a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ac:	0150      	lsls	r0, r2, #5
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4621      	mov	r1, r4
 80041b4:	1a51      	subs	r1, r2, r1
 80041b6:	6139      	str	r1, [r7, #16]
 80041b8:	4629      	mov	r1, r5
 80041ba:	eb63 0301 	sbc.w	r3, r3, r1
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041cc:	4659      	mov	r1, fp
 80041ce:	018b      	lsls	r3, r1, #6
 80041d0:	4651      	mov	r1, sl
 80041d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041d6:	4651      	mov	r1, sl
 80041d8:	018a      	lsls	r2, r1, #6
 80041da:	4651      	mov	r1, sl
 80041dc:	ebb2 0801 	subs.w	r8, r2, r1
 80041e0:	4659      	mov	r1, fp
 80041e2:	eb63 0901 	sbc.w	r9, r3, r1
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041fa:	4690      	mov	r8, r2
 80041fc:	4699      	mov	r9, r3
 80041fe:	4623      	mov	r3, r4
 8004200:	eb18 0303 	adds.w	r3, r8, r3
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	462b      	mov	r3, r5
 8004208:	eb49 0303 	adc.w	r3, r9, r3
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800421a:	4629      	mov	r1, r5
 800421c:	024b      	lsls	r3, r1, #9
 800421e:	4621      	mov	r1, r4
 8004220:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004224:	4621      	mov	r1, r4
 8004226:	024a      	lsls	r2, r1, #9
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800422e:	2200      	movs	r2, #0
 8004230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004232:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004234:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004238:	f7fc fd08 	bl	8000c4c <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004244:	e058      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004246:	4b38      	ldr	r3, [pc, #224]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	2200      	movs	r2, #0
 800424e:	4618      	mov	r0, r3
 8004250:	4611      	mov	r1, r2
 8004252:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004256:	623b      	str	r3, [r7, #32]
 8004258:	2300      	movs	r3, #0
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
 800425c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	f04f 0000 	mov.w	r0, #0
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	0159      	lsls	r1, r3, #5
 800426e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004272:	0150      	lsls	r0, r2, #5
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4641      	mov	r1, r8
 800427a:	ebb2 0a01 	subs.w	sl, r2, r1
 800427e:	4649      	mov	r1, r9
 8004280:	eb63 0b01 	sbc.w	fp, r3, r1
 8004284:	f04f 0200 	mov.w	r2, #0
 8004288:	f04f 0300 	mov.w	r3, #0
 800428c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004290:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004294:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004298:	ebb2 040a 	subs.w	r4, r2, sl
 800429c:	eb63 050b 	sbc.w	r5, r3, fp
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	00eb      	lsls	r3, r5, #3
 80042aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ae:	00e2      	lsls	r2, r4, #3
 80042b0:	4614      	mov	r4, r2
 80042b2:	461d      	mov	r5, r3
 80042b4:	4643      	mov	r3, r8
 80042b6:	18e3      	adds	r3, r4, r3
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	464b      	mov	r3, r9
 80042bc:	eb45 0303 	adc.w	r3, r5, r3
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ce:	4629      	mov	r1, r5
 80042d0:	028b      	lsls	r3, r1, #10
 80042d2:	4621      	mov	r1, r4
 80042d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042d8:	4621      	mov	r1, r4
 80042da:	028a      	lsls	r2, r1, #10
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042e2:	2200      	movs	r2, #0
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	61fa      	str	r2, [r7, #28]
 80042e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ec:	f7fc fcae 	bl	8000c4c <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4613      	mov	r3, r2
 80042f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x200>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	0c1b      	lsrs	r3, r3, #16
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	3301      	adds	r3, #1
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004308:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800430a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004312:	e002      	b.n	800431a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004314:	4b05      	ldr	r3, [pc, #20]	@ (800432c <HAL_RCC_GetSysClockFreq+0x204>)
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800431a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800431c:	4618      	mov	r0, r3
 800431e:	3750      	adds	r7, #80	@ 0x50
 8004320:	46bd      	mov	sp, r7
 8004322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800
 800432c:	00f42400 	.word	0x00f42400
 8004330:	007a1200 	.word	0x007a1200

08004334 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004358:	2b00      	cmp	r3, #0
 800435a:	d035      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800435c:	4b62      	ldr	r3, [pc, #392]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004362:	f7fd ff5f 	bl	8002224 <HAL_GetTick>
 8004366:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004368:	e008      	b.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800436a:	f7fd ff5b 	bl	8002224 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e0b0      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437c:	4b5b      	ldr	r3, [pc, #364]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f0      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	019a      	lsls	r2, r3, #6
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	071b      	lsls	r3, r3, #28
 8004394:	4955      	ldr	r1, [pc, #340]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800439c:	4b52      	ldr	r3, [pc, #328]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043a2:	f7fd ff3f 	bl	8002224 <HAL_GetTick>
 80043a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a8:	e008      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043aa:	f7fd ff3b 	bl	8002224 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e090      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043bc:	4b4b      	ldr	r3, [pc, #300]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 8083 	beq.w	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	4b44      	ldr	r3, [pc, #272]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	4a43      	ldr	r2, [pc, #268]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80043e6:	4b41      	ldr	r3, [pc, #260]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043f2:	4b3f      	ldr	r3, [pc, #252]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a3e      	ldr	r2, [pc, #248]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043fe:	f7fd ff11 	bl	8002224 <HAL_GetTick>
 8004402:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004406:	f7fd ff0d 	bl	8002224 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e062      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004418:	4b35      	ldr	r3, [pc, #212]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004424:	4b31      	ldr	r3, [pc, #196]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004428:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800442c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02f      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	429a      	cmp	r2, r3
 8004440:	d028      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004442:	4b2a      	ldr	r3, [pc, #168]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800444a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800444c:	4b29      	ldr	r3, [pc, #164]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004452:	4b28      	ldr	r3, [pc, #160]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004458:	4a24      	ldr	r2, [pc, #144]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800445e:	4b23      	ldr	r3, [pc, #140]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d114      	bne.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800446a:	f7fd fedb 	bl	8002224 <HAL_GetTick>
 800446e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004470:	e00a      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004472:	f7fd fed7 	bl	8002224 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004480:	4293      	cmp	r3, r2
 8004482:	d901      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e02a      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004488:	4b18      	ldr	r3, [pc, #96]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0ee      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800449c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044a0:	d10d      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80044a2:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80044b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b6:	490d      	ldr	r1, [pc, #52]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	608b      	str	r3, [r1, #8]
 80044bc:	e005      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044be:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80044c8:	6093      	str	r3, [r2, #8]
 80044ca:	4b08      	ldr	r3, [pc, #32]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d6:	4905      	ldr	r1, [pc, #20]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	42470068 	.word	0x42470068
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40007000 	.word	0x40007000
 80044f4:	42470e40 	.word	0x42470e40

080044f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d13f      	bne.n	8004596 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004516:	4b24      	ldr	r3, [pc, #144]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800451e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d006      	beq.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800452c:	d12f      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800452e:	4b1f      	ldr	r3, [pc, #124]	@ (80045ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004530:	617b      	str	r3, [r7, #20]
          break;
 8004532:	e02f      	b.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004534:	4b1c      	ldr	r3, [pc, #112]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800453c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004540:	d108      	bne.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004542:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800454a:	4a19      	ldr	r2, [pc, #100]	@ (80045b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	e007      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004554:	4b14      	ldr	r3, [pc, #80]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800455c:	4a15      	ldr	r2, [pc, #84]	@ (80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004564:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004578:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800457a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457e:	0f1b      	lsrs	r3, r3, #28
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	617b      	str	r3, [r7, #20]
          break;
 800458c:	e002      	b.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
          break;
 8004592:	bf00      	nop
        }
      }
      break;
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004596:	bf00      	nop
    }
  }
  return frequency;
 8004598:	697b      	ldr	r3, [r7, #20]
}
 800459a:	4618      	mov	r0, r3
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	00bb8000 	.word	0x00bb8000
 80045b0:	007a1200 	.word	0x007a1200
 80045b4:	00f42400 	.word	0x00f42400

080045b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e041      	b.n	800464e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fd fc02 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4619      	mov	r1, r3
 80045f6:	4610      	mov	r0, r2
 80045f8:	f000 fd8e 	bl	8005118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e041      	b.n	80046ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f839 	bl	80046f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	4619      	mov	r1, r3
 8004694:	4610      	mov	r0, r2
 8004696:	f000 fd3f 	bl	8005118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d109      	bne.n	8004734 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e022      	b.n	800477a <HAL_TIM_PWM_Start_DMA+0x72>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b04      	cmp	r3, #4
 8004738:	d109      	bne.n	800474e <HAL_TIM_PWM_Start_DMA+0x46>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e015      	b.n	800477a <HAL_TIM_PWM_Start_DMA+0x72>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d109      	bne.n	8004768 <HAL_TIM_PWM_Start_DMA+0x60>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e008      	b.n	800477a <HAL_TIM_PWM_Start_DMA+0x72>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	bf0c      	ite	eq
 8004774:	2301      	moveq	r3, #1
 8004776:	2300      	movne	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
 8004780:	e171      	b.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d109      	bne.n	800479c <HAL_TIM_PWM_Start_DMA+0x94>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	e022      	b.n	80047e2 <HAL_TIM_PWM_Start_DMA+0xda>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d109      	bne.n	80047b6 <HAL_TIM_PWM_Start_DMA+0xae>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	e015      	b.n	80047e2 <HAL_TIM_PWM_Start_DMA+0xda>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d109      	bne.n	80047d0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e008      	b.n	80047e2 <HAL_TIM_PWM_Start_DMA+0xda>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d024      	beq.n	8004830 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_TIM_PWM_Start_DMA+0xea>
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e137      	b.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start_DMA+0xfe>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004804:	e016      	b.n	8004834 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b04      	cmp	r3, #4
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start_DMA+0x10e>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004814:	e00e      	b.n	8004834 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Start_DMA+0x11e>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004824:	e006      	b.n	8004834 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800482e:	e001      	b.n	8004834 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e118      	b.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b0c      	cmp	r3, #12
 8004838:	f200 80ae 	bhi.w	8004998 <HAL_TIM_PWM_Start_DMA+0x290>
 800483c:	a201      	add	r2, pc, #4	@ (adr r2, 8004844 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004879 	.word	0x08004879
 8004848:	08004999 	.word	0x08004999
 800484c:	08004999 	.word	0x08004999
 8004850:	08004999 	.word	0x08004999
 8004854:	080048c1 	.word	0x080048c1
 8004858:	08004999 	.word	0x08004999
 800485c:	08004999 	.word	0x08004999
 8004860:	08004999 	.word	0x08004999
 8004864:	08004909 	.word	0x08004909
 8004868:	08004999 	.word	0x08004999
 800486c:	08004999 	.word	0x08004999
 8004870:	08004999 	.word	0x08004999
 8004874:	08004951 	.word	0x08004951
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	4a7c      	ldr	r2, [pc, #496]	@ (8004a70 <HAL_TIM_PWM_Start_DMA+0x368>)
 800487e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	4a7b      	ldr	r2, [pc, #492]	@ (8004a74 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	4a7a      	ldr	r2, [pc, #488]	@ (8004a78 <HAL_TIM_PWM_Start_DMA+0x370>)
 800488e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3334      	adds	r3, #52	@ 0x34
 800489c:	461a      	mov	r2, r3
 800489e:	887b      	ldrh	r3, [r7, #2]
 80048a0:	f7fd fea8 	bl	80025f4 <HAL_DMA_Start_IT>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e0db      	b.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048bc:	60da      	str	r2, [r3, #12]
      break;
 80048be:	e06e      	b.n	800499e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	4a6a      	ldr	r2, [pc, #424]	@ (8004a70 <HAL_TIM_PWM_Start_DMA+0x368>)
 80048c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048cc:	4a69      	ldr	r2, [pc, #420]	@ (8004a74 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80048ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	4a68      	ldr	r2, [pc, #416]	@ (8004a78 <HAL_TIM_PWM_Start_DMA+0x370>)
 80048d6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3338      	adds	r3, #56	@ 0x38
 80048e4:	461a      	mov	r2, r3
 80048e6:	887b      	ldrh	r3, [r7, #2]
 80048e8:	f7fd fe84 	bl	80025f4 <HAL_DMA_Start_IT>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e0b7      	b.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004904:	60da      	str	r2, [r3, #12]
      break;
 8004906:	e04a      	b.n	800499e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490c:	4a58      	ldr	r2, [pc, #352]	@ (8004a70 <HAL_TIM_PWM_Start_DMA+0x368>)
 800490e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	4a57      	ldr	r2, [pc, #348]	@ (8004a74 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004916:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491c:	4a56      	ldr	r2, [pc, #344]	@ (8004a78 <HAL_TIM_PWM_Start_DMA+0x370>)
 800491e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	333c      	adds	r3, #60	@ 0x3c
 800492c:	461a      	mov	r2, r3
 800492e:	887b      	ldrh	r3, [r7, #2]
 8004930:	f7fd fe60 	bl	80025f4 <HAL_DMA_Start_IT>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e093      	b.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800494c:	60da      	str	r2, [r3, #12]
      break;
 800494e:	e026      	b.n	800499e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004954:	4a46      	ldr	r2, [pc, #280]	@ (8004a70 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004956:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495c:	4a45      	ldr	r2, [pc, #276]	@ (8004a74 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800495e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004964:	4a44      	ldr	r2, [pc, #272]	@ (8004a78 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004966:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3340      	adds	r3, #64	@ 0x40
 8004974:	461a      	mov	r2, r3
 8004976:	887b      	ldrh	r3, [r7, #2]
 8004978:	f7fd fe3c 	bl	80025f4 <HAL_DMA_Start_IT>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e06f      	b.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004994:	60da      	str	r2, [r3, #12]
      break;
 8004996:	e002      	b.n	800499e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
      break;
 800499c:	bf00      	nop
  }

  if (status == HAL_OK)
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d15f      	bne.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2201      	movs	r2, #1
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fea3 	bl	80056f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a31      	ldr	r2, [pc, #196]	@ (8004a7c <HAL_TIM_PWM_Start_DMA+0x374>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d004      	beq.n	80049c6 <HAL_TIM_PWM_Start_DMA+0x2be>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a2f      	ldr	r2, [pc, #188]	@ (8004a80 <HAL_TIM_PWM_Start_DMA+0x378>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d101      	bne.n	80049ca <HAL_TIM_PWM_Start_DMA+0x2c2>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <HAL_TIM_PWM_Start_DMA+0x2c4>
 80049ca:	2300      	movs	r3, #0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d007      	beq.n	80049e0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a25      	ldr	r2, [pc, #148]	@ (8004a7c <HAL_TIM_PWM_Start_DMA+0x374>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d022      	beq.n	8004a30 <HAL_TIM_PWM_Start_DMA+0x328>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f2:	d01d      	beq.n	8004a30 <HAL_TIM_PWM_Start_DMA+0x328>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a22      	ldr	r2, [pc, #136]	@ (8004a84 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d018      	beq.n	8004a30 <HAL_TIM_PWM_Start_DMA+0x328>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a21      	ldr	r2, [pc, #132]	@ (8004a88 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <HAL_TIM_PWM_Start_DMA+0x328>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8004a8c <HAL_TIM_PWM_Start_DMA+0x384>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00e      	beq.n	8004a30 <HAL_TIM_PWM_Start_DMA+0x328>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1a      	ldr	r2, [pc, #104]	@ (8004a80 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <HAL_TIM_PWM_Start_DMA+0x328>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1b      	ldr	r2, [pc, #108]	@ (8004a90 <HAL_TIM_PWM_Start_DMA+0x388>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_TIM_PWM_Start_DMA+0x328>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a94 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d111      	bne.n	8004a54 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2b06      	cmp	r3, #6
 8004a40:	d010      	beq.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0201 	orr.w	r2, r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a52:	e007      	b.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	08005009 	.word	0x08005009
 8004a74:	080050b1 	.word	0x080050b1
 8004a78:	08004f77 	.word	0x08004f77
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40010400 	.word	0x40010400
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40014000 	.word	0x40014000
 8004a94:	40001800 	.word	0x40001800

08004a98 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	d855      	bhi.n	8004b58 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004aac:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004b59 	.word	0x08004b59
 8004abc:	08004b59 	.word	0x08004b59
 8004ac0:	08004b59 	.word	0x08004b59
 8004ac4:	08004b05 	.word	0x08004b05
 8004ac8:	08004b59 	.word	0x08004b59
 8004acc:	08004b59 	.word	0x08004b59
 8004ad0:	08004b59 	.word	0x08004b59
 8004ad4:	08004b21 	.word	0x08004b21
 8004ad8:	08004b59 	.word	0x08004b59
 8004adc:	08004b59 	.word	0x08004b59
 8004ae0:	08004b59 	.word	0x08004b59
 8004ae4:	08004b3d 	.word	0x08004b3d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004af6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fd fdd1 	bl	80026a4 <HAL_DMA_Abort_IT>
      break;
 8004b02:	e02c      	b.n	8004b5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fd fdc3 	bl	80026a4 <HAL_DMA_Abort_IT>
      break;
 8004b1e:	e01e      	b.n	8004b5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fd fdb5 	bl	80026a4 <HAL_DMA_Abort_IT>
      break;
 8004b3a:	e010      	b.n	8004b5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fd fda7 	bl	80026a4 <HAL_DMA_Abort_IT>
      break;
 8004b56:	e002      	b.n	8004b5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d161      	bne.n	8004c28 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fdc3 	bl	80056f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a2f      	ldr	r2, [pc, #188]	@ (8004c34 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d004      	beq.n	8004b86 <HAL_TIM_PWM_Stop_DMA+0xee>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2d      	ldr	r2, [pc, #180]	@ (8004c38 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_PWM_Stop_DMA+0xf2>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_TIM_PWM_Stop_DMA+0xf4>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d017      	beq.n	8004bc0 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6a1a      	ldr	r2, [r3, #32]
 8004b96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10f      	bne.n	8004bc0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004baa:	4013      	ands	r3, r2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_PWM_Stop_DMA+0x128>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bbe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a1a      	ldr	r2, [r3, #32]
 8004bc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10f      	bne.n	8004bf0 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d107      	bne.n	8004bf0 <HAL_TIM_PWM_Stop_DMA+0x158>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d104      	bne.n	8004c00 <HAL_TIM_PWM_Stop_DMA+0x168>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bfe:	e013      	b.n	8004c28 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d104      	bne.n	8004c10 <HAL_TIM_PWM_Stop_DMA+0x178>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c0e:	e00b      	b.n	8004c28 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d104      	bne.n	8004c20 <HAL_TIM_PWM_Stop_DMA+0x188>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c1e:	e003      	b.n	8004c28 <HAL_TIM_PWM_Stop_DMA+0x190>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40010400 	.word	0x40010400

08004c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e0ae      	b.n	8004db8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b0c      	cmp	r3, #12
 8004c66:	f200 809f 	bhi.w	8004da8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004ca5 	.word	0x08004ca5
 8004c74:	08004da9 	.word	0x08004da9
 8004c78:	08004da9 	.word	0x08004da9
 8004c7c:	08004da9 	.word	0x08004da9
 8004c80:	08004ce5 	.word	0x08004ce5
 8004c84:	08004da9 	.word	0x08004da9
 8004c88:	08004da9 	.word	0x08004da9
 8004c8c:	08004da9 	.word	0x08004da9
 8004c90:	08004d27 	.word	0x08004d27
 8004c94:	08004da9 	.word	0x08004da9
 8004c98:	08004da9 	.word	0x08004da9
 8004c9c:	08004da9 	.word	0x08004da9
 8004ca0:	08004d67 	.word	0x08004d67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fada 	bl	8005264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0208 	orr.w	r2, r2, #8
 8004cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0204 	bic.w	r2, r2, #4
 8004cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6999      	ldr	r1, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	619a      	str	r2, [r3, #24]
      break;
 8004ce2:	e064      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68b9      	ldr	r1, [r7, #8]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fb2a 	bl	8005344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699a      	ldr	r2, [r3, #24]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6999      	ldr	r1, [r3, #24]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	619a      	str	r2, [r3, #24]
      break;
 8004d24:	e043      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fb7f 	bl	8005430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0208 	orr.w	r2, r2, #8
 8004d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0204 	bic.w	r2, r2, #4
 8004d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69d9      	ldr	r1, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	61da      	str	r2, [r3, #28]
      break;
 8004d64:	e023      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68b9      	ldr	r1, [r7, #8]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fbd3 	bl	8005518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69da      	ldr	r2, [r3, #28]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69d9      	ldr	r1, [r3, #28]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	021a      	lsls	r2, r3, #8
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	61da      	str	r2, [r3, #28]
      break;
 8004da6:	e002      	b.n	8004dae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	75fb      	strb	r3, [r7, #23]
      break;
 8004dac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_TIM_ConfigClockSource+0x1c>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e0b4      	b.n	8004f46 <HAL_TIM_ConfigClockSource+0x186>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e14:	d03e      	beq.n	8004e94 <HAL_TIM_ConfigClockSource+0xd4>
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e1a:	f200 8087 	bhi.w	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e22:	f000 8086 	beq.w	8004f32 <HAL_TIM_ConfigClockSource+0x172>
 8004e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2a:	d87f      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e2c:	2b70      	cmp	r3, #112	@ 0x70
 8004e2e:	d01a      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0xa6>
 8004e30:	2b70      	cmp	r3, #112	@ 0x70
 8004e32:	d87b      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e34:	2b60      	cmp	r3, #96	@ 0x60
 8004e36:	d050      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x11a>
 8004e38:	2b60      	cmp	r3, #96	@ 0x60
 8004e3a:	d877      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e3c:	2b50      	cmp	r3, #80	@ 0x50
 8004e3e:	d03c      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0xfa>
 8004e40:	2b50      	cmp	r3, #80	@ 0x50
 8004e42:	d873      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e44:	2b40      	cmp	r3, #64	@ 0x40
 8004e46:	d058      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x13a>
 8004e48:	2b40      	cmp	r3, #64	@ 0x40
 8004e4a:	d86f      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e4c:	2b30      	cmp	r3, #48	@ 0x30
 8004e4e:	d064      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x15a>
 8004e50:	2b30      	cmp	r3, #48	@ 0x30
 8004e52:	d86b      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d060      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x15a>
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d867      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d05c      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x15a>
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d05a      	beq.n	8004f1a <HAL_TIM_ConfigClockSource+0x15a>
 8004e64:	e062      	b.n	8004f2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e76:	f000 fc1f 	bl	80056b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	609a      	str	r2, [r3, #8]
      break;
 8004e92:	e04f      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ea4:	f000 fc08 	bl	80056b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eb6:	609a      	str	r2, [r3, #8]
      break;
 8004eb8:	e03c      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f000 fb7c 	bl	80055c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2150      	movs	r1, #80	@ 0x50
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fbd5 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e02c      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f000 fb9b 	bl	8005622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2160      	movs	r1, #96	@ 0x60
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fbc5 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004ef8:	e01c      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f06:	461a      	mov	r2, r3
 8004f08:	f000 fb5c 	bl	80055c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2140      	movs	r1, #64	@ 0x40
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fbb5 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004f18:	e00c      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4619      	mov	r1, r3
 8004f24:	4610      	mov	r0, r2
 8004f26:	f000 fbac 	bl	8005682 <TIM_ITRx_SetConfig>
      break;
 8004f2a:	e003      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f30:	e000      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f82:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d107      	bne.n	8004f9e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f9c:	e02a      	b.n	8004ff4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d107      	bne.n	8004fb8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2202      	movs	r2, #2
 8004fac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fb6:	e01d      	b.n	8004ff4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d107      	bne.n	8004fd2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd0:	e010      	b.n	8004ff4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d107      	bne.n	8004fec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2208      	movs	r2, #8
 8004fe0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fea:	e003      	b.n	8004ff4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff ffb4 	bl	8004f62 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	771a      	strb	r2, [r3, #28]
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005014:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d10b      	bne.n	8005038 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d136      	bne.n	800509c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005036:	e031      	b.n	800509c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d10b      	bne.n	800505a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2202      	movs	r2, #2
 8005046:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d125      	bne.n	800509c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005058:	e020      	b.n	800509c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d10b      	bne.n	800507c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2204      	movs	r2, #4
 8005068:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d114      	bne.n	800509c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800507a:	e00f      	b.n	800509c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	d10a      	bne.n	800509c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2208      	movs	r2, #8
 800508a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d103      	bne.n	800509c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7fb ffbb 	bl	8001018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d103      	bne.n	80050d0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	771a      	strb	r2, [r3, #28]
 80050ce:	e019      	b.n	8005104 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d103      	bne.n	80050e2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2202      	movs	r2, #2
 80050de:	771a      	strb	r2, [r3, #28]
 80050e0:	e010      	b.n	8005104 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d103      	bne.n	80050f4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2204      	movs	r2, #4
 80050f0:	771a      	strb	r2, [r3, #28]
 80050f2:	e007      	b.n	8005104 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d102      	bne.n	8005104 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2208      	movs	r2, #8
 8005102:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ff22 	bl	8004f4e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	771a      	strb	r2, [r3, #28]
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a43      	ldr	r2, [pc, #268]	@ (8005238 <TIM_Base_SetConfig+0x120>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d013      	beq.n	8005158 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005136:	d00f      	beq.n	8005158 <TIM_Base_SetConfig+0x40>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a40      	ldr	r2, [pc, #256]	@ (800523c <TIM_Base_SetConfig+0x124>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00b      	beq.n	8005158 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a3f      	ldr	r2, [pc, #252]	@ (8005240 <TIM_Base_SetConfig+0x128>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d007      	beq.n	8005158 <TIM_Base_SetConfig+0x40>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a3e      	ldr	r2, [pc, #248]	@ (8005244 <TIM_Base_SetConfig+0x12c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a3d      	ldr	r2, [pc, #244]	@ (8005248 <TIM_Base_SetConfig+0x130>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d108      	bne.n	800516a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a32      	ldr	r2, [pc, #200]	@ (8005238 <TIM_Base_SetConfig+0x120>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d02b      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005178:	d027      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2f      	ldr	r2, [pc, #188]	@ (800523c <TIM_Base_SetConfig+0x124>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d023      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a2e      	ldr	r2, [pc, #184]	@ (8005240 <TIM_Base_SetConfig+0x128>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d01f      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2d      	ldr	r2, [pc, #180]	@ (8005244 <TIM_Base_SetConfig+0x12c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01b      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2c      	ldr	r2, [pc, #176]	@ (8005248 <TIM_Base_SetConfig+0x130>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d017      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a2b      	ldr	r2, [pc, #172]	@ (800524c <TIM_Base_SetConfig+0x134>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005250 <TIM_Base_SetConfig+0x138>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00f      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a29      	ldr	r2, [pc, #164]	@ (8005254 <TIM_Base_SetConfig+0x13c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00b      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a28      	ldr	r2, [pc, #160]	@ (8005258 <TIM_Base_SetConfig+0x140>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a27      	ldr	r2, [pc, #156]	@ (800525c <TIM_Base_SetConfig+0x144>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d003      	beq.n	80051ca <TIM_Base_SetConfig+0xb2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a26      	ldr	r2, [pc, #152]	@ (8005260 <TIM_Base_SetConfig+0x148>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d108      	bne.n	80051dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a0e      	ldr	r2, [pc, #56]	@ (8005238 <TIM_Base_SetConfig+0x120>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_Base_SetConfig+0xf2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a10      	ldr	r2, [pc, #64]	@ (8005248 <TIM_Base_SetConfig+0x130>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d103      	bne.n	8005212 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f043 0204 	orr.w	r2, r3, #4
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	601a      	str	r2, [r3, #0]
}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40010400 	.word	0x40010400
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400
 8005254:	40014800 	.word	0x40014800
 8005258:	40001800 	.word	0x40001800
 800525c:	40001c00 	.word	0x40001c00
 8005260:	40002000 	.word	0x40002000

08005264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f023 0201 	bic.w	r2, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f023 0302 	bic.w	r3, r3, #2
 80052ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a20      	ldr	r2, [pc, #128]	@ (800533c <TIM_OC1_SetConfig+0xd8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_OC1_SetConfig+0x64>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005340 <TIM_OC1_SetConfig+0xdc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d10c      	bne.n	80052e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0308 	bic.w	r3, r3, #8
 80052ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 0304 	bic.w	r3, r3, #4
 80052e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a15      	ldr	r2, [pc, #84]	@ (800533c <TIM_OC1_SetConfig+0xd8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d003      	beq.n	80052f2 <TIM_OC1_SetConfig+0x8e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a14      	ldr	r2, [pc, #80]	@ (8005340 <TIM_OC1_SetConfig+0xdc>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d111      	bne.n	8005316 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	621a      	str	r2, [r3, #32]
}
 8005330:	bf00      	nop
 8005332:	371c      	adds	r7, #28
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	40010000 	.word	0x40010000
 8005340:	40010400 	.word	0x40010400

08005344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f023 0210 	bic.w	r2, r3, #16
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800537a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f023 0320 	bic.w	r3, r3, #32
 800538e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a22      	ldr	r2, [pc, #136]	@ (8005428 <TIM_OC2_SetConfig+0xe4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_OC2_SetConfig+0x68>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a21      	ldr	r2, [pc, #132]	@ (800542c <TIM_OC2_SetConfig+0xe8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d10d      	bne.n	80053c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a17      	ldr	r2, [pc, #92]	@ (8005428 <TIM_OC2_SetConfig+0xe4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_OC2_SetConfig+0x94>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a16      	ldr	r2, [pc, #88]	@ (800542c <TIM_OC2_SetConfig+0xe8>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d113      	bne.n	8005400 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	bf00      	nop
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40010000 	.word	0x40010000
 800542c:	40010400 	.word	0x40010400

08005430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800545e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4313      	orrs	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	4313      	orrs	r3, r2
 8005484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a21      	ldr	r2, [pc, #132]	@ (8005510 <TIM_OC3_SetConfig+0xe0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_OC3_SetConfig+0x66>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a20      	ldr	r2, [pc, #128]	@ (8005514 <TIM_OC3_SetConfig+0xe4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d10d      	bne.n	80054b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800549c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	021b      	lsls	r3, r3, #8
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a16      	ldr	r2, [pc, #88]	@ (8005510 <TIM_OC3_SetConfig+0xe0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d003      	beq.n	80054c2 <TIM_OC3_SetConfig+0x92>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a15      	ldr	r2, [pc, #84]	@ (8005514 <TIM_OC3_SetConfig+0xe4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d113      	bne.n	80054ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	40010000 	.word	0x40010000
 8005514:	40010400 	.word	0x40010400

08005518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	031b      	lsls	r3, r3, #12
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4313      	orrs	r3, r2
 800556e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a12      	ldr	r2, [pc, #72]	@ (80055bc <TIM_OC4_SetConfig+0xa4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d003      	beq.n	8005580 <TIM_OC4_SetConfig+0x68>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a11      	ldr	r2, [pc, #68]	@ (80055c0 <TIM_OC4_SetConfig+0xa8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d109      	bne.n	8005594 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	019b      	lsls	r3, r3, #6
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010400 	.word	0x40010400

080055c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f023 0201 	bic.w	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 030a 	bic.w	r3, r3, #10
 8005600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	621a      	str	r2, [r3, #32]
}
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005622:	b480      	push	{r7}
 8005624:	b087      	sub	sp, #28
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f023 0210 	bic.w	r2, r3, #16
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800564c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	031b      	lsls	r3, r3, #12
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800565e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	f043 0307 	orr.w	r3, r3, #7
 80056a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b087      	sub	sp, #28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	021a      	lsls	r2, r3, #8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	431a      	orrs	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4313      	orrs	r3, r2
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 031f 	and.w	r3, r3, #31
 800570a:	2201      	movs	r2, #1
 800570c:	fa02 f303 	lsl.w	r3, r2, r3
 8005710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1a      	ldr	r2, [r3, #32]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	43db      	mvns	r3, r3
 800571a:	401a      	ands	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1a      	ldr	r2, [r3, #32]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 031f 	and.w	r3, r3, #31
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	fa01 f303 	lsl.w	r3, r1, r3
 8005730:	431a      	orrs	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005758:	2302      	movs	r3, #2
 800575a:	e05a      	b.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a21      	ldr	r2, [pc, #132]	@ (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a8:	d01d      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1d      	ldr	r2, [pc, #116]	@ (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1a      	ldr	r2, [pc, #104]	@ (800582c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a18      	ldr	r2, [pc, #96]	@ (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a17      	ldr	r2, [pc, #92]	@ (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a15      	ldr	r2, [pc, #84]	@ (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10c      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40010400 	.word	0x40010400
 8005834:	40014000 	.word	0x40014000
 8005838:	40001800 	.word	0x40001800

0800583c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005854:	2302      	movs	r3, #2
 8005856:	e03d      	b.n	80058d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3714      	adds	r7, #20
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 80058e4:	4b10      	ldr	r3, [pc, #64]	@ (8005928 <MX_PDM2PCM_Init+0x48>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 80058ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005928 <MX_PDM2PCM_Init+0x48>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 80058f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005928 <MX_PDM2PCM_Init+0x48>)
 80058f2:	4a0e      	ldr	r2, [pc, #56]	@ (800592c <MX_PDM2PCM_Init+0x4c>)
 80058f4:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 80058f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005928 <MX_PDM2PCM_Init+0x48>)
 80058f8:	2201      	movs	r2, #1
 80058fa:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 80058fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005928 <MX_PDM2PCM_Init+0x48>)
 80058fe:	2201      	movs	r2, #1
 8005900:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8005902:	4809      	ldr	r0, [pc, #36]	@ (8005928 <MX_PDM2PCM_Init+0x48>)
 8005904:	f001 fd38 	bl	8007378 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8005908:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <MX_PDM2PCM_Init+0x50>)
 800590a:	2202      	movs	r2, #2
 800590c:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800590e:	4b08      	ldr	r3, [pc, #32]	@ (8005930 <MX_PDM2PCM_Init+0x50>)
 8005910:	2210      	movs	r2, #16
 8005912:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8005914:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <MX_PDM2PCM_Init+0x50>)
 8005916:	2200      	movs	r2, #0
 8005918:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800591a:	4905      	ldr	r1, [pc, #20]	@ (8005930 <MX_PDM2PCM_Init+0x50>)
 800591c:	4802      	ldr	r0, [pc, #8]	@ (8005928 <MX_PDM2PCM_Init+0x48>)
 800591e:	f001 fdfb 	bl	8007518 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8005922:	bf00      	nop
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20001634 	.word	0x20001634
 800592c:	7d70a3d6 	.word	0x7d70a3d6
 8005930:	20001680 	.word	0x20001680

08005934 <MX_PDM2PCM_Process>:

/* USER CODE BEGIN 4 */

/*  process function */
uint8_t MX_PDM2PCM_Process(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
    PCMBuf : Pointer to PCM buffer data
  Return values:
    AUDIO_OK in case of success, AUDIO_ERROR otherwise
  */
  /* this example return the default status AUDIO_ERROR */
	PDM_Filter((uint8_t *)PDMBuf, PCMBuf, &PDM1_filter_handler);
 800593e:	4a05      	ldr	r2, [pc, #20]	@ (8005954 <MX_PDM2PCM_Process+0x20>)
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 feee 	bl	8007724 <PDM_Filter>
	return 0; // AUDIO_OK
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20001634 	.word	0x20001634

08005958 <D16_GENERIC>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 8005960:	b089      	sub	sp, #36	@ 0x24
 8005962:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8005964:	6993      	ldr	r3, [r2, #24]
 8005966:	9406      	str	r4, [sp, #24]
 8005968:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800596a:	9307      	str	r3, [sp, #28]
 800596c:	9402      	str	r4, [sp, #8]
 800596e:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 8005972:	69d3      	ldr	r3, [r2, #28]
 8005974:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8005976:	9103      	str	r1, [sp, #12]
 8005978:	2d00      	cmp	r5, #0
 800597a:	d066      	beq.n	8005a4a <D16_GENERIC+0xf2>
 800597c:	f004 0520 	and.w	r5, r4, #32
 8005980:	f004 0410 	and.w	r4, r4, #16
 8005984:	9505      	str	r5, [sp, #20]
 8005986:	4937      	ldr	r1, [pc, #220]	@ (8005a64 <D16_GENERIC+0x10c>)
 8005988:	9404      	str	r4, [sp, #16]
 800598a:	f04f 0c00 	mov.w	ip, #0
 800598e:	4635      	mov	r5, r6
 8005990:	e04f      	b.n	8005a32 <D16_GENERIC+0xda>
 8005992:	5d87      	ldrb	r7, [r0, r6]
 8005994:	7804      	ldrb	r4, [r0, #0]
 8005996:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800599a:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800599e:	b2e6      	uxtb	r6, r4
 80059a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80059a4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80059a8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80059ac:	4433      	add	r3, r6
 80059ae:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80059b2:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80059b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ba:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80059be:	0aa3      	lsrs	r3, r4, #10
 80059c0:	4c29      	ldr	r4, [pc, #164]	@ (8005a68 <D16_GENERIC+0x110>)
 80059c2:	fb26 5404 	smlad	r4, r6, r4, r5
 80059c6:	4d29      	ldr	r5, [pc, #164]	@ (8005a6c <D16_GENERIC+0x114>)
 80059c8:	fb26 f505 	smuad	r5, r6, r5
 80059cc:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 80059d0:	eb04 080a 	add.w	r8, r4, sl
 80059d4:	eba8 080b 	sub.w	r8, r8, fp
 80059d8:	4646      	mov	r6, r8
 80059da:	17f7      	asrs	r7, r6, #31
 80059dc:	e9cd 6700 	strd	r6, r7, [sp]
 80059e0:	9e04      	ldr	r6, [sp, #16]
 80059e2:	f10c 0e01 	add.w	lr, ip, #1
 80059e6:	b16e      	cbz	r6, 8005a04 <D16_GENERIC+0xac>
 80059e8:	6a16      	ldr	r6, [r2, #32]
 80059ea:	9f01      	ldr	r7, [sp, #4]
 80059ec:	fba8 ab06 	umull	sl, fp, r8, r6
 80059f0:	fb06 bb07 	mla	fp, r6, r7, fp
 80059f4:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 80059f8:	f14b 0900 	adc.w	r9, fp, #0
 80059fc:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8005a00:	46a3      	mov	fp, r4
 8005a02:	4654      	mov	r4, sl
 8005a04:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8005a06:	9f02      	ldr	r7, [sp, #8]
 8005a08:	0424      	lsls	r4, r4, #16
 8005a0a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8005a0e:	f04f 0900 	mov.w	r9, #0
 8005a12:	fb0c fc06 	mul.w	ip, ip, r6
 8005a16:	fbc7 8904 	smlal	r8, r9, r7, r4
 8005a1a:	9e03      	ldr	r6, [sp, #12]
 8005a1c:	464f      	mov	r7, r9
 8005a1e:	10bc      	asrs	r4, r7, #2
 8005a20:	f304 040f 	ssat	r4, #16, r4
 8005a24:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 8005a28:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8005a2a:	fa1f fc8e 	uxth.w	ip, lr
 8005a2e:	4564      	cmp	r4, ip
 8005a30:	d90a      	bls.n	8005a48 <D16_GENERIC+0xf0>
 8005a32:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8005a34:	2c01      	cmp	r4, #1
 8005a36:	b2e6      	uxtb	r6, r4
 8005a38:	d1ab      	bne.n	8005992 <D16_GENERIC+0x3a>
 8005a3a:	9e05      	ldr	r6, [sp, #20]
 8005a3c:	f850 4b02 	ldr.w	r4, [r0], #2
 8005a40:	2e00      	cmp	r6, #0
 8005a42:	d0ac      	beq.n	800599e <D16_GENERIC+0x46>
 8005a44:	ba64      	rev16	r4, r4
 8005a46:	e7aa      	b.n	800599e <D16_GENERIC+0x46>
 8005a48:	462e      	mov	r6, r5
 8005a4a:	9906      	ldr	r1, [sp, #24]
 8005a4c:	61d3      	str	r3, [r2, #28]
 8005a4e:	9b07      	ldr	r3, [sp, #28]
 8005a50:	6096      	str	r6, [r2, #8]
 8005a52:	2000      	movs	r0, #0
 8005a54:	60d1      	str	r1, [r2, #12]
 8005a56:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 8005a5a:	6193      	str	r3, [r2, #24]
 8005a5c:	b009      	add	sp, #36	@ 0x24
 8005a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a62:	bf00      	nop
 8005a64:	2000000c 	.word	0x2000000c
 8005a68:	00030001 	.word	0x00030001
 8005a6c:	00010003 	.word	0x00010003

08005a70 <D24_GENERIC>:
 8005a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a74:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8005a76:	6993      	ldr	r3, [r2, #24]
 8005a78:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8005a7a:	b089      	sub	sp, #36	@ 0x24
 8005a7c:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8005a80:	9307      	str	r3, [sp, #28]
 8005a82:	9503      	str	r5, [sp, #12]
 8005a84:	69d3      	ldr	r3, [r2, #28]
 8005a86:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8005a88:	9104      	str	r1, [sp, #16]
 8005a8a:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 8005a8e:	2e00      	cmp	r6, #0
 8005a90:	f000 808f 	beq.w	8005bb2 <D24_GENERIC+0x142>
 8005a94:	f005 0620 	and.w	r6, r5, #32
 8005a98:	f005 0510 	and.w	r5, r5, #16
 8005a9c:	4953      	ldr	r1, [pc, #332]	@ (8005bec <D24_GENERIC+0x17c>)
 8005a9e:	9606      	str	r6, [sp, #24]
 8005aa0:	9505      	str	r5, [sp, #20]
 8005aa2:	f04f 0c00 	mov.w	ip, #0
 8005aa6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005aaa:	e068      	b.n	8005b7e <D24_GENERIC+0x10e>
 8005aac:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8005ab0:	f810 8007 	ldrb.w	r8, [r0, r7]
 8005ab4:	042d      	lsls	r5, r5, #16
 8005ab6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8005aba:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8005abe:	44ae      	add	lr, r5
 8005ac0:	4438      	add	r0, r7
 8005ac2:	fa5f f68e 	uxtb.w	r6, lr
 8005ac6:	f3ce 2507 	ubfx	r5, lr, #8, #8
 8005aca:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005ace:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8005ad2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8005ad6:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8005ada:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005ade:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 8005ae2:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8005ae6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005aea:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8005aee:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8005af2:	4d3f      	ldr	r5, [pc, #252]	@ (8005bf0 <D24_GENERIC+0x180>)
 8005af4:	fb26 b705 	smlad	r7, r6, r5, fp
 8005af8:	4d3e      	ldr	r5, [pc, #248]	@ (8005bf4 <D24_GENERIC+0x184>)
 8005afa:	fb26 4b05 	smlad	fp, r6, r5, r4
 8005afe:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8005b02:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8005b06:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8005b0a:	2401      	movs	r4, #1
 8005b0c:	fb26 f604 	smuad	r6, r6, r4
 8005b10:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8005b14:	9f02      	ldr	r7, [sp, #8]
 8005b16:	eb0c 0e04 	add.w	lr, ip, r4
 8005b1a:	eb08 0406 	add.w	r4, r8, r6
 8005b1e:	eb05 060a 	add.w	r6, r5, sl
 8005b22:	1bf6      	subs	r6, r6, r7
 8005b24:	4637      	mov	r7, r6
 8005b26:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8005b2a:	e9cd 7800 	strd	r7, r8, [sp]
 8005b2e:	9f05      	ldr	r7, [sp, #20]
 8005b30:	b177      	cbz	r7, 8005b50 <D24_GENERIC+0xe0>
 8005b32:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8005b36:	9502      	str	r5, [sp, #8]
 8005b38:	fba6 9a08 	umull	r9, sl, r6, r8
 8005b3c:	9e01      	ldr	r6, [sp, #4]
 8005b3e:	fb08 aa06 	mla	sl, r8, r6, sl
 8005b42:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8005b46:	f14a 0700 	adc.w	r7, sl, #0
 8005b4a:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8005b4e:	4655      	mov	r5, sl
 8005b50:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8005b52:	9f03      	ldr	r7, [sp, #12]
 8005b54:	03ad      	lsls	r5, r5, #14
 8005b56:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8005b5a:	f04f 0900 	mov.w	r9, #0
 8005b5e:	fb0c fc06 	mul.w	ip, ip, r6
 8005b62:	fbc7 8905 	smlal	r8, r9, r7, r5
 8005b66:	9e04      	ldr	r6, [sp, #16]
 8005b68:	464f      	mov	r7, r9
 8005b6a:	10bd      	asrs	r5, r7, #2
 8005b6c:	f305 050f 	ssat	r5, #16, r5
 8005b70:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 8005b74:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8005b76:	fa1f fc8e 	uxth.w	ip, lr
 8005b7a:	4565      	cmp	r5, ip
 8005b7c:	d917      	bls.n	8005bae <D24_GENERIC+0x13e>
 8005b7e:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8005b80:	f890 e000 	ldrb.w	lr, [r0]
 8005b84:	b2ef      	uxtb	r7, r5
 8005b86:	2d01      	cmp	r5, #1
 8005b88:	b23e      	sxth	r6, r7
 8005b8a:	d18f      	bne.n	8005aac <D24_GENERIC+0x3c>
 8005b8c:	9d06      	ldr	r5, [sp, #24]
 8005b8e:	b1dd      	cbz	r5, 8005bc8 <D24_GENERIC+0x158>
 8005b90:	78c5      	ldrb	r5, [r0, #3]
 8005b92:	ea4f 280e 	mov.w	r8, lr, lsl #8
 8005b96:	f01c 0f01 	tst.w	ip, #1
 8005b9a:	ea4f 2605 	mov.w	r6, r5, lsl #8
 8005b9e:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8005ba2:	d11b      	bne.n	8005bdc <D24_GENERIC+0x16c>
 8005ba4:	f890 e001 	ldrb.w	lr, [r0, #1]
 8005ba8:	3002      	adds	r0, #2
 8005baa:	44c6      	add	lr, r8
 8005bac:	e789      	b.n	8005ac2 <D24_GENERIC+0x52>
 8005bae:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005bb2:	61d3      	str	r3, [r2, #28]
 8005bb4:	9b07      	ldr	r3, [sp, #28]
 8005bb6:	6193      	str	r3, [r2, #24]
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 8005bbe:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8005bc2:	b009      	add	sp, #36	@ 0x24
 8005bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc8:	f890 8001 	ldrb.w	r8, [r0, #1]
 8005bcc:	7885      	ldrb	r5, [r0, #2]
 8005bce:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8005bd2:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8005bd6:	44c6      	add	lr, r8
 8005bd8:	3003      	adds	r0, #3
 8005bda:	e772      	b.n	8005ac2 <D24_GENERIC+0x52>
 8005bdc:	f890 8002 	ldrb.w	r8, [r0, #2]
 8005be0:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 8005be4:	44c6      	add	lr, r8
 8005be6:	3004      	adds	r0, #4
 8005be8:	e76b      	b.n	8005ac2 <D24_GENERIC+0x52>
 8005bea:	bf00      	nop
 8005bec:	2000000c 	.word	0x2000000c
 8005bf0:	00030001 	.word	0x00030001
 8005bf4:	00060007 	.word	0x00060007

08005bf8 <D32_GENERIC>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8005bfe:	6993      	ldr	r3, [r2, #24]
 8005c00:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8005c02:	69d6      	ldr	r6, [r2, #28]
 8005c04:	b089      	sub	sp, #36	@ 0x24
 8005c06:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8005c0a:	9307      	str	r3, [sp, #28]
 8005c0c:	9403      	str	r4, [sp, #12]
 8005c0e:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 8005c12:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8005c14:	9104      	str	r1, [sp, #16]
 8005c16:	2d00      	cmp	r5, #0
 8005c18:	f000 809a 	beq.w	8005d50 <D32_GENERIC+0x158>
 8005c1c:	f004 0520 	and.w	r5, r4, #32
 8005c20:	f004 0410 	and.w	r4, r4, #16
 8005c24:	9506      	str	r5, [sp, #24]
 8005c26:	4951      	ldr	r1, [pc, #324]	@ (8005d6c <D32_GENERIC+0x174>)
 8005c28:	9405      	str	r4, [sp, #20]
 8005c2a:	f04f 0e00 	mov.w	lr, #0
 8005c2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c32:	461d      	mov	r5, r3
 8005c34:	4617      	mov	r7, r2
 8005c36:	e077      	b.n	8005d28 <D32_GENERIC+0x130>
 8005c38:	7823      	ldrb	r3, [r4, #0]
 8005c3a:	f810 800c 	ldrb.w	r8, [r0, ip]
 8005c3e:	f810 c002 	ldrb.w	ip, [r0, r2]
 8005c42:	7800      	ldrb	r0, [r0, #0]
 8005c44:	041b      	lsls	r3, r3, #16
 8005c46:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005c4a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8005c4e:	4403      	add	r3, r0
 8005c50:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8005c54:	b2dc      	uxtb	r4, r3
 8005c56:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005c5a:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8005c5e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8005c62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c66:	0e1b      	lsrs	r3, r3, #24
 8005c68:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8005c6c:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8005c70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005c74:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8005c78:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 8005c7c:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 8005c80:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8005c84:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005c88:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005c8c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005c90:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8005c94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005c98:	4b35      	ldr	r3, [pc, #212]	@ (8005d70 <D32_GENERIC+0x178>)
 8005c9a:	fb22 b403 	smlad	r4, r2, r3, fp
 8005c9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ca2:	fb2c 4803 	smlad	r8, ip, r3, r4
 8005ca6:	4b33      	ldr	r3, [pc, #204]	@ (8005d74 <D32_GENERIC+0x17c>)
 8005ca8:	fb22 5503 	smlad	r5, r2, r3, r5
 8005cac:	4b32      	ldr	r3, [pc, #200]	@ (8005d78 <D32_GENERIC+0x180>)
 8005cae:	fb2c 5b03 	smlad	fp, ip, r3, r5
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	fb22 f203 	smuad	r2, r2, r3
 8005cb8:	4b30      	ldr	r3, [pc, #192]	@ (8005d7c <D32_GENERIC+0x184>)
 8005cba:	fb2c 2503 	smlad	r5, ip, r3, r2
 8005cbe:	9b02      	ldr	r3, [sp, #8]
 8005cc0:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 8005cc4:	eb04 080a 	add.w	r8, r4, sl
 8005cc8:	eba8 0803 	sub.w	r8, r8, r3
 8005ccc:	4642      	mov	r2, r8
 8005cce:	17d3      	asrs	r3, r2, #31
 8005cd0:	e9cd 2300 	strd	r2, r3, [sp]
 8005cd4:	9b05      	ldr	r3, [sp, #20]
 8005cd6:	f10e 0c01 	add.w	ip, lr, #1
 8005cda:	b173      	cbz	r3, 8005cfa <D32_GENERIC+0x102>
 8005cdc:	6a3a      	ldr	r2, [r7, #32]
 8005cde:	9b01      	ldr	r3, [sp, #4]
 8005ce0:	9402      	str	r4, [sp, #8]
 8005ce2:	fba8 8902 	umull	r8, r9, r8, r2
 8005ce6:	469a      	mov	sl, r3
 8005ce8:	fb02 930a 	mla	r3, r2, sl, r9
 8005cec:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8005cf0:	f143 0900 	adc.w	r9, r3, #0
 8005cf4:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8005cf8:	4654      	mov	r4, sl
 8005cfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005cfc:	9a04      	ldr	r2, [sp, #16]
 8005cfe:	fb0e fe03 	mul.w	lr, lr, r3
 8005d02:	9b03      	ldr	r3, [sp, #12]
 8005d04:	0364      	lsls	r4, r4, #13
 8005d06:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8005d0a:	f04f 0900 	mov.w	r9, #0
 8005d0e:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005d12:	464b      	mov	r3, r9
 8005d14:	109b      	asrs	r3, r3, #2
 8005d16:	f303 030f 	ssat	r3, #16, r3
 8005d1a:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 8005d1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d20:	fa1f fe8c 	uxth.w	lr, ip
 8005d24:	4573      	cmp	r3, lr
 8005d26:	d90f      	bls.n	8005d48 <D32_GENERIC+0x150>
 8005d28:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8005d32:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8005d36:	f47f af7f 	bne.w	8005c38 <D32_GENERIC+0x40>
 8005d3a:	1d02      	adds	r2, r0, #4
 8005d3c:	6803      	ldr	r3, [r0, #0]
 8005d3e:	9806      	ldr	r0, [sp, #24]
 8005d40:	b188      	cbz	r0, 8005d66 <D32_GENERIC+0x16e>
 8005d42:	ba5b      	rev16	r3, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	e785      	b.n	8005c54 <D32_GENERIC+0x5c>
 8005d48:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005d4c:	462b      	mov	r3, r5
 8005d4e:	463a      	mov	r2, r7
 8005d50:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 8005d54:	9b07      	ldr	r3, [sp, #28]
 8005d56:	61d6      	str	r6, [r2, #28]
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8005d5e:	6193      	str	r3, [r2, #24]
 8005d60:	b009      	add	sp, #36	@ 0x24
 8005d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d66:	4610      	mov	r0, r2
 8005d68:	e774      	b.n	8005c54 <D32_GENERIC+0x5c>
 8005d6a:	bf00      	nop
 8005d6c:	2000000c 	.word	0x2000000c
 8005d70:	00060003 	.word	0x00060003
 8005d74:	000a000c 	.word	0x000a000c
 8005d78:	000c000a 	.word	0x000c000a
 8005d7c:	00030006 	.word	0x00030006

08005d80 <D48_GENERIC>:
 8005d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 8005d88:	b08b      	sub	sp, #44	@ 0x2c
 8005d8a:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	6993      	ldr	r3, [r2, #24]
 8005d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d92:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8005d96:	9401      	str	r4, [sp, #4]
 8005d98:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8005d9a:	9405      	str	r4, [sp, #20]
 8005d9c:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8005da0:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8005da2:	9106      	str	r1, [sp, #24]
 8005da4:	2d00      	cmp	r5, #0
 8005da6:	f000 80c2 	beq.w	8005f2e <D48_GENERIC+0x1ae>
 8005daa:	f004 0520 	and.w	r5, r4, #32
 8005dae:	f04f 0900 	mov.w	r9, #0
 8005db2:	f004 0410 	and.w	r4, r4, #16
 8005db6:	9508      	str	r5, [sp, #32]
 8005db8:	4964      	ldr	r1, [pc, #400]	@ (8005f4c <D48_GENERIC+0x1cc>)
 8005dba:	9407      	str	r4, [sp, #28]
 8005dbc:	464d      	mov	r5, r9
 8005dbe:	e09e      	b.n	8005efe <D48_GENERIC+0x17e>
 8005dc0:	f81b 4007 	ldrb.w	r4, [fp, r7]
 8005dc4:	f810 b008 	ldrb.w	fp, [r0, r8]
 8005dc8:	f819 8008 	ldrb.w	r8, [r9, r8]
 8005dcc:	f810 9006 	ldrb.w	r9, [r0, r6]
 8005dd0:	7800      	ldrb	r0, [r0, #0]
 8005dd2:	0424      	lsls	r4, r4, #16
 8005dd4:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8005dd8:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8005ddc:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8005de0:	44be      	add	lr, r7
 8005de2:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 8005de6:	eb0b 0700 	add.w	r7, fp, r0
 8005dea:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 8005dee:	fa5f fe87 	uxtb.w	lr, r7
 8005df2:	f3c7 2607 	ubfx	r6, r7, #8, #8
 8005df6:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8005dfa:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005dfe:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8005e02:	0e3f      	lsrs	r7, r7, #24
 8005e04:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 8005e08:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 8005e0c:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8005e10:	b2e7      	uxtb	r7, r4
 8005e12:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8005e16:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005e1a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8005e1e:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8005e22:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 8005e26:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 8005e2a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8005e2e:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8005e32:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005e36:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005e3a:	f3cc 0809 	ubfx	r8, ip, #0, #10
 8005e3e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005e42:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005e46:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005e4a:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8005e4e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8005e52:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8005e56:	4c3e      	ldr	r4, [pc, #248]	@ (8005f50 <D48_GENERIC+0x1d0>)
 8005e58:	9e01      	ldr	r6, [sp, #4]
 8005e5a:	fb29 6404 	smlad	r4, r9, r4, r6
 8005e5e:	4e3d      	ldr	r6, [pc, #244]	@ (8005f54 <D48_GENERIC+0x1d4>)
 8005e60:	fb2e 4406 	smlad	r4, lr, r6, r4
 8005e64:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8005e68:	fb27 4b06 	smlad	fp, r7, r6, r4
 8005e6c:	4c3a      	ldr	r4, [pc, #232]	@ (8005f58 <D48_GENERIC+0x1d8>)
 8005e6e:	fb29 3304 	smlad	r3, r9, r4, r3
 8005e72:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 8005e76:	fb2e 3304 	smlad	r3, lr, r4, r3
 8005e7a:	4c38      	ldr	r4, [pc, #224]	@ (8005f5c <D48_GENERIC+0x1dc>)
 8005e7c:	fb27 3304 	smlad	r3, r7, r4, r3
 8005e80:	2601      	movs	r6, #1
 8005e82:	9301      	str	r3, [sp, #4]
 8005e84:	fb29 f906 	smuad	r9, r9, r6
 8005e88:	4b35      	ldr	r3, [pc, #212]	@ (8005f60 <D48_GENERIC+0x1e0>)
 8005e8a:	fb2e 9e03 	smlad	lr, lr, r3, r9
 8005e8e:	4b35      	ldr	r3, [pc, #212]	@ (8005f64 <D48_GENERIC+0x1e4>)
 8005e90:	fb27 e303 	smlad	r3, r7, r3, lr
 8005e94:	9f04      	ldr	r7, [sp, #16]
 8005e96:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 8005e9a:	eb05 0e06 	add.w	lr, r5, r6
 8005e9e:	eb04 060a 	add.w	r6, r4, sl
 8005ea2:	1bf6      	subs	r6, r6, r7
 8005ea4:	4637      	mov	r7, r6
 8005ea6:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8005eaa:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8005eae:	9f07      	ldr	r7, [sp, #28]
 8005eb0:	b177      	cbz	r7, 8005ed0 <D48_GENERIC+0x150>
 8005eb2:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8005eb6:	9404      	str	r4, [sp, #16]
 8005eb8:	fba6 9a08 	umull	r9, sl, r6, r8
 8005ebc:	9e03      	ldr	r6, [sp, #12]
 8005ebe:	fb08 aa06 	mla	sl, r8, r6, sl
 8005ec2:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8005ec6:	f14a 0700 	adc.w	r7, sl, #0
 8005eca:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8005ece:	4654      	mov	r4, sl
 8005ed0:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8005ed2:	fb05 f606 	mul.w	r6, r5, r6
 8005ed6:	9d05      	ldr	r5, [sp, #20]
 8005ed8:	02e4      	lsls	r4, r4, #11
 8005eda:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8005ede:	f04f 0800 	mov.w	r8, #0
 8005ee2:	fbc5 7804 	smlal	r7, r8, r5, r4
 8005ee6:	4645      	mov	r5, r8
 8005ee8:	10ac      	asrs	r4, r5, #2
 8005eea:	9d06      	ldr	r5, [sp, #24]
 8005eec:	f304 040f 	ssat	r4, #16, r4
 8005ef0:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8005ef4:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8005ef6:	fa1f f58e 	uxth.w	r5, lr
 8005efa:	42ac      	cmp	r4, r5
 8005efc:	d917      	bls.n	8005f2e <D48_GENERIC+0x1ae>
 8005efe:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8005f00:	b2e6      	uxtb	r6, r4
 8005f02:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8005f06:	4277      	negs	r7, r6
 8005f08:	eb00 0b08 	add.w	fp, r0, r8
 8005f0c:	eb0b 0907 	add.w	r9, fp, r7
 8005f10:	2c01      	cmp	r4, #1
 8005f12:	eb09 0e08 	add.w	lr, r9, r8
 8005f16:	f47f af53 	bne.w	8005dc0 <D48_GENERIC+0x40>
 8005f1a:	9e08      	ldr	r6, [sp, #32]
 8005f1c:	e9d0 7400 	ldrd	r7, r4, [r0]
 8005f20:	3006      	adds	r0, #6
 8005f22:	2e00      	cmp	r6, #0
 8005f24:	f43f af63 	beq.w	8005dee <D48_GENERIC+0x6e>
 8005f28:	ba7f      	rev16	r7, r7
 8005f2a:	ba64      	rev16	r4, r4
 8005f2c:	e75f      	b.n	8005dee <D48_GENERIC+0x6e>
 8005f2e:	6093      	str	r3, [r2, #8]
 8005f30:	9b01      	ldr	r3, [sp, #4]
 8005f32:	60d3      	str	r3, [r2, #12]
 8005f34:	9b04      	ldr	r3, [sp, #16]
 8005f36:	6153      	str	r3, [r2, #20]
 8005f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f3a:	f8c2 c01c 	str.w	ip, [r2, #28]
 8005f3e:	2000      	movs	r0, #0
 8005f40:	f8c2 a010 	str.w	sl, [r2, #16]
 8005f44:	6193      	str	r3, [r2, #24]
 8005f46:	b00b      	add	sp, #44	@ 0x2c
 8005f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4c:	2000000c 	.word	0x2000000c
 8005f50:	000f000a 	.word	0x000f000a
 8005f54:	00060003 	.word	0x00060003
 8005f58:	00150019 	.word	0x00150019
 8005f5c:	00190015 	.word	0x00190015
 8005f60:	00030006 	.word	0x00030006
 8005f64:	000a000f 	.word	0x000a000f

08005f68 <D64_GENERIC>:
 8005f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6c:	b089      	sub	sp, #36	@ 0x24
 8005f6e:	6895      	ldr	r5, [r2, #8]
 8005f70:	6913      	ldr	r3, [r2, #16]
 8005f72:	9501      	str	r5, [sp, #4]
 8005f74:	68d5      	ldr	r5, [r2, #12]
 8005f76:	9302      	str	r3, [sp, #8]
 8005f78:	9500      	str	r5, [sp, #0]
 8005f7a:	6953      	ldr	r3, [r2, #20]
 8005f7c:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8005f7e:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8005f80:	9303      	str	r3, [sp, #12]
 8005f82:	6993      	ldr	r3, [r2, #24]
 8005f84:	9307      	str	r3, [sp, #28]
 8005f86:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8005f8a:	69d3      	ldr	r3, [r2, #28]
 8005f8c:	2c00      	cmp	r4, #0
 8005f8e:	f000 80d7 	beq.w	8006140 <D64_GENERIC+0x1d8>
 8005f92:	6a11      	ldr	r1, [r2, #32]
 8005f94:	9106      	str	r1, [sp, #24]
 8005f96:	f04f 0e00 	mov.w	lr, #0
 8005f9a:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8006180 <D64_GENERIC+0x218>
 8005f9e:	4681      	mov	r9, r0
 8005fa0:	e0bf      	b.n	8006122 <D64_GENERIC+0x1ba>
 8005fa2:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8005fa6:	426c      	negs	r4, r5
 8005fa8:	eb09 0708 	add.w	r7, r9, r8
 8005fac:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8005fb0:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 8005fb4:	5d38      	ldrb	r0, [r7, r4]
 8005fb6:	5d31      	ldrb	r1, [r6, r4]
 8005fb8:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8005fbc:	f819 a008 	ldrb.w	sl, [r9, r8]
 8005fc0:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8005fc4:	f899 7000 	ldrb.w	r7, [r9]
 8005fc8:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 8005fcc:	4426      	add	r6, r4
 8005fce:	0409      	lsls	r1, r1, #16
 8005fd0:	0400      	lsls	r0, r0, #16
 8005fd2:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8005fd6:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8005fda:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 8005fde:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8005fe2:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 8005fe6:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8005fea:	4459      	add	r1, fp
 8005fec:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8005ff0:	4438      	add	r0, r7
 8005ff2:	b2c5      	uxtb	r5, r0
 8005ff4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8005ff8:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8005ffc:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8006000:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8006004:	0e00      	lsrs	r0, r0, #24
 8006006:	eb03 0806 	add.w	r8, r3, r6
 800600a:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800600e:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8006012:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006016:	b2c8      	uxtb	r0, r1
 8006018:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800601c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8006020:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 8006024:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8006028:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800602c:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8006030:	0e09      	lsrs	r1, r1, #24
 8006032:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8006036:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 800603a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800603e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8006042:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8006046:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800604a:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800604e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006052:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006056:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800605a:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800605e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006062:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006066:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800606a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800606e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8006072:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8006076:	0a8b      	lsrs	r3, r1, #10
 8006078:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800607c:	4938      	ldr	r1, [pc, #224]	@ (8006160 <D64_GENERIC+0x1f8>)
 800607e:	9c00      	ldr	r4, [sp, #0]
 8006080:	fb28 4101 	smlad	r1, r8, r1, r4
 8006084:	4c37      	ldr	r4, [pc, #220]	@ (8006164 <D64_GENERIC+0x1fc>)
 8006086:	fb27 1104 	smlad	r1, r7, r4, r1
 800608a:	4c37      	ldr	r4, [pc, #220]	@ (8006168 <D64_GENERIC+0x200>)
 800608c:	fb20 1104 	smlad	r1, r0, r4, r1
 8006090:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8006094:	fb2a 1106 	smlad	r1, sl, r6, r1
 8006098:	4d34      	ldr	r5, [pc, #208]	@ (800616c <D64_GENERIC+0x204>)
 800609a:	9c01      	ldr	r4, [sp, #4]
 800609c:	fb28 4405 	smlad	r4, r8, r5, r4
 80060a0:	fb2a 4415 	smladx	r4, sl, r5, r4
 80060a4:	4d32      	ldr	r5, [pc, #200]	@ (8006170 <D64_GENERIC+0x208>)
 80060a6:	fb27 4405 	smlad	r4, r7, r5, r4
 80060aa:	fb20 4415 	smladx	r4, r0, r5, r4
 80060ae:	2501      	movs	r5, #1
 80060b0:	9400      	str	r4, [sp, #0]
 80060b2:	fb28 f805 	smuad	r8, r8, r5
 80060b6:	4c2f      	ldr	r4, [pc, #188]	@ (8006174 <D64_GENERIC+0x20c>)
 80060b8:	fb27 8704 	smlad	r7, r7, r4, r8
 80060bc:	4c2e      	ldr	r4, [pc, #184]	@ (8006178 <D64_GENERIC+0x210>)
 80060be:	fb20 7004 	smlad	r0, r0, r4, r7
 80060c2:	4c2e      	ldr	r4, [pc, #184]	@ (800617c <D64_GENERIC+0x214>)
 80060c4:	fb2a 0004 	smlad	r0, sl, r4, r0
 80060c8:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 80060cc:	9906      	ldr	r1, [sp, #24]
 80060ce:	9001      	str	r0, [sp, #4]
 80060d0:	b181      	cbz	r1, 80060f4 <D64_GENERIC+0x18c>
 80060d2:	9802      	ldr	r0, [sp, #8]
 80060d4:	9c03      	ldr	r4, [sp, #12]
 80060d6:	4430      	add	r0, r6
 80060d8:	1b00      	subs	r0, r0, r4
 80060da:	fba0 7801 	umull	r7, r8, r0, r1
 80060de:	17c5      	asrs	r5, r0, #31
 80060e0:	fb01 8805 	mla	r8, r1, r5, r8
 80060e4:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 80060e8:	f148 0100 	adc.w	r1, r8, #0
 80060ec:	0049      	lsls	r1, r1, #1
 80060ee:	e9cd 1602 	strd	r1, r6, [sp, #8]
 80060f2:	460e      	mov	r6, r1
 80060f4:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 80060f6:	9904      	ldr	r1, [sp, #16]
 80060f8:	9805      	ldr	r0, [sp, #20]
 80060fa:	02b6      	lsls	r6, r6, #10
 80060fc:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8006100:	f04f 0800 	mov.w	r8, #0
 8006104:	fb0e f404 	mul.w	r4, lr, r4
 8006108:	fbc1 7806 	smlal	r7, r8, r1, r6
 800610c:	4641      	mov	r1, r8
 800610e:	1089      	asrs	r1, r1, #2
 8006110:	f301 010f 	ssat	r1, #16, r1
 8006114:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8006118:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 800611a:	f10e 0e01 	add.w	lr, lr, #1
 800611e:	4571      	cmp	r1, lr
 8006120:	dd0e      	ble.n	8006140 <D64_GENERIC+0x1d8>
 8006122:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8006124:	2d01      	cmp	r5, #1
 8006126:	f47f af3c 	bne.w	8005fa2 <D64_GENERIC+0x3a>
 800612a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 800612c:	06ac      	lsls	r4, r5, #26
 800612e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006132:	f109 0908 	add.w	r9, r9, #8
 8006136:	f57f af5c 	bpl.w	8005ff2 <D64_GENERIC+0x8a>
 800613a:	ba40      	rev16	r0, r0
 800613c:	ba49      	rev16	r1, r1
 800613e:	e758      	b.n	8005ff2 <D64_GENERIC+0x8a>
 8006140:	61d3      	str	r3, [r2, #28]
 8006142:	9b02      	ldr	r3, [sp, #8]
 8006144:	9901      	ldr	r1, [sp, #4]
 8006146:	6113      	str	r3, [r2, #16]
 8006148:	9b03      	ldr	r3, [sp, #12]
 800614a:	6091      	str	r1, [r2, #8]
 800614c:	6153      	str	r3, [r2, #20]
 800614e:	9900      	ldr	r1, [sp, #0]
 8006150:	9b07      	ldr	r3, [sp, #28]
 8006152:	60d1      	str	r1, [r2, #12]
 8006154:	2000      	movs	r0, #0
 8006156:	6193      	str	r3, [r2, #24]
 8006158:	b009      	add	sp, #36	@ 0x24
 800615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615e:	bf00      	nop
 8006160:	001c0015 	.word	0x001c0015
 8006164:	000f000a 	.word	0x000f000a
 8006168:	00060003 	.word	0x00060003
 800616c:	0024002a 	.word	0x0024002a
 8006170:	002e0030 	.word	0x002e0030
 8006174:	00030006 	.word	0x00030006
 8006178:	000a000f 	.word	0x000a000f
 800617c:	0015001c 	.word	0x0015001c
 8006180:	2000000c 	.word	0x2000000c

08006184 <D80_GENERIC>:
 8006184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	b08b      	sub	sp, #44	@ 0x2c
 800618a:	6914      	ldr	r4, [r2, #16]
 800618c:	9405      	str	r4, [sp, #20]
 800618e:	6954      	ldr	r4, [r2, #20]
 8006190:	9406      	str	r4, [sp, #24]
 8006192:	6994      	ldr	r4, [r2, #24]
 8006194:	9409      	str	r4, [sp, #36]	@ 0x24
 8006196:	6894      	ldr	r4, [r2, #8]
 8006198:	9402      	str	r4, [sp, #8]
 800619a:	68d4      	ldr	r4, [r2, #12]
 800619c:	9401      	str	r4, [sp, #4]
 800619e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80061a0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80061a2:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80061a6:	e9cd 4107 	strd	r4, r1, [sp, #28]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 810a 	beq.w	80063c4 <D80_GENERIC+0x240>
 80061b0:	2300      	movs	r3, #0
 80061b2:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 8006414 <D80_GENERIC+0x290>
 80061b6:	e9cd b303 	strd	fp, r3, [sp, #12]
 80061ba:	e0ee      	b.n	800639a <D80_GENERIC+0x216>
 80061bc:	fa5f fe8e 	uxtb.w	lr, lr
 80061c0:	fa0f f48e 	sxth.w	r4, lr
 80061c4:	0066      	lsls	r6, r4, #1
 80061c6:	eb06 0804 	add.w	r8, r6, r4
 80061ca:	f1ce 0500 	rsb	r5, lr, #0
 80061ce:	eb00 0108 	add.w	r1, r0, r8
 80061d2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80061d6:	194b      	adds	r3, r1, r5
 80061d8:	5d49      	ldrb	r1, [r1, r5]
 80061da:	f810 a008 	ldrb.w	sl, [r0, r8]
 80061de:	f813 b004 	ldrb.w	fp, [r3, r4]
 80061e2:	f810 e00e 	ldrb.w	lr, [r0, lr]
 80061e6:	f890 8000 	ldrb.w	r8, [r0]
 80061ea:	eb03 0c04 	add.w	ip, r3, r4
 80061ee:	eb0c 0705 	add.w	r7, ip, r5
 80061f2:	0409      	lsls	r1, r1, #16
 80061f4:	f81c 3005 	ldrb.w	r3, [ip, r5]
 80061f8:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80061fc:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8006200:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8006204:	eb0a 0004 	add.w	r0, sl, r4
 8006208:	041b      	lsls	r3, r3, #16
 800620a:	f81a a004 	ldrb.w	sl, [sl, r4]
 800620e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8006212:	5d44      	ldrb	r4, [r0, r5]
 8006214:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8006218:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 800621c:	4428      	add	r0, r5
 800621e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8006222:	4441      	add	r1, r8
 8006224:	4430      	add	r0, r6
 8006226:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800622a:	441f      	add	r7, r3
 800622c:	b2cd      	uxtb	r5, r1
 800622e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006232:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8006236:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8006240:	0e09      	lsrs	r1, r1, #24
 8006242:	4433      	add	r3, r6
 8006244:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8006248:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800624c:	b2fd      	uxtb	r5, r7
 800624e:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 8006252:	469b      	mov	fp, r3
 8006254:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8006258:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800625c:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 8006260:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8006264:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8006268:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800626c:	0e3b      	lsrs	r3, r7, #24
 800626e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8006272:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 8006276:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800627a:	fa5f fc84 	uxtb.w	ip, r4
 800627e:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 8006282:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006286:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800628a:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 800628e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8006292:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8006296:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 800629a:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800629e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80062a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80062aa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80062ae:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80062b2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80062b6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80062ba:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80062be:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80062c2:	0aa3      	lsrs	r3, r4, #10
 80062c4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80062c8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80062cc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80062d0:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 80062d4:	9303      	str	r3, [sp, #12]
 80062d6:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 80062da:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 80062de:	4b41      	ldr	r3, [pc, #260]	@ (80063e4 <D80_GENERIC+0x260>)
 80062e0:	9901      	ldr	r1, [sp, #4]
 80062e2:	fb2b 1303 	smlad	r3, fp, r3, r1
 80062e6:	4940      	ldr	r1, [pc, #256]	@ (80063e8 <D80_GENERIC+0x264>)
 80062e8:	fb28 3301 	smlad	r3, r8, r1, r3
 80062ec:	493f      	ldr	r1, [pc, #252]	@ (80063ec <D80_GENERIC+0x268>)
 80062ee:	fb2e 3301 	smlad	r3, lr, r1, r3
 80062f2:	493f      	ldr	r1, [pc, #252]	@ (80063f0 <D80_GENERIC+0x26c>)
 80062f4:	fb27 3301 	smlad	r3, r7, r1, r3
 80062f8:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80062fc:	fb2c 3404 	smlad	r4, ip, r4, r3
 8006300:	4b3c      	ldr	r3, [pc, #240]	@ (80063f4 <D80_GENERIC+0x270>)
 8006302:	9902      	ldr	r1, [sp, #8]
 8006304:	fb2b 1303 	smlad	r3, fp, r3, r1
 8006308:	493b      	ldr	r1, [pc, #236]	@ (80063f8 <D80_GENERIC+0x274>)
 800630a:	fb28 3301 	smlad	r3, r8, r1, r3
 800630e:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 8006312:	fb2e 3101 	smlad	r1, lr, r1, r3
 8006316:	4b39      	ldr	r3, [pc, #228]	@ (80063fc <D80_GENERIC+0x278>)
 8006318:	fb27 1103 	smlad	r1, r7, r3, r1
 800631c:	4b38      	ldr	r3, [pc, #224]	@ (8006400 <D80_GENERIC+0x27c>)
 800631e:	fb2c 1303 	smlad	r3, ip, r3, r1
 8006322:	2101      	movs	r1, #1
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	fb2b fb01 	smuad	fp, fp, r1
 800632a:	4b36      	ldr	r3, [pc, #216]	@ (8006404 <D80_GENERIC+0x280>)
 800632c:	fb28 b803 	smlad	r8, r8, r3, fp
 8006330:	4d35      	ldr	r5, [pc, #212]	@ (8006408 <D80_GENERIC+0x284>)
 8006332:	fb2e 8e05 	smlad	lr, lr, r5, r8
 8006336:	4d35      	ldr	r5, [pc, #212]	@ (800640c <D80_GENERIC+0x288>)
 8006338:	fb27 e705 	smlad	r7, r7, r5, lr
 800633c:	4b34      	ldr	r3, [pc, #208]	@ (8006410 <D80_GENERIC+0x28c>)
 800633e:	fb2c 7303 	smlad	r3, ip, r3, r7
 8006342:	6a11      	ldr	r1, [r2, #32]
 8006344:	9302      	str	r3, [sp, #8]
 8006346:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 800634a:	b181      	cbz	r1, 800636e <D80_GENERIC+0x1ea>
 800634c:	9c05      	ldr	r4, [sp, #20]
 800634e:	9d06      	ldr	r5, [sp, #24]
 8006350:	441c      	add	r4, r3
 8006352:	1b64      	subs	r4, r4, r5
 8006354:	fba4 ab01 	umull	sl, fp, r4, r1
 8006358:	17e7      	asrs	r7, r4, #31
 800635a:	fb01 bb07 	mla	fp, r1, r7, fp
 800635e:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 8006362:	f14b 0500 	adc.w	r5, fp, #0
 8006366:	0069      	lsls	r1, r5, #1
 8006368:	e9cd 1305 	strd	r1, r3, [sp, #20]
 800636c:	460b      	mov	r3, r1
 800636e:	9e04      	ldr	r6, [sp, #16]
 8006370:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8006372:	9f07      	ldr	r7, [sp, #28]
 8006374:	025b      	lsls	r3, r3, #9
 8006376:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800637a:	2500      	movs	r5, #0
 800637c:	fb06 f101 	mul.w	r1, r6, r1
 8006380:	fbc7 4503 	smlal	r4, r5, r7, r3
 8006384:	9c08      	ldr	r4, [sp, #32]
 8006386:	10ab      	asrs	r3, r5, #2
 8006388:	f303 030f 	ssat	r3, #16, r3
 800638c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8006390:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8006392:	1c71      	adds	r1, r6, #1
 8006394:	428b      	cmp	r3, r1
 8006396:	9104      	str	r1, [sp, #16]
 8006398:	dd12      	ble.n	80063c0 <D80_GENERIC+0x23c>
 800639a:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 800639e:	f1be 0f01 	cmp.w	lr, #1
 80063a2:	f47f af0b 	bne.w	80061bc <D80_GENERIC+0x38>
 80063a6:	6801      	ldr	r1, [r0, #0]
 80063a8:	6847      	ldr	r7, [r0, #4]
 80063aa:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80063ac:	6884      	ldr	r4, [r0, #8]
 80063ae:	069b      	lsls	r3, r3, #26
 80063b0:	f100 000a 	add.w	r0, r0, #10
 80063b4:	f57f af3a 	bpl.w	800622c <D80_GENERIC+0xa8>
 80063b8:	ba49      	rev16	r1, r1
 80063ba:	ba7f      	rev16	r7, r7
 80063bc:	ba64      	rev16	r4, r4
 80063be:	e735      	b.n	800622c <D80_GENERIC+0xa8>
 80063c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80063c4:	9b02      	ldr	r3, [sp, #8]
 80063c6:	6093      	str	r3, [r2, #8]
 80063c8:	9b01      	ldr	r3, [sp, #4]
 80063ca:	60d3      	str	r3, [r2, #12]
 80063cc:	9b05      	ldr	r3, [sp, #20]
 80063ce:	6113      	str	r3, [r2, #16]
 80063d0:	9b06      	ldr	r3, [sp, #24]
 80063d2:	6153      	str	r3, [r2, #20]
 80063d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d6:	f8c2 b01c 	str.w	fp, [r2, #28]
 80063da:	2000      	movs	r0, #0
 80063dc:	6193      	str	r3, [r2, #24]
 80063de:	b00b      	add	sp, #44	@ 0x2c
 80063e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e4:	002d0024 	.word	0x002d0024
 80063e8:	001c0015 	.word	0x001c0015
 80063ec:	000f000a 	.word	0x000f000a
 80063f0:	00060003 	.word	0x00060003
 80063f4:	0037003f 	.word	0x0037003f
 80063f8:	00450049 	.word	0x00450049
 80063fc:	00490045 	.word	0x00490045
 8006400:	003f0037 	.word	0x003f0037
 8006404:	00030006 	.word	0x00030006
 8006408:	000a000f 	.word	0x000a000f
 800640c:	0015001c 	.word	0x0015001c
 8006410:	0024002d 	.word	0x0024002d
 8006414:	2000000c 	.word	0x2000000c

08006418 <D128_GENERIC>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	b091      	sub	sp, #68	@ 0x44
 800641e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8006420:	9004      	str	r0, [sp, #16]
 8006422:	6910      	ldr	r0, [r2, #16]
 8006424:	900a      	str	r0, [sp, #40]	@ 0x28
 8006426:	6950      	ldr	r0, [r2, #20]
 8006428:	900b      	str	r0, [sp, #44]	@ 0x2c
 800642a:	6990      	ldr	r0, [r2, #24]
 800642c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800642e:	69d0      	ldr	r0, [r2, #28]
 8006430:	9002      	str	r0, [sp, #8]
 8006432:	6890      	ldr	r0, [r2, #8]
 8006434:	9003      	str	r0, [sp, #12]
 8006436:	68d0      	ldr	r0, [r2, #12]
 8006438:	9001      	str	r0, [sp, #4]
 800643a:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800643c:	9200      	str	r2, [sp, #0]
 800643e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 8196 	beq.w	8006774 <D128_GENERIC+0x35c>
 8006448:	2300      	movs	r3, #0
 800644a:	6a12      	ldr	r2, [r2, #32]
 800644c:	920e      	str	r2, [sp, #56]	@ 0x38
 800644e:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 80067f0 <D128_GENERIC+0x3d8>
 8006452:	9305      	str	r3, [sp, #20]
 8006454:	e177      	b.n	8006746 <D128_GENERIC+0x32e>
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	9d04      	ldr	r5, [sp, #16]
 800645a:	b214      	sxth	r4, r2
 800645c:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8006460:	4250      	negs	r0, r2
 8006462:	eb05 010a 	add.w	r1, r5, sl
 8006466:	00a6      	lsls	r6, r4, #2
 8006468:	eb01 0800 	add.w	r8, r1, r0
 800646c:	eb06 0e04 	add.w	lr, r6, r4
 8006470:	eb08 070e 	add.w	r7, r8, lr
 8006474:	183b      	adds	r3, r7, r0
 8006476:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800647a:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 800647e:	9608      	str	r6, [sp, #32]
 8006480:	eb0c 0604 	add.w	r6, ip, r4
 8006484:	9304      	str	r3, [sp, #16]
 8006486:	1833      	adds	r3, r6, r0
 8006488:	f815 b00a 	ldrb.w	fp, [r5, sl]
 800648c:	9306      	str	r3, [sp, #24]
 800648e:	f818 a00e 	ldrb.w	sl, [r8, lr]
 8006492:	9b04      	ldr	r3, [sp, #16]
 8006494:	f815 e002 	ldrb.w	lr, [r5, r2]
 8006498:	782d      	ldrb	r5, [r5, #0]
 800649a:	5c3a      	ldrb	r2, [r7, r0]
 800649c:	9507      	str	r5, [sp, #28]
 800649e:	9d06      	ldr	r5, [sp, #24]
 80064a0:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80064a4:	f81c 8004 	ldrb.w	r8, [ip, r4]
 80064a8:	9304      	str	r3, [sp, #16]
 80064aa:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 80064ae:	5c33      	ldrb	r3, [r6, r0]
 80064b0:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 80064b4:	5c09      	ldrb	r1, [r1, r0]
 80064b6:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 80064ba:	0412      	lsls	r2, r2, #16
 80064bc:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 80064c0:	eb06 0a04 	add.w	sl, r6, r4
 80064c4:	5d36      	ldrb	r6, [r6, r4]
 80064c6:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 80064ca:	f81a 5000 	ldrb.w	r5, [sl, r0]
 80064ce:	042d      	lsls	r5, r5, #16
 80064d0:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 80064d4:	0409      	lsls	r1, r1, #16
 80064d6:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 80064da:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80064de:	041b      	lsls	r3, r3, #16
 80064e0:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 80064e4:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 80064e8:	eb0a 0e00 	add.w	lr, sl, r0
 80064ec:	9d07      	ldr	r5, [sp, #28]
 80064ee:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 80064f2:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80064f6:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80064fa:	9f08      	ldr	r7, [sp, #32]
 80064fc:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8006500:	4429      	add	r1, r5
 8006502:	9d04      	ldr	r5, [sp, #16]
 8006504:	4438      	add	r0, r7
 8006506:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 800650a:	9004      	str	r0, [sp, #16]
 800650c:	442a      	add	r2, r5
 800650e:	eb06 0a0b 	add.w	sl, r6, fp
 8006512:	1918      	adds	r0, r3, r4
 8006514:	b2cb      	uxtb	r3, r1
 8006516:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800651a:	9e02      	ldr	r6, [sp, #8]
 800651c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006520:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8006524:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8006528:	441e      	add	r6, r3
 800652a:	0e09      	lsrs	r1, r1, #24
 800652c:	4633      	mov	r3, r6
 800652e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8006532:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8006536:	b2d4      	uxtb	r4, r2
 8006538:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800653c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006540:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8006544:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8006548:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800654c:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8006550:	0e12      	lsrs	r2, r2, #24
 8006552:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8006556:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800655a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800655e:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8006562:	9702      	str	r7, [sp, #8]
 8006564:	b2c2      	uxtb	r2, r0
 8006566:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800656a:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 800656e:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8006572:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8006576:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800657a:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 800657e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8006582:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8006586:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800658a:	0e00      	lsrs	r0, r0, #24
 800658c:	fa5f f68a 	uxtb.w	r6, sl
 8006590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006594:	9308      	str	r3, [sp, #32]
 8006596:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800659a:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800659e:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 80065a2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80065a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80065aa:	9509      	str	r5, [sp, #36]	@ 0x24
 80065ac:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80065b0:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80065b4:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80065b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80065bc:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 80065c0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80065c4:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80065c8:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80065cc:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 80065d0:	9306      	str	r3, [sp, #24]
 80065d2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80065d6:	9b02      	ldr	r3, [sp, #8]
 80065d8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80065dc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80065e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80065e4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80065e8:	9b06      	ldr	r3, [sp, #24]
 80065ea:	9506      	str	r5, [sp, #24]
 80065ec:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80065ee:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80065f2:	f8cd e008 	str.w	lr, [sp, #8]
 80065f6:	46ae      	mov	lr, r5
 80065f8:	9d08      	ldr	r5, [sp, #32]
 80065fa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80065fe:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8006602:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006606:	9d02      	ldr	r5, [sp, #8]
 8006608:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800660c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006610:	9f07      	ldr	r7, [sp, #28]
 8006612:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8006616:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800661a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800661e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006622:	9d06      	ldr	r5, [sp, #24]
 8006624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006628:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800662c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006630:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8006634:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006638:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 800663c:	0abe      	lsrs	r6, r7, #10
 800663e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006642:	9602      	str	r6, [sp, #8]
 8006644:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8006648:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800664c:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 8006650:	4e52      	ldr	r6, [pc, #328]	@ (800679c <D128_GENERIC+0x384>)
 8006652:	9f01      	ldr	r7, [sp, #4]
 8006654:	fb2e 7606 	smlad	r6, lr, r6, r7
 8006658:	4f51      	ldr	r7, [pc, #324]	@ (80067a0 <D128_GENERIC+0x388>)
 800665a:	fb2a 6607 	smlad	r6, sl, r7, r6
 800665e:	4f51      	ldr	r7, [pc, #324]	@ (80067a4 <D128_GENERIC+0x38c>)
 8006660:	fb21 6607 	smlad	r6, r1, r7, r6
 8006664:	4f50      	ldr	r7, [pc, #320]	@ (80067a8 <D128_GENERIC+0x390>)
 8006666:	fb24 6607 	smlad	r6, r4, r7, r6
 800666a:	4f50      	ldr	r7, [pc, #320]	@ (80067ac <D128_GENERIC+0x394>)
 800666c:	fb22 6607 	smlad	r6, r2, r7, r6
 8006670:	4f4f      	ldr	r7, [pc, #316]	@ (80067b0 <D128_GENERIC+0x398>)
 8006672:	fb20 6607 	smlad	r6, r0, r7, r6
 8006676:	4f4f      	ldr	r7, [pc, #316]	@ (80067b4 <D128_GENERIC+0x39c>)
 8006678:	fb23 6607 	smlad	r6, r3, r7, r6
 800667c:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8006680:	fb25 6807 	smlad	r8, r5, r7, r6
 8006684:	4f4c      	ldr	r7, [pc, #304]	@ (80067b8 <D128_GENERIC+0x3a0>)
 8006686:	9e03      	ldr	r6, [sp, #12]
 8006688:	fb2e 6c07 	smlad	ip, lr, r7, r6
 800668c:	4e4b      	ldr	r6, [pc, #300]	@ (80067bc <D128_GENERIC+0x3a4>)
 800668e:	fb2a cc06 	smlad	ip, sl, r6, ip
 8006692:	4f4b      	ldr	r7, [pc, #300]	@ (80067c0 <D128_GENERIC+0x3a8>)
 8006694:	fb21 cc07 	smlad	ip, r1, r7, ip
 8006698:	4f4a      	ldr	r7, [pc, #296]	@ (80067c4 <D128_GENERIC+0x3ac>)
 800669a:	fb24 cc07 	smlad	ip, r4, r7, ip
 800669e:	4f4a      	ldr	r7, [pc, #296]	@ (80067c8 <D128_GENERIC+0x3b0>)
 80066a0:	fb22 cc07 	smlad	ip, r2, r7, ip
 80066a4:	4f49      	ldr	r7, [pc, #292]	@ (80067cc <D128_GENERIC+0x3b4>)
 80066a6:	fb20 cc07 	smlad	ip, r0, r7, ip
 80066aa:	4f49      	ldr	r7, [pc, #292]	@ (80067d0 <D128_GENERIC+0x3b8>)
 80066ac:	fb23 c707 	smlad	r7, r3, r7, ip
 80066b0:	f8df c140 	ldr.w	ip, [pc, #320]	@ 80067f4 <D128_GENERIC+0x3dc>
 80066b4:	fb25 760c 	smlad	r6, r5, ip, r7
 80066b8:	f04f 0b01 	mov.w	fp, #1
 80066bc:	9601      	str	r6, [sp, #4]
 80066be:	fb2e fb0b 	smuad	fp, lr, fp
 80066c2:	4f44      	ldr	r7, [pc, #272]	@ (80067d4 <D128_GENERIC+0x3bc>)
 80066c4:	fb2a ba07 	smlad	sl, sl, r7, fp
 80066c8:	4f43      	ldr	r7, [pc, #268]	@ (80067d8 <D128_GENERIC+0x3c0>)
 80066ca:	fb21 aa07 	smlad	sl, r1, r7, sl
 80066ce:	4f43      	ldr	r7, [pc, #268]	@ (80067dc <D128_GENERIC+0x3c4>)
 80066d0:	fb24 aa07 	smlad	sl, r4, r7, sl
 80066d4:	4f42      	ldr	r7, [pc, #264]	@ (80067e0 <D128_GENERIC+0x3c8>)
 80066d6:	fb22 a707 	smlad	r7, r2, r7, sl
 80066da:	4a42      	ldr	r2, [pc, #264]	@ (80067e4 <D128_GENERIC+0x3cc>)
 80066dc:	fb20 7702 	smlad	r7, r0, r2, r7
 80066e0:	4a41      	ldr	r2, [pc, #260]	@ (80067e8 <D128_GENERIC+0x3d0>)
 80066e2:	fb23 7702 	smlad	r7, r3, r2, r7
 80066e6:	4b41      	ldr	r3, [pc, #260]	@ (80067ec <D128_GENERIC+0x3d4>)
 80066e8:	fb25 7303 	smlad	r3, r5, r3, r7
 80066ec:	9303      	str	r3, [sp, #12]
 80066ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066f0:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 80066f4:	b183      	cbz	r3, 8006718 <D128_GENERIC+0x300>
 80066f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066fa:	4432      	add	r2, r6
 80066fc:	1a52      	subs	r2, r2, r1
 80066fe:	fba2 4503 	umull	r4, r5, r2, r3
 8006702:	17d1      	asrs	r1, r2, #31
 8006704:	fb03 5501 	mla	r5, r3, r1, r5
 8006708:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 800670c:	f145 0300 	adc.w	r3, r5, #0
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 8006716:	461e      	mov	r6, r3
 8006718:	9800      	ldr	r0, [sp, #0]
 800671a:	9c05      	ldr	r4, [sp, #20]
 800671c:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 800671e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006720:	01f6      	lsls	r6, r6, #7
 8006722:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006726:	2300      	movs	r3, #0
 8006728:	fbc5 2306 	smlal	r2, r3, r5, r6
 800672c:	fb04 f101 	mul.w	r1, r4, r1
 8006730:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006732:	109b      	asrs	r3, r3, #2
 8006734:	f303 030f 	ssat	r3, #16, r3
 8006738:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800673c:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800673e:	1c62      	adds	r2, r4, #1
 8006740:	4293      	cmp	r3, r2
 8006742:	9205      	str	r2, [sp, #20]
 8006744:	dd16      	ble.n	8006774 <D128_GENERIC+0x35c>
 8006746:	9b00      	ldr	r3, [sp, #0]
 8006748:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800674a:	2a01      	cmp	r2, #1
 800674c:	f47f ae83 	bne.w	8006456 <D128_GENERIC+0x3e>
 8006750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006752:	9c04      	ldr	r4, [sp, #16]
 8006754:	069b      	lsls	r3, r3, #26
 8006756:	e9d4 1200 	ldrd	r1, r2, [r4]
 800675a:	68a0      	ldr	r0, [r4, #8]
 800675c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8006760:	f104 0410 	add.w	r4, r4, #16
 8006764:	d517      	bpl.n	8006796 <D128_GENERIC+0x37e>
 8006766:	ba49      	rev16	r1, r1
 8006768:	ba52      	rev16	r2, r2
 800676a:	ba40      	rev16	r0, r0
 800676c:	fa9a fa9a 	rev16.w	sl, sl
 8006770:	9404      	str	r4, [sp, #16]
 8006772:	e6cf      	b.n	8006514 <D128_GENERIC+0xfc>
 8006774:	9b00      	ldr	r3, [sp, #0]
 8006776:	9903      	ldr	r1, [sp, #12]
 8006778:	6099      	str	r1, [r3, #8]
 800677a:	9901      	ldr	r1, [sp, #4]
 800677c:	60d9      	str	r1, [r3, #12]
 800677e:	9902      	ldr	r1, [sp, #8]
 8006780:	61d9      	str	r1, [r3, #28]
 8006782:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006784:	6119      	str	r1, [r3, #16]
 8006786:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006788:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800678a:	6159      	str	r1, [r3, #20]
 800678c:	2000      	movs	r0, #0
 800678e:	619a      	str	r2, [r3, #24]
 8006790:	b011      	add	sp, #68	@ 0x44
 8006792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006796:	9404      	str	r4, [sp, #16]
 8006798:	e6bc      	b.n	8006514 <D128_GENERIC+0xfc>
 800679a:	bf00      	nop
 800679c:	00780069 	.word	0x00780069
 80067a0:	005b004e 	.word	0x005b004e
 80067a4:	00420037 	.word	0x00420037
 80067a8:	002d0024 	.word	0x002d0024
 80067ac:	001c0015 	.word	0x001c0015
 80067b0:	000f000a 	.word	0x000f000a
 80067b4:	00060003 	.word	0x00060003
 80067b8:	00880096 	.word	0x00880096
 80067bc:	00a200ac 	.word	0x00a200ac
 80067c0:	00b400ba 	.word	0x00b400ba
 80067c4:	00be00c0 	.word	0x00be00c0
 80067c8:	00c000be 	.word	0x00c000be
 80067cc:	00ba00b4 	.word	0x00ba00b4
 80067d0:	00ac00a2 	.word	0x00ac00a2
 80067d4:	00030006 	.word	0x00030006
 80067d8:	000a000f 	.word	0x000a000f
 80067dc:	0015001c 	.word	0x0015001c
 80067e0:	0024002d 	.word	0x0024002d
 80067e4:	00370042 	.word	0x00370042
 80067e8:	004e005b 	.word	0x004e005b
 80067ec:	00690078 	.word	0x00690078
 80067f0:	2000000c 	.word	0x2000000c
 80067f4:	00960088 	.word	0x00960088

080067f8 <D16_1CH_HTONS_VOL_HP>:
 80067f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fc:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8006800:	b085      	sub	sp, #20
 8006802:	4681      	mov	r9, r0
 8006804:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8006806:	6993      	ldr	r3, [r2, #24]
 8006808:	9303      	str	r3, [sp, #12]
 800680a:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 800680e:	69d3      	ldr	r3, [r2, #28]
 8006810:	9402      	str	r4, [sp, #8]
 8006812:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 8006816:	f8d2 c020 	ldr.w	ip, [r2, #32]
 800681a:	2800      	cmp	r0, #0
 800681c:	d057      	beq.n	80068ce <D16_1CH_HTONS_VOL_HP+0xd6>
 800681e:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 8006822:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 80068dc <D16_1CH_HTONS_VOL_HP+0xe4>
 8006826:	f1a1 0802 	sub.w	r8, r1, #2
 800682a:	4639      	mov	r1, r7
 800682c:	465f      	mov	r7, fp
 800682e:	46d3      	mov	fp, sl
 8006830:	46ca      	mov	sl, r9
 8006832:	4699      	mov	r9, r3
 8006834:	4633      	mov	r3, r6
 8006836:	4616      	mov	r6, r2
 8006838:	f85a 2b02 	ldr.w	r2, [sl], #2
 800683c:	ba52      	rev16	r2, r2
 800683e:	b2d4      	uxtb	r4, r2
 8006840:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8006844:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 8006848:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800684c:	4491      	add	r9, r2
 800684e:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 8006852:	f3c0 0209 	ubfx	r2, r0, #0, #10
 8006856:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800685a:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 800685e:	ea4f 2990 	mov.w	r9, r0, lsr #10
 8006862:	481c      	ldr	r0, [pc, #112]	@ (80068d4 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8006864:	fb22 5400 	smlad	r4, r2, r0, r5
 8006868:	481b      	ldr	r0, [pc, #108]	@ (80068d8 <D16_1CH_HTONS_VOL_HP+0xe0>)
 800686a:	fb22 f500 	smuad	r5, r2, r0
 800686e:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8006872:	18e2      	adds	r2, r4, r3
 8006874:	1a52      	subs	r2, r2, r1
 8006876:	17d1      	asrs	r1, r2, #31
 8006878:	fba2 230c 	umull	r2, r3, r2, ip
 800687c:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8006880:	fb0c 3301 	mla	r3, ip, r1, r3
 8006884:	f143 0100 	adc.w	r1, r3, #0
 8006888:	e9cd 0100 	strd	r0, r1, [sp]
 800688c:	044a      	lsls	r2, r1, #17
 800688e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006892:	2100      	movs	r1, #0
 8006894:	9b01      	ldr	r3, [sp, #4]
 8006896:	fbcb 0102 	smlal	r0, r1, fp, r2
 800689a:	45ba      	cmp	sl, r7
 800689c:	ea4f 02a1 	mov.w	r2, r1, asr #2
 80068a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068a4:	f302 020f 	ssat	r2, #16, r2
 80068a8:	4621      	mov	r1, r4
 80068aa:	f828 2f02 	strh.w	r2, [r8, #2]!
 80068ae:	d1c3      	bne.n	8006838 <D16_1CH_HTONS_VOL_HP+0x40>
 80068b0:	4632      	mov	r2, r6
 80068b2:	461e      	mov	r6, r3
 80068b4:	464b      	mov	r3, r9
 80068b6:	9902      	ldr	r1, [sp, #8]
 80068b8:	61d3      	str	r3, [r2, #28]
 80068ba:	9b03      	ldr	r3, [sp, #12]
 80068bc:	6095      	str	r5, [r2, #8]
 80068be:	2000      	movs	r0, #0
 80068c0:	60d1      	str	r1, [r2, #12]
 80068c2:	e9c2 6404 	strd	r6, r4, [r2, #16]
 80068c6:	6193      	str	r3, [r2, #24]
 80068c8:	b005      	add	sp, #20
 80068ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ce:	463c      	mov	r4, r7
 80068d0:	e7f1      	b.n	80068b6 <D16_1CH_HTONS_VOL_HP+0xbe>
 80068d2:	bf00      	nop
 80068d4:	00030001 	.word	0x00030001
 80068d8:	00010003 	.word	0x00010003
 80068dc:	2000000c 	.word	0x2000000c

080068e0 <D24_1CH_HTONS_VOL_HP>:
 80068e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	4696      	mov	lr, r2
 80068e6:	b089      	sub	sp, #36	@ 0x24
 80068e8:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 80068ec:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80068ee:	f8de 3018 	ldr.w	r3, [lr, #24]
 80068f2:	9703      	str	r7, [sp, #12]
 80068f4:	f8de 7020 	ldr.w	r7, [lr, #32]
 80068f8:	9306      	str	r3, [sp, #24]
 80068fa:	9205      	str	r2, [sp, #20]
 80068fc:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 8006900:	f8de 601c 	ldr.w	r6, [lr, #28]
 8006904:	9704      	str	r7, [sp, #16]
 8006906:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 800690a:	2a00      	cmp	r2, #0
 800690c:	f000 8081 	beq.w	8006a12 <D24_1CH_HTONS_VOL_HP+0x132>
 8006910:	f1a1 0b02 	sub.w	fp, r1, #2
 8006914:	2700      	movs	r7, #0
 8006916:	46d9      	mov	r9, fp
 8006918:	f8cd e01c 	str.w	lr, [sp, #28]
 800691c:	46d3      	mov	fp, sl
 800691e:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8006a20 <D24_1CH_HTONS_VOL_HP+0x140>
 8006922:	46a8      	mov	r8, r5
 8006924:	46ba      	mov	sl, r7
 8006926:	469e      	mov	lr, r3
 8006928:	e052      	b.n	80069d0 <D24_1CH_HTONS_VOL_HP+0xf0>
 800692a:	7842      	ldrb	r2, [r0, #1]
 800692c:	3002      	adds	r0, #2
 800692e:	4413      	add	r3, r2
 8006930:	b2d9      	uxtb	r1, r3
 8006932:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006936:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 800693a:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800693e:	0c1b      	lsrs	r3, r3, #16
 8006940:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8006944:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006948:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 800694c:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8006950:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8006954:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8006958:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800695c:	4a2e      	ldr	r2, [pc, #184]	@ (8006a18 <D24_1CH_HTONS_VOL_HP+0x138>)
 800695e:	fb23 b102 	smlad	r1, r3, r2, fp
 8006962:	4a2e      	ldr	r2, [pc, #184]	@ (8006a1c <D24_1CH_HTONS_VOL_HP+0x13c>)
 8006964:	fb23 eb02 	smlad	fp, r3, r2, lr
 8006968:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 800696c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8006970:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 8006974:	2201      	movs	r2, #1
 8006976:	fb23 f702 	smuad	r7, r3, r2
 800697a:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 800697e:	eb01 0208 	add.w	r2, r1, r8
 8006982:	1b12      	subs	r2, r2, r4
 8006984:	17d4      	asrs	r4, r2, #31
 8006986:	4613      	mov	r3, r2
 8006988:	e9cd 3400 	strd	r3, r4, [sp]
 800698c:	9c04      	ldr	r4, [sp, #16]
 800698e:	9d01      	ldr	r5, [sp, #4]
 8006990:	fba2 2304 	umull	r2, r3, r2, r4
 8006994:	fb04 3305 	mla	r3, r4, r5, r3
 8006998:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 800699c:	f143 0500 	adc.w	r5, r3, #0
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	e9cd 4500 	strd	r4, r5, [sp]
 80069a6:	03ea      	lsls	r2, r5, #15
 80069a8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80069ac:	2500      	movs	r5, #0
 80069ae:	fbc3 4502 	smlal	r4, r5, r3, r2
 80069b2:	9b01      	ldr	r3, [sp, #4]
 80069b4:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80069b8:	10ab      	asrs	r3, r5, #2
 80069ba:	f303 030f 	ssat	r3, #16, r3
 80069be:	f829 3f02 	strh.w	r3, [r9, #2]!
 80069c2:	9b05      	ldr	r3, [sp, #20]
 80069c4:	f10a 0a01 	add.w	sl, sl, #1
 80069c8:	459a      	cmp	sl, r3
 80069ca:	44be      	add	lr, r7
 80069cc:	460c      	mov	r4, r1
 80069ce:	d00e      	beq.n	80069ee <D24_1CH_HTONS_VOL_HP+0x10e>
 80069d0:	7801      	ldrb	r1, [r0, #0]
 80069d2:	78c2      	ldrb	r2, [r0, #3]
 80069d4:	020b      	lsls	r3, r1, #8
 80069d6:	f01a 0f01 	tst.w	sl, #1
 80069da:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80069de:	d0a4      	beq.n	800692a <D24_1CH_HTONS_VOL_HP+0x4a>
 80069e0:	7885      	ldrb	r5, [r0, #2]
 80069e2:	0212      	lsls	r2, r2, #8
 80069e4:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 80069e8:	440b      	add	r3, r1
 80069ea:	3004      	adds	r0, #4
 80069ec:	e7a0      	b.n	8006930 <D24_1CH_HTONS_VOL_HP+0x50>
 80069ee:	4673      	mov	r3, lr
 80069f0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80069f4:	46da      	mov	sl, fp
 80069f6:	4645      	mov	r5, r8
 80069f8:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 80069fc:	9b06      	ldr	r3, [sp, #24]
 80069fe:	f8ce 601c 	str.w	r6, [lr, #28]
 8006a02:	2000      	movs	r0, #0
 8006a04:	e9ce 5104 	strd	r5, r1, [lr, #16]
 8006a08:	f8ce 3018 	str.w	r3, [lr, #24]
 8006a0c:	b009      	add	sp, #36	@ 0x24
 8006a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a12:	4621      	mov	r1, r4
 8006a14:	e7f0      	b.n	80069f8 <D24_1CH_HTONS_VOL_HP+0x118>
 8006a16:	bf00      	nop
 8006a18:	00030001 	.word	0x00030001
 8006a1c:	00060007 	.word	0x00060007
 8006a20:	2000000c 	.word	0x2000000c

08006a24 <D32_1CH_HTONS_VOL_HP>:
 8006a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a28:	4682      	mov	sl, r0
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8006a2e:	6993      	ldr	r3, [r2, #24]
 8006a30:	9304      	str	r3, [sp, #16]
 8006a32:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8006a36:	69d5      	ldr	r5, [r2, #28]
 8006a38:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8006a3a:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8006a3e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d070      	beq.n	8006b28 <D32_1CH_HTONS_VOL_HP+0x104>
 8006a46:	468e      	mov	lr, r1
 8006a48:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8006b3c <D32_1CH_HTONS_VOL_HP+0x118>
 8006a4c:	9205      	str	r2, [sp, #20]
 8006a4e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8006a52:	46d3      	mov	fp, sl
 8006a54:	4638      	mov	r0, r7
 8006a56:	46ca      	mov	sl, r9
 8006a58:	9103      	str	r1, [sp, #12]
 8006a5a:	4627      	mov	r7, r4
 8006a5c:	4699      	mov	r9, r3
 8006a5e:	f85b 1b04 	ldr.w	r1, [fp], #4
 8006a62:	ba49      	rev16	r1, r1
 8006a64:	b2ca      	uxtb	r2, r1
 8006a66:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8006a6a:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8006a6e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8006a72:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8006a76:	0e09      	lsrs	r1, r1, #24
 8006a78:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8006a7c:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8006a80:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 8006a84:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8006a88:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8006a8c:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 8006a90:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006a94:	f3c5 0109 	ubfx	r1, r5, #0, #10
 8006a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a9c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa4:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8006aa8:	4a20      	ldr	r2, [pc, #128]	@ (8006b2c <D32_1CH_HTONS_VOL_HP+0x108>)
 8006aaa:	fb23 8802 	smlad	r8, r3, r2, r8
 8006aae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006ab2:	fb24 8102 	smlad	r1, r4, r2, r8
 8006ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b30 <D32_1CH_HTONS_VOL_HP+0x10c>)
 8006ab8:	fb23 9802 	smlad	r8, r3, r2, r9
 8006abc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b34 <D32_1CH_HTONS_VOL_HP+0x110>)
 8006abe:	fb24 8802 	smlad	r8, r4, r2, r8
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	fb23 f302 	smuad	r3, r3, r2
 8006ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b38 <D32_1CH_HTONS_VOL_HP+0x114>)
 8006aca:	fb24 3902 	smlad	r9, r4, r2, r3
 8006ace:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 8006ad2:	19a2      	adds	r2, r4, r6
 8006ad4:	1a12      	subs	r2, r2, r0
 8006ad6:	17d1      	asrs	r1, r2, #31
 8006ad8:	fba2 230a 	umull	r2, r3, r2, sl
 8006adc:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8006ae0:	fb0a 3301 	mla	r3, sl, r1, r3
 8006ae4:	f143 0100 	adc.w	r1, r3, #0
 8006ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8006aec:	038a      	lsls	r2, r1, #14
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006af4:	2100      	movs	r1, #0
 8006af6:	fbc7 0102 	smlal	r0, r1, r7, r2
 8006afa:	108a      	asrs	r2, r1, #2
 8006afc:	005e      	lsls	r6, r3, #1
 8006afe:	f302 020f 	ssat	r2, #16, r2
 8006b02:	9b03      	ldr	r3, [sp, #12]
 8006b04:	f82e 2b02 	strh.w	r2, [lr], #2
 8006b08:	459e      	cmp	lr, r3
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	d1a7      	bne.n	8006a5e <D32_1CH_HTONS_VOL_HP+0x3a>
 8006b0e:	9a05      	ldr	r2, [sp, #20]
 8006b10:	464b      	mov	r3, r9
 8006b12:	e9c2 3802 	strd	r3, r8, [r2, #8]
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	61d5      	str	r5, [r2, #28]
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8006b20:	6193      	str	r3, [r2, #24]
 8006b22:	b007      	add	sp, #28
 8006b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b28:	463c      	mov	r4, r7
 8006b2a:	e7f2      	b.n	8006b12 <D32_1CH_HTONS_VOL_HP+0xee>
 8006b2c:	00060003 	.word	0x00060003
 8006b30:	000a000c 	.word	0x000a000c
 8006b34:	000c000a 	.word	0x000c000a
 8006b38:	00030006 	.word	0x00030006
 8006b3c:	2000000c 	.word	0x2000000c

08006b40 <D48_1CH_HTONS_VOL_HP>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	b087      	sub	sp, #28
 8006b46:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 8006b48:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8006b4a:	6993      	ldr	r3, [r2, #24]
 8006b4c:	9702      	str	r7, [sp, #8]
 8006b4e:	6a17      	ldr	r7, [r2, #32]
 8006b50:	9304      	str	r3, [sp, #16]
 8006b52:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 8006b56:	69d6      	ldr	r6, [r2, #28]
 8006b58:	9705      	str	r7, [sp, #20]
 8006b5a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8006b5e:	2d00      	cmp	r5, #0
 8006b60:	f000 8093 	beq.w	8006c8a <D48_1CH_HTONS_VOL_HP+0x14a>
 8006b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b68:	46ba      	mov	sl, r7
 8006b6a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8006b6e:	3902      	subs	r1, #2
 8006b70:	4f47      	ldr	r7, [pc, #284]	@ (8006c90 <D48_1CH_HTONS_VOL_HP+0x150>)
 8006b72:	9503      	str	r5, [sp, #12]
 8006b74:	9101      	str	r1, [sp, #4]
 8006b76:	469e      	mov	lr, r3
 8006b78:	9205      	str	r2, [sp, #20]
 8006b7a:	e9d0 3500 	ldrd	r3, r5, [r0]
 8006b7e:	3006      	adds	r0, #6
 8006b80:	ba5b      	rev16	r3, r3
 8006b82:	ba6d      	rev16	r5, r5
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8006b8a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8006b8e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8006b92:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8006b96:	0e1b      	lsrs	r3, r3, #24
 8006b98:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8006b9c:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8006ba0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8006ba4:	fa5f fb85 	uxtb.w	fp, r5
 8006ba8:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 8006bac:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8006bb0:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8006bb4:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 8006bb8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8006bbc:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8006bc0:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006bc4:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8006bc8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bd0:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 8006bd4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006bd8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006bdc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006be0:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 8006be4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8006be8:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 8006bec:	4b29      	ldr	r3, [pc, #164]	@ (8006c94 <D48_1CH_HTONS_VOL_HP+0x154>)
 8006bee:	fb22 c103 	smlad	r1, r2, r3, ip
 8006bf2:	4b29      	ldr	r3, [pc, #164]	@ (8006c98 <D48_1CH_HTONS_VOL_HP+0x158>)
 8006bf4:	fb28 1103 	smlad	r1, r8, r3, r1
 8006bf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006bfc:	fb25 1103 	smlad	r1, r5, r3, r1
 8006c00:	4b26      	ldr	r3, [pc, #152]	@ (8006c9c <D48_1CH_HTONS_VOL_HP+0x15c>)
 8006c02:	fb22 ec03 	smlad	ip, r2, r3, lr
 8006c06:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8006c0a:	fb28 cc03 	smlad	ip, r8, r3, ip
 8006c0e:	4b24      	ldr	r3, [pc, #144]	@ (8006ca0 <D48_1CH_HTONS_VOL_HP+0x160>)
 8006c10:	fb25 cc03 	smlad	ip, r5, r3, ip
 8006c14:	f04f 0e01 	mov.w	lr, #1
 8006c18:	fb22 f20e 	smuad	r2, r2, lr
 8006c1c:	4b21      	ldr	r3, [pc, #132]	@ (8006ca4 <D48_1CH_HTONS_VOL_HP+0x164>)
 8006c1e:	fb28 2803 	smlad	r8, r8, r3, r2
 8006c22:	4b21      	ldr	r3, [pc, #132]	@ (8006ca8 <D48_1CH_HTONS_VOL_HP+0x168>)
 8006c24:	fb25 8e03 	smlad	lr, r5, r3, r8
 8006c28:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 8006c2c:	190a      	adds	r2, r1, r4
 8006c2e:	eba2 0209 	sub.w	r2, r2, r9
 8006c32:	17d5      	asrs	r5, r2, #31
 8006c34:	fba2 230a 	umull	r2, r3, r2, sl
 8006c38:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8006c3c:	fb0a 3305 	mla	r3, sl, r5, r3
 8006c40:	f143 0500 	adc.w	r5, r3, #0
 8006c44:	9b02      	ldr	r3, [sp, #8]
 8006c46:	032a      	lsls	r2, r5, #12
 8006c48:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8006c4c:	f04f 0900 	mov.w	r9, #0
 8006c50:	fbc3 8902 	smlal	r8, r9, r3, r2
 8006c54:	9a01      	ldr	r2, [sp, #4]
 8006c56:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8006c5a:	f303 030f 	ssat	r3, #16, r3
 8006c5e:	f822 3f02 	strh.w	r3, [r2, #2]!
 8006c62:	9b03      	ldr	r3, [sp, #12]
 8006c64:	9201      	str	r2, [sp, #4]
 8006c66:	4283      	cmp	r3, r0
 8006c68:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8006c6c:	4689      	mov	r9, r1
 8006c6e:	d184      	bne.n	8006b7a <D48_1CH_HTONS_VOL_HP+0x3a>
 8006c70:	9a05      	ldr	r2, [sp, #20]
 8006c72:	4673      	mov	r3, lr
 8006c74:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 8006c78:	9b04      	ldr	r3, [sp, #16]
 8006c7a:	61d6      	str	r6, [r2, #28]
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8006c82:	6193      	str	r3, [r2, #24]
 8006c84:	b007      	add	sp, #28
 8006c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	e7f2      	b.n	8006c74 <D48_1CH_HTONS_VOL_HP+0x134>
 8006c8e:	bf00      	nop
 8006c90:	2000000c 	.word	0x2000000c
 8006c94:	000f000a 	.word	0x000f000a
 8006c98:	00060003 	.word	0x00060003
 8006c9c:	00150019 	.word	0x00150019
 8006ca0:	00190015 	.word	0x00190015
 8006ca4:	00030006 	.word	0x00030006
 8006ca8:	000a000f 	.word	0x000a000f

08006cac <D64_1CH_HTONS_VOL_HP>:
 8006cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	b087      	sub	sp, #28
 8006cb2:	6913      	ldr	r3, [r2, #16]
 8006cb4:	9300      	str	r3, [sp, #0]
 8006cb6:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 8006cba:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8006cbc:	9601      	str	r6, [sp, #4]
 8006cbe:	4681      	mov	r9, r0
 8006cc0:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8006cc2:	6a16      	ldr	r6, [r2, #32]
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 8006cca:	69d3      	ldr	r3, [r2, #28]
 8006ccc:	9602      	str	r6, [sp, #8]
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f000 809d 	beq.w	8006e0e <D64_1CH_HTONS_VOL_HP+0x162>
 8006cd4:	468e      	mov	lr, r1
 8006cd6:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8006e48 <D64_1CH_HTONS_VOL_HP+0x19c>
 8006cda:	9205      	str	r2, [sp, #20]
 8006cdc:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8006ce0:	9103      	str	r1, [sp, #12]
 8006ce2:	4622      	mov	r2, r4
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	f859 3b08 	ldr.w	r3, [r9], #8
 8006cea:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8006cee:	ba5b      	rev16	r3, r3
 8006cf0:	ba76      	rev16	r6, r6
 8006cf2:	b2dc      	uxtb	r4, r3
 8006cf4:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8006cf8:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8006cfc:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8006d00:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8006d04:	0e1b      	lsrs	r3, r3, #24
 8006d06:	eb01 0b07 	add.w	fp, r1, r7
 8006d0a:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 8006d0e:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8006d12:	b2f1      	uxtb	r1, r6
 8006d14:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 8006d18:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006d1c:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 8006d20:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8006d24:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8006d28:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8006d2c:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 8006d30:	0e36      	lsrs	r6, r6, #24
 8006d32:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 8006d36:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8006d3a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8006d3e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8006d42:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8006d46:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8006d4a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006d4e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006d52:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d5a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006d5e:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 8006d62:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006d66:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8006d6a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006d6e:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 8006d72:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8006d76:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8006d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8006e28 <D64_1CH_HTONS_VOL_HP+0x17c>)
 8006d7c:	0ab1      	lsrs	r1, r6, #10
 8006d7e:	fb2b 8803 	smlad	r8, fp, r3, r8
 8006d82:	4b2a      	ldr	r3, [pc, #168]	@ (8006e2c <D64_1CH_HTONS_VOL_HP+0x180>)
 8006d84:	fb2a 8803 	smlad	r8, sl, r3, r8
 8006d88:	4b29      	ldr	r3, [pc, #164]	@ (8006e30 <D64_1CH_HTONS_VOL_HP+0x184>)
 8006d8a:	fb27 8803 	smlad	r8, r7, r3, r8
 8006d8e:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8006d92:	fb20 8604 	smlad	r6, r0, r4, r8
 8006d96:	4b27      	ldr	r3, [pc, #156]	@ (8006e34 <D64_1CH_HTONS_VOL_HP+0x188>)
 8006d98:	fb2b 5803 	smlad	r8, fp, r3, r5
 8006d9c:	fb20 8813 	smladx	r8, r0, r3, r8
 8006da0:	4b25      	ldr	r3, [pc, #148]	@ (8006e38 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8006da2:	fb2a 8803 	smlad	r8, sl, r3, r8
 8006da6:	fb27 8813 	smladx	r8, r7, r3, r8
 8006daa:	2401      	movs	r4, #1
 8006dac:	fb2b fb04 	smuad	fp, fp, r4
 8006db0:	4b22      	ldr	r3, [pc, #136]	@ (8006e3c <D64_1CH_HTONS_VOL_HP+0x190>)
 8006db2:	fb2a ba03 	smlad	sl, sl, r3, fp
 8006db6:	4b22      	ldr	r3, [pc, #136]	@ (8006e40 <D64_1CH_HTONS_VOL_HP+0x194>)
 8006db8:	fb27 a703 	smlad	r7, r7, r3, sl
 8006dbc:	4b21      	ldr	r3, [pc, #132]	@ (8006e44 <D64_1CH_HTONS_VOL_HP+0x198>)
 8006dbe:	fb20 7503 	smlad	r5, r0, r3, r7
 8006dc2:	9b00      	ldr	r3, [sp, #0]
 8006dc4:	9802      	ldr	r0, [sp, #8]
 8006dc6:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 8006dca:	4423      	add	r3, r4
 8006dcc:	1a9a      	subs	r2, r3, r2
 8006dce:	17d7      	asrs	r7, r2, #31
 8006dd0:	fba2 2300 	umull	r2, r3, r2, r0
 8006dd4:	fb00 3307 	mla	r3, r0, r7, r3
 8006dd8:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 8006ddc:	f143 0b00 	adc.w	fp, r3, #0
 8006de0:	9b01      	ldr	r3, [sp, #4]
 8006de2:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 8006de6:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8006dea:	2700      	movs	r7, #0
 8006dec:	fbc3 6702 	smlal	r6, r7, r3, r2
 8006df0:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8006df4:	10ba      	asrs	r2, r7, #2
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	f302 020f 	ssat	r2, #16, r2
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	f82e 2b02 	strh.w	r2, [lr], #2
 8006e02:	459e      	cmp	lr, r3
 8006e04:	4622      	mov	r2, r4
 8006e06:	f47f af6e 	bne.w	8006ce6 <D64_1CH_HTONS_VOL_HP+0x3a>
 8006e0a:	9a05      	ldr	r2, [sp, #20]
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	61d3      	str	r3, [r2, #28]
 8006e10:	9b00      	ldr	r3, [sp, #0]
 8006e12:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	6193      	str	r3, [r2, #24]
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	e9c2 5802 	strd	r5, r8, [r2, #8]
 8006e20:	b007      	add	sp, #28
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	bf00      	nop
 8006e28:	001c0015 	.word	0x001c0015
 8006e2c:	000f000a 	.word	0x000f000a
 8006e30:	00060003 	.word	0x00060003
 8006e34:	0024002a 	.word	0x0024002a
 8006e38:	002e0030 	.word	0x002e0030
 8006e3c:	00030006 	.word	0x00030006
 8006e40:	000a000f 	.word	0x000a000f
 8006e44:	0015001c 	.word	0x0015001c
 8006e48:	2000000c 	.word	0x2000000c

08006e4c <D80_1CH_HTONS_VOL_HP>:
 8006e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e50:	4615      	mov	r5, r2
 8006e52:	b089      	sub	sp, #36	@ 0x24
 8006e54:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 8006e58:	692b      	ldr	r3, [r5, #16]
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 8006e60:	9400      	str	r4, [sp, #0]
 8006e62:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8006e64:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8006e66:	9403      	str	r4, [sp, #12]
 8006e68:	6a2c      	ldr	r4, [r5, #32]
 8006e6a:	9306      	str	r3, [sp, #24]
 8006e6c:	9404      	str	r4, [sp, #16]
 8006e6e:	69eb      	ldr	r3, [r5, #28]
 8006e70:	2a00      	cmp	r2, #0
 8006e72:	f000 80d3 	beq.w	800701c <D80_1CH_HTONS_VOL_HP+0x1d0>
 8006e76:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006e7a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8006e7e:	9205      	str	r2, [sp, #20]
 8006e80:	4c67      	ldr	r4, [pc, #412]	@ (8007020 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8006e82:	9507      	str	r5, [sp, #28]
 8006e84:	1e8a      	subs	r2, r1, #2
 8006e86:	9202      	str	r2, [sp, #8]
 8006e88:	469b      	mov	fp, r3
 8006e8a:	6807      	ldr	r7, [r0, #0]
 8006e8c:	6842      	ldr	r2, [r0, #4]
 8006e8e:	6883      	ldr	r3, [r0, #8]
 8006e90:	300a      	adds	r0, #10
 8006e92:	ba7f      	rev16	r7, r7
 8006e94:	ba52      	rev16	r2, r2
 8006e96:	ba5b      	rev16	r3, r3
 8006e98:	b2fd      	uxtb	r5, r7
 8006e9a:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8006e9e:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 8006ea2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8006ea6:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8006eaa:	44f3      	add	fp, lr
 8006eac:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8006eb0:	0e3f      	lsrs	r7, r7, #24
 8006eb2:	fa5f fe82 	uxtb.w	lr, r2
 8006eb6:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8006eba:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 8006ebe:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8006ec2:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8006ec6:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8006eca:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8006ece:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8006ed2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8006ed6:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 8006eda:	0e12      	lsrs	r2, r2, #24
 8006edc:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8006ee0:	fa5f fe83 	uxtb.w	lr, r3
 8006ee4:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 8006ee8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006eec:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8006ef0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8006ef4:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8006ef8:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8006efc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006f00:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 8006f04:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8006f08:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006f0c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006f10:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006f14:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8006f18:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006f1c:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8006f20:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006f24:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 8006f28:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006f2c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006f30:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006f34:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8006f38:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8006f3c:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8006f40:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 8006f44:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8006f48:	4b36      	ldr	r3, [pc, #216]	@ (8007024 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8006f4a:	9a00      	ldr	r2, [sp, #0]
 8006f4c:	fb21 2303 	smlad	r3, r1, r3, r2
 8006f50:	4a35      	ldr	r2, [pc, #212]	@ (8007028 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8006f52:	fb27 3302 	smlad	r3, r7, r2, r3
 8006f56:	4a35      	ldr	r2, [pc, #212]	@ (800702c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8006f58:	fb25 3302 	smlad	r3, r5, r2, r3
 8006f5c:	4a34      	ldr	r2, [pc, #208]	@ (8007030 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8006f5e:	fb28 3302 	smlad	r3, r8, r2, r3
 8006f62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006f66:	fb2e 3302 	smlad	r3, lr, r2, r3
 8006f6a:	4a32      	ldr	r2, [pc, #200]	@ (8007034 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8006f6c:	fb21 cc02 	smlad	ip, r1, r2, ip
 8006f70:	4a31      	ldr	r2, [pc, #196]	@ (8007038 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8006f72:	fb27 cc02 	smlad	ip, r7, r2, ip
 8006f76:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 8006f7a:	fb25 c909 	smlad	r9, r5, r9, ip
 8006f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800703c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8006f80:	fb28 9902 	smlad	r9, r8, r2, r9
 8006f84:	4a2e      	ldr	r2, [pc, #184]	@ (8007040 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8006f86:	fb2e 9202 	smlad	r2, lr, r2, r9
 8006f8a:	f04f 0a01 	mov.w	sl, #1
 8006f8e:	9200      	str	r2, [sp, #0]
 8006f90:	fb21 fa0a 	smuad	sl, r1, sl
 8006f94:	4a2b      	ldr	r2, [pc, #172]	@ (8007044 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8006f96:	fb27 a702 	smlad	r7, r7, r2, sl
 8006f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8007048 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8006f9c:	fb25 7702 	smlad	r7, r5, r2, r7
 8006fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800704c <D80_1CH_HTONS_VOL_HP+0x200>)
 8006fa2:	fb28 7202 	smlad	r2, r8, r2, r7
 8006fa6:	4d2a      	ldr	r5, [pc, #168]	@ (8007050 <D80_1CH_HTONS_VOL_HP+0x204>)
 8006fa8:	fb2e 2c05 	smlad	ip, lr, r5, r2
 8006fac:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 8006fb0:	9b01      	ldr	r3, [sp, #4]
 8006fb2:	9903      	ldr	r1, [sp, #12]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	1b9e      	subs	r6, r3, r6
 8006fb8:	9b04      	ldr	r3, [sp, #16]
 8006fba:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8006fbe:	fba6 5603 	umull	r5, r6, r6, r3
 8006fc2:	fb03 6309 	mla	r3, r3, r9, r6
 8006fc6:	462e      	mov	r6, r5
 8006fc8:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8006fcc:	f143 0700 	adc.w	r7, r3, #0
 8006fd0:	02bb      	lsls	r3, r7, #10
 8006fd2:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8006fd6:	f04f 0900 	mov.w	r9, #0
 8006fda:	fbc1 8903 	smlal	r8, r9, r1, r3
 8006fde:	9902      	ldr	r1, [sp, #8]
 8006fe0:	007b      	lsls	r3, r7, #1
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8006fe8:	f303 030f 	ssat	r3, #16, r3
 8006fec:	f821 3f02 	strh.w	r3, [r1, #2]!
 8006ff0:	9b05      	ldr	r3, [sp, #20]
 8006ff2:	9102      	str	r1, [sp, #8]
 8006ff4:	4283      	cmp	r3, r0
 8006ff6:	4616      	mov	r6, r2
 8006ff8:	f47f af47 	bne.w	8006e8a <D80_1CH_HTONS_VOL_HP+0x3e>
 8006ffc:	9d07      	ldr	r5, [sp, #28]
 8006ffe:	465b      	mov	r3, fp
 8007000:	61eb      	str	r3, [r5, #28]
 8007002:	9b01      	ldr	r3, [sp, #4]
 8007004:	9900      	ldr	r1, [sp, #0]
 8007006:	f8c5 c008 	str.w	ip, [r5, #8]
 800700a:	e9c5 3204 	strd	r3, r2, [r5, #16]
 800700e:	9b06      	ldr	r3, [sp, #24]
 8007010:	60e9      	str	r1, [r5, #12]
 8007012:	2000      	movs	r0, #0
 8007014:	61ab      	str	r3, [r5, #24]
 8007016:	b009      	add	sp, #36	@ 0x24
 8007018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701c:	4632      	mov	r2, r6
 800701e:	e7ef      	b.n	8007000 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8007020:	2000000c 	.word	0x2000000c
 8007024:	002d0024 	.word	0x002d0024
 8007028:	001c0015 	.word	0x001c0015
 800702c:	000f000a 	.word	0x000f000a
 8007030:	00060003 	.word	0x00060003
 8007034:	0037003f 	.word	0x0037003f
 8007038:	00450049 	.word	0x00450049
 800703c:	00490045 	.word	0x00490045
 8007040:	003f0037 	.word	0x003f0037
 8007044:	00030006 	.word	0x00030006
 8007048:	000a000f 	.word	0x000a000f
 800704c:	0015001c 	.word	0x0015001c
 8007050:	0024002d 	.word	0x0024002d

08007054 <D128_1CH_HTONS_VOL_HP>:
 8007054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007058:	b093      	sub	sp, #76	@ 0x4c
 800705a:	6914      	ldr	r4, [r2, #16]
 800705c:	9404      	str	r4, [sp, #16]
 800705e:	6954      	ldr	r4, [r2, #20]
 8007060:	9406      	str	r4, [sp, #24]
 8007062:	6994      	ldr	r4, [r2, #24]
 8007064:	9410      	str	r4, [sp, #64]	@ 0x40
 8007066:	6894      	ldr	r4, [r2, #8]
 8007068:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 800706a:	9403      	str	r4, [sp, #12]
 800706c:	68d4      	ldr	r4, [r2, #12]
 800706e:	9211      	str	r2, [sp, #68]	@ 0x44
 8007070:	69d6      	ldr	r6, [r2, #28]
 8007072:	9402      	str	r4, [sp, #8]
 8007074:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007076:	6a12      	ldr	r2, [r2, #32]
 8007078:	940d      	str	r4, [sp, #52]	@ 0x34
 800707a:	920e      	str	r2, [sp, #56]	@ 0x38
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 814a 	beq.w	8007316 <D128_1CH_HTONS_VOL_HP+0x2c2>
 8007082:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007086:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007088:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 8007354 <D128_1CH_HTONS_VOL_HP+0x300>
 800708c:	9107      	str	r1, [sp, #28]
 800708e:	f100 0310 	add.w	r3, r0, #16
 8007092:	469b      	mov	fp, r3
 8007094:	9605      	str	r6, [sp, #20]
 8007096:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 800709a:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 800709e:	ba49      	rev16	r1, r1
 80070a0:	ba52      	rev16	r2, r2
 80070a2:	ba5b      	rev16	r3, r3
 80070a4:	fa90 fa90 	rev16.w	sl, r0
 80070a8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 80070ac:	b2cc      	uxtb	r4, r1
 80070ae:	9e05      	ldr	r6, [sp, #20]
 80070b0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80070b4:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 80070b8:	f3c1 4007 	ubfx	r0, r1, #16, #8
 80070bc:	0e09      	lsrs	r1, r1, #24
 80070be:	4426      	add	r6, r4
 80070c0:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 80070c4:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 80070c8:	b2d0      	uxtb	r0, r2
 80070ca:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80070ce:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80070d2:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 80070d6:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80070da:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 80070de:	f3c2 4007 	ubfx	r0, r2, #16, #8
 80070e2:	0e12      	lsrs	r2, r2, #24
 80070e4:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80070e8:	9401      	str	r4, [sp, #4]
 80070ea:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 80070ee:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80070f2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 80070f6:	9705      	str	r7, [sp, #20]
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 80070fe:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 8007102:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8007106:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800710a:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 800710e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007112:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8007116:	0e1b      	lsrs	r3, r3, #24
 8007118:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800711c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8007120:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8007124:	fa5f f38a 	uxtb.w	r3, sl
 8007128:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800712c:	960a      	str	r6, [sp, #40]	@ 0x28
 800712e:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8007132:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8007136:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800713a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800713e:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007140:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8007144:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8007148:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800714c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8007150:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8007154:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8007158:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800715c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8007160:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8007164:	9308      	str	r3, [sp, #32]
 8007166:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800716a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800716e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007170:	9b01      	ldr	r3, [sp, #4]
 8007172:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007174:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8007178:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800717c:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8007180:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8007184:	9b05      	ldr	r3, [sp, #20]
 8007186:	f8cd 9014 	str.w	r9, [sp, #20]
 800718a:	4691      	mov	r9, r2
 800718c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800718e:	f8cd a004 	str.w	sl, [sp, #4]
 8007192:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 8007196:	9a01      	ldr	r2, [sp, #4]
 8007198:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800719c:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	9a05      	ldr	r2, [sp, #20]
 80071a4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80071a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80071ac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071ae:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80071b2:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80071b6:	9201      	str	r2, [sp, #4]
 80071b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071ba:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80071be:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80071c2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80071c6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80071ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80071ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80071d2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80071d6:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80071da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071de:	0a92      	lsrs	r2, r2, #10
 80071e0:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 80071e4:	9205      	str	r2, [sp, #20]
 80071e6:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80071ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80071ee:	4d4b      	ldr	r5, [pc, #300]	@ (800731c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 80071f0:	9a02      	ldr	r2, [sp, #8]
 80071f2:	fb29 2505 	smlad	r5, r9, r5, r2
 80071f6:	4a4a      	ldr	r2, [pc, #296]	@ (8007320 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 80071f8:	fb2a 5502 	smlad	r5, sl, r2, r5
 80071fc:	4a49      	ldr	r2, [pc, #292]	@ (8007324 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 80071fe:	fb21 5502 	smlad	r5, r1, r2, r5
 8007202:	4a49      	ldr	r2, [pc, #292]	@ (8007328 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8007204:	fb24 5502 	smlad	r5, r4, r2, r5
 8007208:	4a48      	ldr	r2, [pc, #288]	@ (800732c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800720a:	9e01      	ldr	r6, [sp, #4]
 800720c:	fb26 5502 	smlad	r5, r6, r2, r5
 8007210:	4a47      	ldr	r2, [pc, #284]	@ (8007330 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8007212:	fb20 5502 	smlad	r5, r0, r2, r5
 8007216:	4a47      	ldr	r2, [pc, #284]	@ (8007334 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8007218:	fb23 5502 	smlad	r5, r3, r2, r5
 800721c:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8007220:	fb27 520c 	smlad	r2, r7, ip, r5
 8007224:	4616      	mov	r6, r2
 8007226:	9d03      	ldr	r5, [sp, #12]
 8007228:	4a43      	ldr	r2, [pc, #268]	@ (8007338 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800722a:	fb29 5c02 	smlad	ip, r9, r2, r5
 800722e:	4a43      	ldr	r2, [pc, #268]	@ (800733c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8007230:	fb2a ce02 	smlad	lr, sl, r2, ip
 8007234:	f8df c120 	ldr.w	ip, [pc, #288]	@ 8007358 <D128_1CH_HTONS_VOL_HP+0x304>
 8007238:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800723c:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 800735c <D128_1CH_HTONS_VOL_HP+0x308>
 8007240:	fb24 cc0e 	smlad	ip, r4, lr, ip
 8007244:	f8df e118 	ldr.w	lr, [pc, #280]	@ 8007360 <D128_1CH_HTONS_VOL_HP+0x30c>
 8007248:	9d01      	ldr	r5, [sp, #4]
 800724a:	fb25 ce0e 	smlad	lr, r5, lr, ip
 800724e:	f8df c114 	ldr.w	ip, [pc, #276]	@ 8007364 <D128_1CH_HTONS_VOL_HP+0x310>
 8007252:	fb20 ee0c 	smlad	lr, r0, ip, lr
 8007256:	f8df c110 	ldr.w	ip, [pc, #272]	@ 8007368 <D128_1CH_HTONS_VOL_HP+0x314>
 800725a:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800725e:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 800736c <D128_1CH_HTONS_VOL_HP+0x318>
 8007262:	fb27 c20e 	smlad	r2, r7, lr, ip
 8007266:	f04f 0c01 	mov.w	ip, #1
 800726a:	9202      	str	r2, [sp, #8]
 800726c:	fb29 fc0c 	smuad	ip, r9, ip
 8007270:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8007370 <D128_1CH_HTONS_VOL_HP+0x31c>
 8007274:	fb2a ca09 	smlad	sl, sl, r9, ip
 8007278:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 8007374 <D128_1CH_HTONS_VOL_HP+0x320>
 800727c:	fb21 a909 	smlad	r9, r1, r9, sl
 8007280:	492f      	ldr	r1, [pc, #188]	@ (8007340 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8007282:	fb24 9901 	smlad	r9, r4, r1, r9
 8007286:	492f      	ldr	r1, [pc, #188]	@ (8007344 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8007288:	fb25 9901 	smlad	r9, r5, r1, r9
 800728c:	492e      	ldr	r1, [pc, #184]	@ (8007348 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800728e:	fb20 9901 	smlad	r9, r0, r1, r9
 8007292:	492e      	ldr	r1, [pc, #184]	@ (800734c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8007294:	fb23 9301 	smlad	r3, r3, r1, r9
 8007298:	482d      	ldr	r0, [pc, #180]	@ (8007350 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800729a:	fb27 3300 	smlad	r3, r7, r0, r3
 800729e:	9303      	str	r3, [sp, #12]
 80072a0:	9b04      	ldr	r3, [sp, #16]
 80072a2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80072a4:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 80072a8:	442b      	add	r3, r5
 80072aa:	461a      	mov	r2, r3
 80072ac:	9b06      	ldr	r3, [sp, #24]
 80072ae:	9506      	str	r5, [sp, #24]
 80072b0:	1ad2      	subs	r2, r2, r3
 80072b2:	17d1      	asrs	r1, r2, #31
 80072b4:	fba2 2304 	umull	r2, r3, r2, r4
 80072b8:	fb04 3301 	mla	r3, r4, r1, r3
 80072bc:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 80072c0:	f143 0a00 	adc.w	sl, r3, #0
 80072c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072c6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80072ca:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80072ce:	2100      	movs	r1, #0
 80072d0:	fbc3 0102 	smlal	r0, r1, r3, r2
 80072d4:	9b07      	ldr	r3, [sp, #28]
 80072d6:	108a      	asrs	r2, r1, #2
 80072d8:	f302 020f 	ssat	r2, #16, r2
 80072dc:	f823 2b02 	strh.w	r2, [r3], #2
 80072e0:	ea4f 024a 	mov.w	r2, sl, lsl #1
 80072e4:	9204      	str	r2, [sp, #16]
 80072e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80072e8:	9307      	str	r3, [sp, #28]
 80072ea:	4293      	cmp	r3, r2
 80072ec:	f10b 0b10 	add.w	fp, fp, #16
 80072f0:	f47f aed1 	bne.w	8007096 <D128_1CH_HTONS_VOL_HP+0x42>
 80072f4:	9e05      	ldr	r6, [sp, #20]
 80072f6:	4629      	mov	r1, r5
 80072f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072fa:	9803      	ldr	r0, [sp, #12]
 80072fc:	6098      	str	r0, [r3, #8]
 80072fe:	9802      	ldr	r0, [sp, #8]
 8007300:	60d8      	str	r0, [r3, #12]
 8007302:	9804      	ldr	r0, [sp, #16]
 8007304:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007306:	61de      	str	r6, [r3, #28]
 8007308:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800730c:	2000      	movs	r0, #0
 800730e:	619a      	str	r2, [r3, #24]
 8007310:	b013      	add	sp, #76	@ 0x4c
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	9906      	ldr	r1, [sp, #24]
 8007318:	e7ee      	b.n	80072f8 <D128_1CH_HTONS_VOL_HP+0x2a4>
 800731a:	bf00      	nop
 800731c:	00780069 	.word	0x00780069
 8007320:	005b004e 	.word	0x005b004e
 8007324:	00420037 	.word	0x00420037
 8007328:	002d0024 	.word	0x002d0024
 800732c:	001c0015 	.word	0x001c0015
 8007330:	000f000a 	.word	0x000f000a
 8007334:	00060003 	.word	0x00060003
 8007338:	00880096 	.word	0x00880096
 800733c:	00a200ac 	.word	0x00a200ac
 8007340:	0015001c 	.word	0x0015001c
 8007344:	0024002d 	.word	0x0024002d
 8007348:	00370042 	.word	0x00370042
 800734c:	004e005b 	.word	0x004e005b
 8007350:	00690078 	.word	0x00690078
 8007354:	2000000c 	.word	0x2000000c
 8007358:	00b400ba 	.word	0x00b400ba
 800735c:	00be00c0 	.word	0x00be00c0
 8007360:	00c000be 	.word	0x00c000be
 8007364:	00ba00b4 	.word	0x00ba00b4
 8007368:	00ac00a2 	.word	0x00ac00a2
 800736c:	00960088 	.word	0x00960088
 8007370:	00030006 	.word	0x00030006
 8007374:	000a000f 	.word	0x000a000f

08007378 <PDM_Filter_Init>:
 8007378:	4a59      	ldr	r2, [pc, #356]	@ (80074e0 <PDM_Filter_Init+0x168>)
 800737a:	495a      	ldr	r1, [pc, #360]	@ (80074e4 <PDM_Filter_Init+0x16c>)
 800737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737e:	6813      	ldr	r3, [r2, #0]
 8007380:	f023 0301 	bic.w	r3, r3, #1
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	680b      	ldr	r3, [r1, #0]
 8007388:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800738c:	4013      	ands	r3, r2
 800738e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8007392:	42ab      	cmp	r3, r5
 8007394:	4604      	mov	r4, r0
 8007396:	d044      	beq.n	8007422 <PDM_Filter_Init+0xaa>
 8007398:	680b      	ldr	r3, [r1, #0]
 800739a:	f24c 2170 	movw	r1, #49776	@ 0xc270
 800739e:	401a      	ands	r2, r3
 80073a0:	428a      	cmp	r2, r1
 80073a2:	d03e      	beq.n	8007422 <PDM_Filter_Init+0xaa>
 80073a4:	4b50      	ldr	r3, [pc, #320]	@ (80074e8 <PDM_Filter_Init+0x170>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	6819      	ldr	r1, [r3, #0]
 80073ac:	2900      	cmp	r1, #0
 80073ae:	d1fc      	bne.n	80073aa <PDM_Filter_Init+0x32>
 80073b0:	4b4e      	ldr	r3, [pc, #312]	@ (80074ec <PDM_Filter_Init+0x174>)
 80073b2:	4a4f      	ldr	r2, [pc, #316]	@ (80074f0 <PDM_Filter_Init+0x178>)
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	4b4e      	ldr	r3, [pc, #312]	@ (80074f4 <PDM_Filter_Init+0x17c>)
 80073ba:	429a      	cmp	r2, r3
 80073bc:	f104 000c 	add.w	r0, r4, #12
 80073c0:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80073c4:	d047      	beq.n	8007456 <PDM_Filter_Init+0xde>
 80073c6:	f000 fb1c 	bl	8007a02 <memset>
 80073ca:	2300      	movs	r3, #0
 80073cc:	6463      	str	r3, [r4, #68]	@ 0x44
 80073ce:	8820      	ldrh	r0, [r4, #0]
 80073d0:	8963      	ldrh	r3, [r4, #10]
 80073d2:	8922      	ldrh	r2, [r4, #8]
 80073d4:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80073d6:	2801      	cmp	r0, #1
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	61a3      	str	r3, [r4, #24]
 80073de:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80073e2:	60e3      	str	r3, [r4, #12]
 80073e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80073e6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80073ea:	6423      	str	r3, [r4, #64]	@ 0x40
 80073ec:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80073ee:	d93a      	bls.n	8007466 <PDM_Filter_Init+0xee>
 80073f0:	2003      	movs	r0, #3
 80073f2:	2302      	movs	r3, #2
 80073f4:	8862      	ldrh	r2, [r4, #2]
 80073f6:	2a01      	cmp	r2, #1
 80073f8:	d932      	bls.n	8007460 <PDM_Filter_Init+0xe8>
 80073fa:	2140      	movs	r1, #64	@ 0x40
 80073fc:	2300      	movs	r3, #0
 80073fe:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8007400:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8007404:	6862      	ldr	r2, [r4, #4]
 8007406:	bf04      	itt	eq
 8007408:	6421      	streq	r1, [r4, #64]	@ 0x40
 800740a:	460b      	moveq	r3, r1
 800740c:	b11a      	cbz	r2, 8007416 <PDM_Filter_Init+0x9e>
 800740e:	f043 0310 	orr.w	r3, r3, #16
 8007412:	6423      	str	r3, [r4, #64]	@ 0x40
 8007414:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8007416:	2200      	movs	r2, #0
 8007418:	8722      	strh	r2, [r4, #56]	@ 0x38
 800741a:	b908      	cbnz	r0, 8007420 <PDM_Filter_Init+0xa8>
 800741c:	3380      	adds	r3, #128	@ 0x80
 800741e:	6423      	str	r3, [r4, #64]	@ 0x40
 8007420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007422:	4b35      	ldr	r3, [pc, #212]	@ (80074f8 <PDM_Filter_Init+0x180>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1bc      	bne.n	80073a4 <PDM_Filter_Init+0x2c>
 800742a:	4a34      	ldr	r2, [pc, #208]	@ (80074fc <PDM_Filter_Init+0x184>)
 800742c:	6813      	ldr	r3, [r2, #0]
 800742e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007432:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007436:	d006      	beq.n	8007446 <PDM_Filter_Init+0xce>
 8007438:	6813      	ldr	r3, [r2, #0]
 800743a:	f240 4283 	movw	r2, #1155	@ 0x483
 800743e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007442:	4293      	cmp	r3, r2
 8007444:	d1ae      	bne.n	80073a4 <PDM_Filter_Init+0x2c>
 8007446:	4b2e      	ldr	r3, [pc, #184]	@ (8007500 <PDM_Filter_Init+0x188>)
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	6819      	ldr	r1, [r3, #0]
 800744e:	2900      	cmp	r1, #0
 8007450:	d1fc      	bne.n	800744c <PDM_Filter_Init+0xd4>
 8007452:	4b2c      	ldr	r3, [pc, #176]	@ (8007504 <PDM_Filter_Init+0x18c>)
 8007454:	e7ad      	b.n	80073b2 <PDM_Filter_Init+0x3a>
 8007456:	f000 fad4 	bl	8007a02 <memset>
 800745a:	4b26      	ldr	r3, [pc, #152]	@ (80074f4 <PDM_Filter_Init+0x17c>)
 800745c:	6463      	str	r3, [r4, #68]	@ 0x44
 800745e:	e7b6      	b.n	80073ce <PDM_Filter_Init+0x56>
 8007460:	d038      	beq.n	80074d4 <PDM_Filter_Init+0x15c>
 8007462:	4618      	mov	r0, r3
 8007464:	e7c9      	b.n	80073fa <PDM_Filter_Init+0x82>
 8007466:	4d28      	ldr	r5, [pc, #160]	@ (8007508 <PDM_Filter_Init+0x190>)
 8007468:	782a      	ldrb	r2, [r5, #0]
 800746a:	d01a      	beq.n	80074a2 <PDM_Filter_Init+0x12a>
 800746c:	2a01      	cmp	r2, #1
 800746e:	d001      	beq.n	8007474 <PDM_Filter_Init+0xfc>
 8007470:	2001      	movs	r0, #1
 8007472:	e7bf      	b.n	80073f4 <PDM_Filter_Init+0x7c>
 8007474:	4925      	ldr	r1, [pc, #148]	@ (800750c <PDM_Filter_Init+0x194>)
 8007476:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 8007514 <PDM_Filter_Init+0x19c>
 800747a:	4f25      	ldr	r7, [pc, #148]	@ (8007510 <PDM_Filter_Init+0x198>)
 800747c:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8007480:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8007484:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8007488:	ea02 0007 	and.w	r0, r2, r7
 800748c:	4303      	orrs	r3, r0
 800748e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8007492:	4413      	add	r3, r2
 8007494:	428e      	cmp	r6, r1
 8007496:	600b      	str	r3, [r1, #0]
 8007498:	d1f2      	bne.n	8007480 <PDM_Filter_Init+0x108>
 800749a:	2300      	movs	r3, #0
 800749c:	702b      	strb	r3, [r5, #0]
 800749e:	2001      	movs	r0, #1
 80074a0:	e7a8      	b.n	80073f4 <PDM_Filter_Init+0x7c>
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	d1a6      	bne.n	80073f4 <PDM_Filter_Init+0x7c>
 80074a6:	4919      	ldr	r1, [pc, #100]	@ (800750c <PDM_Filter_Init+0x194>)
 80074a8:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8007514 <PDM_Filter_Init+0x19c>
 80074ac:	4f18      	ldr	r7, [pc, #96]	@ (8007510 <PDM_Filter_Init+0x198>)
 80074ae:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 80074b2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80074b6:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 80074ba:	ea02 0007 	and.w	r0, r2, r7
 80074be:	4303      	orrs	r3, r0
 80074c0:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80074c4:	4413      	add	r3, r2
 80074c6:	428e      	cmp	r6, r1
 80074c8:	600b      	str	r3, [r1, #0]
 80074ca:	d1f2      	bne.n	80074b2 <PDM_Filter_Init+0x13a>
 80074cc:	2001      	movs	r0, #1
 80074ce:	7028      	strb	r0, [r5, #0]
 80074d0:	2300      	movs	r3, #0
 80074d2:	e78f      	b.n	80073f4 <PDM_Filter_Init+0x7c>
 80074d4:	2220      	movs	r2, #32
 80074d6:	4618      	mov	r0, r3
 80074d8:	6422      	str	r2, [r4, #64]	@ 0x40
 80074da:	4613      	mov	r3, r2
 80074dc:	2160      	movs	r1, #96	@ 0x60
 80074de:	e78e      	b.n	80073fe <PDM_Filter_Init+0x86>
 80074e0:	e0002000 	.word	0xe0002000
 80074e4:	e000ed00 	.word	0xe000ed00
 80074e8:	40023008 	.word	0x40023008
 80074ec:	40023000 	.word	0x40023000
 80074f0:	f407a5c2 	.word	0xf407a5c2
 80074f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80074f8:	e0042000 	.word	0xe0042000
 80074fc:	5c001000 	.word	0x5c001000
 8007500:	58024c08 	.word	0x58024c08
 8007504:	58024c00 	.word	0x58024c00
 8007508:	20001686 	.word	0x20001686
 800750c:	20000008 	.word	0x20000008
 8007510:	000ffc00 	.word	0x000ffc00
 8007514:	3ff00000 	.word	0x3ff00000

08007518 <PDM_Filter_setConfig>:
 8007518:	4b6d      	ldr	r3, [pc, #436]	@ (80076d0 <PDM_Filter_setConfig+0x1b8>)
 800751a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800751c:	429a      	cmp	r2, r3
 800751e:	d12f      	bne.n	8007580 <PDM_Filter_setConfig+0x68>
 8007520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007522:	880e      	ldrh	r6, [r1, #0]
 8007524:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007526:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800752a:	ed2d 8b02 	vpush	{d8}
 800752e:	4604      	mov	r4, r0
 8007530:	1e72      	subs	r2, r6, #1
 8007532:	460d      	mov	r5, r1
 8007534:	2a06      	cmp	r2, #6
 8007536:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800753a:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 800753e:	6421      	str	r1, [r4, #64]	@ 0x40
 8007540:	b083      	sub	sp, #12
 8007542:	d904      	bls.n	800754e <PDM_Filter_setConfig+0x36>
 8007544:	42b8      	cmp	r0, r7
 8007546:	f000 80bb 	beq.w	80076c0 <PDM_Filter_setConfig+0x1a8>
 800754a:	2008      	movs	r0, #8
 800754c:	e01d      	b.n	800758a <PDM_Filter_setConfig+0x72>
 800754e:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8007550:	42b2      	cmp	r2, r6
 8007552:	d070      	beq.n	8007636 <PDM_Filter_setConfig+0x11e>
 8007554:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8007558:	f023 0301 	bic.w	r3, r3, #1
 800755c:	4333      	orrs	r3, r6
 800755e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007562:	6423      	str	r3, [r4, #64]	@ 0x40
 8007564:	2a70      	cmp	r2, #112	@ 0x70
 8007566:	f003 030f 	and.w	r3, r3, #15
 800756a:	f103 33ff 	add.w	r3, r3, #4294967295
 800756e:	d067      	beq.n	8007640 <PDM_Filter_setConfig+0x128>
 8007570:	2b06      	cmp	r3, #6
 8007572:	d809      	bhi.n	8007588 <PDM_Filter_setConfig+0x70>
 8007574:	e8df f003 	tbb	[pc, r3]
 8007578:	89868380 	.word	0x89868380
 800757c:	8f8c      	.short	0x8f8c
 800757e:	7d          	.byte	0x7d
 800757f:	00          	.byte	0x00
 8007580:	2004      	movs	r0, #4
 8007582:	4770      	bx	lr
 8007584:	4b53      	ldr	r3, [pc, #332]	@ (80076d4 <PDM_Filter_setConfig+0x1bc>)
 8007586:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007588:	2000      	movs	r0, #0
 800758a:	f117 0f0c 	cmn.w	r7, #12
 800758e:	da0a      	bge.n	80075a6 <PDM_Filter_setConfig+0x8e>
 8007590:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 8007594:	3040      	adds	r0, #64	@ 0x40
 8007596:	80ab      	strh	r3, [r5, #4]
 8007598:	886b      	ldrh	r3, [r5, #2]
 800759a:	8663      	strh	r3, [r4, #50]	@ 0x32
 800759c:	8626      	strh	r6, [r4, #48]	@ 0x30
 800759e:	b003      	add	sp, #12
 80075a0:	ecbd 8b02 	vpop	{d8}
 80075a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a6:	2f33      	cmp	r7, #51	@ 0x33
 80075a8:	dc41      	bgt.n	800762e <PDM_Filter_setConfig+0x116>
 80075aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075ac:	f003 030f 	and.w	r3, r3, #15
 80075b0:	3b01      	subs	r3, #1
 80075b2:	2b06      	cmp	r3, #6
 80075b4:	d858      	bhi.n	8007668 <PDM_Filter_setConfig+0x150>
 80075b6:	4948      	ldr	r1, [pc, #288]	@ (80076d8 <PDM_Filter_setConfig+0x1c0>)
 80075b8:	4a48      	ldr	r2, [pc, #288]	@ (80076dc <PDM_Filter_setConfig+0x1c4>)
 80075ba:	eddf 0a49 	vldr	s1, [pc, #292]	@ 80076e0 <PDM_Filter_setConfig+0x1c8>
 80075be:	9001      	str	r0, [sp, #4]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4419      	add	r1, r3
 80075c4:	edd1 7a00 	vldr	s15, [r1]
 80075c8:	4413      	add	r3, r2
 80075ca:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80075ce:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80075d2:	ed93 8a00 	vldr	s16, [r3]
 80075d6:	f001 f8e3 	bl	80087a0 <powf>
 80075da:	9801      	ldr	r0, [sp, #4]
 80075dc:	eef0 8a40 	vmov.f32	s17, s0
 80075e0:	ee07 7a10 	vmov	s14, r7
 80075e4:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80076e4 <PDM_Filter_setConfig+0x1cc>
 80075e8:	9001      	str	r0, [sp, #4]
 80075ea:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 80075ee:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80075f2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80075f6:	f001 f8d3 	bl	80087a0 <powf>
 80075fa:	ee28 8a28 	vmul.f32	s16, s16, s17
 80075fe:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007602:	f001 f92f 	bl	8008864 <roundf>
 8007606:	9801      	ldr	r0, [sp, #4]
 8007608:	886b      	ldrh	r3, [r5, #2]
 800760a:	8663      	strh	r3, [r4, #50]	@ 0x32
 800760c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8007610:	8727      	strh	r7, [r4, #56]	@ 0x38
 8007612:	8626      	strh	r6, [r4, #48]	@ 0x30
 8007614:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 8007618:	2800      	cmp	r0, #0
 800761a:	d1c0      	bne.n	800759e <PDM_Filter_setConfig+0x86>
 800761c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800761e:	2000      	movs	r0, #0
 8007620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007624:	6423      	str	r3, [r4, #64]	@ 0x40
 8007626:	b003      	add	sp, #12
 8007628:	ecbd 8b02 	vpop	{d8}
 800762c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800762e:	2333      	movs	r3, #51	@ 0x33
 8007630:	3040      	adds	r0, #64	@ 0x40
 8007632:	80ab      	strh	r3, [r5, #4]
 8007634:	e7b0      	b.n	8007598 <PDM_Filter_setConfig+0x80>
 8007636:	42b8      	cmp	r0, r7
 8007638:	d1a6      	bne.n	8007588 <PDM_Filter_setConfig+0x70>
 800763a:	886b      	ldrh	r3, [r5, #2]
 800763c:	8663      	strh	r3, [r4, #50]	@ 0x32
 800763e:	e7ed      	b.n	800761c <PDM_Filter_setConfig+0x104>
 8007640:	2b06      	cmp	r3, #6
 8007642:	d8a1      	bhi.n	8007588 <PDM_Filter_setConfig+0x70>
 8007644:	a201      	add	r2, pc, #4	@ (adr r2, 800764c <PDM_Filter_setConfig+0x134>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	080076bb 	.word	0x080076bb
 8007650:	080076b5 	.word	0x080076b5
 8007654:	080076a9 	.word	0x080076a9
 8007658:	080076a3 	.word	0x080076a3
 800765c:	08007585 	.word	0x08007585
 8007660:	0800769d 	.word	0x0800769d
 8007664:	080076af 	.word	0x080076af
 8007668:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 80076e8 <PDM_Filter_setConfig+0x1d0>
 800766c:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 80076ec <PDM_Filter_setConfig+0x1d4>
 8007670:	e7b6      	b.n	80075e0 <PDM_Filter_setConfig+0xc8>
 8007672:	4b1f      	ldr	r3, [pc, #124]	@ (80076f0 <PDM_Filter_setConfig+0x1d8>)
 8007674:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007676:	e787      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 8007678:	4b1e      	ldr	r3, [pc, #120]	@ (80076f4 <PDM_Filter_setConfig+0x1dc>)
 800767a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800767c:	e784      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 800767e:	4b1e      	ldr	r3, [pc, #120]	@ (80076f8 <PDM_Filter_setConfig+0x1e0>)
 8007680:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007682:	e781      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 8007684:	4b1d      	ldr	r3, [pc, #116]	@ (80076fc <PDM_Filter_setConfig+0x1e4>)
 8007686:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007688:	e77e      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 800768a:	4b1d      	ldr	r3, [pc, #116]	@ (8007700 <PDM_Filter_setConfig+0x1e8>)
 800768c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800768e:	e77b      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 8007690:	4b1c      	ldr	r3, [pc, #112]	@ (8007704 <PDM_Filter_setConfig+0x1ec>)
 8007692:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007694:	e778      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 8007696:	4b1c      	ldr	r3, [pc, #112]	@ (8007708 <PDM_Filter_setConfig+0x1f0>)
 8007698:	64a3      	str	r3, [r4, #72]	@ 0x48
 800769a:	e775      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 800769c:	4b1b      	ldr	r3, [pc, #108]	@ (800770c <PDM_Filter_setConfig+0x1f4>)
 800769e:	64a3      	str	r3, [r4, #72]	@ 0x48
 80076a0:	e772      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 80076a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007710 <PDM_Filter_setConfig+0x1f8>)
 80076a4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80076a6:	e76f      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 80076a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007714 <PDM_Filter_setConfig+0x1fc>)
 80076aa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80076ac:	e76c      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 80076ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007718 <PDM_Filter_setConfig+0x200>)
 80076b0:	64a3      	str	r3, [r4, #72]	@ 0x48
 80076b2:	e769      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 80076b4:	4b19      	ldr	r3, [pc, #100]	@ (800771c <PDM_Filter_setConfig+0x204>)
 80076b6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80076b8:	e766      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 80076ba:	4b19      	ldr	r3, [pc, #100]	@ (8007720 <PDM_Filter_setConfig+0x208>)
 80076bc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80076be:	e763      	b.n	8007588 <PDM_Filter_setConfig+0x70>
 80076c0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80076c2:	42b3      	cmp	r3, r6
 80076c4:	f47f af41 	bne.w	800754a <PDM_Filter_setConfig+0x32>
 80076c8:	886b      	ldrh	r3, [r5, #2]
 80076ca:	8663      	strh	r3, [r4, #50]	@ 0x32
 80076cc:	2008      	movs	r0, #8
 80076ce:	e766      	b.n	800759e <PDM_Filter_setConfig+0x86>
 80076d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80076d4:	080067f9 	.word	0x080067f9
 80076d8:	0800a05c 	.word	0x0800a05c
 80076dc:	0800a078 	.word	0x0800a078
 80076e0:	42000000 	.word	0x42000000
 80076e4:	3d4ccccd 	.word	0x3d4ccccd
 80076e8:	4f800000 	.word	0x4f800000
 80076ec:	00000000 	.word	0x00000000
 80076f0:	08005bf9 	.word	0x08005bf9
 80076f4:	08005d81 	.word	0x08005d81
 80076f8:	08005f69 	.word	0x08005f69
 80076fc:	08006185 	.word	0x08006185
 8007700:	08006419 	.word	0x08006419
 8007704:	08005959 	.word	0x08005959
 8007708:	08005a71 	.word	0x08005a71
 800770c:	080068e1 	.word	0x080068e1
 8007710:	08007055 	.word	0x08007055
 8007714:	08006e4d 	.word	0x08006e4d
 8007718:	08006a25 	.word	0x08006a25
 800771c:	08006cad 	.word	0x08006cad
 8007720:	08006b41 	.word	0x08006b41

08007724 <PDM_Filter>:
 8007724:	b410      	push	{r4}
 8007726:	4b0b      	ldr	r3, [pc, #44]	@ (8007754 <PDM_Filter+0x30>)
 8007728:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800772a:	429c      	cmp	r4, r3
 800772c:	d107      	bne.n	800773e <PDM_Filter+0x1a>
 800772e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007730:	05dc      	lsls	r4, r3, #23
 8007732:	d508      	bpl.n	8007746 <PDM_Filter+0x22>
 8007734:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8007736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800773a:	320c      	adds	r2, #12
 800773c:	4718      	bx	r3
 800773e:	2004      	movs	r0, #4
 8007740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800774a:	bf14      	ite	ne
 800774c:	2020      	movne	r0, #32
 800774e:	2030      	moveq	r0, #48	@ 0x30
 8007750:	e7f6      	b.n	8007740 <PDM_Filter+0x1c>
 8007752:	bf00      	nop
 8007754:	b5e8b5cd 	.word	0xb5e8b5cd

08007758 <rand>:
 8007758:	4b16      	ldr	r3, [pc, #88]	@ (80077b4 <rand+0x5c>)
 800775a:	b510      	push	{r4, lr}
 800775c:	681c      	ldr	r4, [r3, #0]
 800775e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007760:	b9b3      	cbnz	r3, 8007790 <rand+0x38>
 8007762:	2018      	movs	r0, #24
 8007764:	f000 fa32 	bl	8007bcc <malloc>
 8007768:	4602      	mov	r2, r0
 800776a:	6320      	str	r0, [r4, #48]	@ 0x30
 800776c:	b920      	cbnz	r0, 8007778 <rand+0x20>
 800776e:	4b12      	ldr	r3, [pc, #72]	@ (80077b8 <rand+0x60>)
 8007770:	4812      	ldr	r0, [pc, #72]	@ (80077bc <rand+0x64>)
 8007772:	2152      	movs	r1, #82	@ 0x52
 8007774:	f000 f9c2 	bl	8007afc <__assert_func>
 8007778:	4911      	ldr	r1, [pc, #68]	@ (80077c0 <rand+0x68>)
 800777a:	4b12      	ldr	r3, [pc, #72]	@ (80077c4 <rand+0x6c>)
 800777c:	e9c0 1300 	strd	r1, r3, [r0]
 8007780:	4b11      	ldr	r3, [pc, #68]	@ (80077c8 <rand+0x70>)
 8007782:	6083      	str	r3, [r0, #8]
 8007784:	230b      	movs	r3, #11
 8007786:	8183      	strh	r3, [r0, #12]
 8007788:	2100      	movs	r1, #0
 800778a:	2001      	movs	r0, #1
 800778c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007790:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007792:	480e      	ldr	r0, [pc, #56]	@ (80077cc <rand+0x74>)
 8007794:	690b      	ldr	r3, [r1, #16]
 8007796:	694c      	ldr	r4, [r1, #20]
 8007798:	4a0d      	ldr	r2, [pc, #52]	@ (80077d0 <rand+0x78>)
 800779a:	4358      	muls	r0, r3
 800779c:	fb02 0004 	mla	r0, r2, r4, r0
 80077a0:	fba3 3202 	umull	r3, r2, r3, r2
 80077a4:	3301      	adds	r3, #1
 80077a6:	eb40 0002 	adc.w	r0, r0, r2
 80077aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80077ae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80077b2:	bd10      	pop	{r4, pc}
 80077b4:	20000418 	.word	0x20000418
 80077b8:	0800a094 	.word	0x0800a094
 80077bc:	0800a0ab 	.word	0x0800a0ab
 80077c0:	abcd330e 	.word	0xabcd330e
 80077c4:	e66d1234 	.word	0xe66d1234
 80077c8:	0005deec 	.word	0x0005deec
 80077cc:	5851f42d 	.word	0x5851f42d
 80077d0:	4c957f2d 	.word	0x4c957f2d

080077d4 <std>:
 80077d4:	2300      	movs	r3, #0
 80077d6:	b510      	push	{r4, lr}
 80077d8:	4604      	mov	r4, r0
 80077da:	e9c0 3300 	strd	r3, r3, [r0]
 80077de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077e2:	6083      	str	r3, [r0, #8]
 80077e4:	8181      	strh	r1, [r0, #12]
 80077e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80077e8:	81c2      	strh	r2, [r0, #14]
 80077ea:	6183      	str	r3, [r0, #24]
 80077ec:	4619      	mov	r1, r3
 80077ee:	2208      	movs	r2, #8
 80077f0:	305c      	adds	r0, #92	@ 0x5c
 80077f2:	f000 f906 	bl	8007a02 <memset>
 80077f6:	4b0d      	ldr	r3, [pc, #52]	@ (800782c <std+0x58>)
 80077f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80077fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007830 <std+0x5c>)
 80077fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007834 <std+0x60>)
 8007800:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007802:	4b0d      	ldr	r3, [pc, #52]	@ (8007838 <std+0x64>)
 8007804:	6323      	str	r3, [r4, #48]	@ 0x30
 8007806:	4b0d      	ldr	r3, [pc, #52]	@ (800783c <std+0x68>)
 8007808:	6224      	str	r4, [r4, #32]
 800780a:	429c      	cmp	r4, r3
 800780c:	d006      	beq.n	800781c <std+0x48>
 800780e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007812:	4294      	cmp	r4, r2
 8007814:	d002      	beq.n	800781c <std+0x48>
 8007816:	33d0      	adds	r3, #208	@ 0xd0
 8007818:	429c      	cmp	r4, r3
 800781a:	d105      	bne.n	8007828 <std+0x54>
 800781c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007824:	f000 b966 	b.w	8007af4 <__retarget_lock_init_recursive>
 8007828:	bd10      	pop	{r4, pc}
 800782a:	bf00      	nop
 800782c:	0800797d 	.word	0x0800797d
 8007830:	0800799f 	.word	0x0800799f
 8007834:	080079d7 	.word	0x080079d7
 8007838:	080079fb 	.word	0x080079fb
 800783c:	20001688 	.word	0x20001688

08007840 <stdio_exit_handler>:
 8007840:	4a02      	ldr	r2, [pc, #8]	@ (800784c <stdio_exit_handler+0xc>)
 8007842:	4903      	ldr	r1, [pc, #12]	@ (8007850 <stdio_exit_handler+0x10>)
 8007844:	4803      	ldr	r0, [pc, #12]	@ (8007854 <stdio_exit_handler+0x14>)
 8007846:	f000 b869 	b.w	800791c <_fwalk_sglue>
 800784a:	bf00      	nop
 800784c:	2000040c 	.word	0x2000040c
 8007850:	080083dd 	.word	0x080083dd
 8007854:	2000041c 	.word	0x2000041c

08007858 <cleanup_stdio>:
 8007858:	6841      	ldr	r1, [r0, #4]
 800785a:	4b0c      	ldr	r3, [pc, #48]	@ (800788c <cleanup_stdio+0x34>)
 800785c:	4299      	cmp	r1, r3
 800785e:	b510      	push	{r4, lr}
 8007860:	4604      	mov	r4, r0
 8007862:	d001      	beq.n	8007868 <cleanup_stdio+0x10>
 8007864:	f000 fdba 	bl	80083dc <_fflush_r>
 8007868:	68a1      	ldr	r1, [r4, #8]
 800786a:	4b09      	ldr	r3, [pc, #36]	@ (8007890 <cleanup_stdio+0x38>)
 800786c:	4299      	cmp	r1, r3
 800786e:	d002      	beq.n	8007876 <cleanup_stdio+0x1e>
 8007870:	4620      	mov	r0, r4
 8007872:	f000 fdb3 	bl	80083dc <_fflush_r>
 8007876:	68e1      	ldr	r1, [r4, #12]
 8007878:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <cleanup_stdio+0x3c>)
 800787a:	4299      	cmp	r1, r3
 800787c:	d004      	beq.n	8007888 <cleanup_stdio+0x30>
 800787e:	4620      	mov	r0, r4
 8007880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007884:	f000 bdaa 	b.w	80083dc <_fflush_r>
 8007888:	bd10      	pop	{r4, pc}
 800788a:	bf00      	nop
 800788c:	20001688 	.word	0x20001688
 8007890:	200016f0 	.word	0x200016f0
 8007894:	20001758 	.word	0x20001758

08007898 <global_stdio_init.part.0>:
 8007898:	b510      	push	{r4, lr}
 800789a:	4b0b      	ldr	r3, [pc, #44]	@ (80078c8 <global_stdio_init.part.0+0x30>)
 800789c:	4c0b      	ldr	r4, [pc, #44]	@ (80078cc <global_stdio_init.part.0+0x34>)
 800789e:	4a0c      	ldr	r2, [pc, #48]	@ (80078d0 <global_stdio_init.part.0+0x38>)
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	4620      	mov	r0, r4
 80078a4:	2200      	movs	r2, #0
 80078a6:	2104      	movs	r1, #4
 80078a8:	f7ff ff94 	bl	80077d4 <std>
 80078ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078b0:	2201      	movs	r2, #1
 80078b2:	2109      	movs	r1, #9
 80078b4:	f7ff ff8e 	bl	80077d4 <std>
 80078b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078bc:	2202      	movs	r2, #2
 80078be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c2:	2112      	movs	r1, #18
 80078c4:	f7ff bf86 	b.w	80077d4 <std>
 80078c8:	200017c0 	.word	0x200017c0
 80078cc:	20001688 	.word	0x20001688
 80078d0:	08007841 	.word	0x08007841

080078d4 <__sfp_lock_acquire>:
 80078d4:	4801      	ldr	r0, [pc, #4]	@ (80078dc <__sfp_lock_acquire+0x8>)
 80078d6:	f000 b90e 	b.w	8007af6 <__retarget_lock_acquire_recursive>
 80078da:	bf00      	nop
 80078dc:	200017c9 	.word	0x200017c9

080078e0 <__sfp_lock_release>:
 80078e0:	4801      	ldr	r0, [pc, #4]	@ (80078e8 <__sfp_lock_release+0x8>)
 80078e2:	f000 b909 	b.w	8007af8 <__retarget_lock_release_recursive>
 80078e6:	bf00      	nop
 80078e8:	200017c9 	.word	0x200017c9

080078ec <__sinit>:
 80078ec:	b510      	push	{r4, lr}
 80078ee:	4604      	mov	r4, r0
 80078f0:	f7ff fff0 	bl	80078d4 <__sfp_lock_acquire>
 80078f4:	6a23      	ldr	r3, [r4, #32]
 80078f6:	b11b      	cbz	r3, 8007900 <__sinit+0x14>
 80078f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078fc:	f7ff bff0 	b.w	80078e0 <__sfp_lock_release>
 8007900:	4b04      	ldr	r3, [pc, #16]	@ (8007914 <__sinit+0x28>)
 8007902:	6223      	str	r3, [r4, #32]
 8007904:	4b04      	ldr	r3, [pc, #16]	@ (8007918 <__sinit+0x2c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1f5      	bne.n	80078f8 <__sinit+0xc>
 800790c:	f7ff ffc4 	bl	8007898 <global_stdio_init.part.0>
 8007910:	e7f2      	b.n	80078f8 <__sinit+0xc>
 8007912:	bf00      	nop
 8007914:	08007859 	.word	0x08007859
 8007918:	200017c0 	.word	0x200017c0

0800791c <_fwalk_sglue>:
 800791c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007920:	4607      	mov	r7, r0
 8007922:	4688      	mov	r8, r1
 8007924:	4614      	mov	r4, r2
 8007926:	2600      	movs	r6, #0
 8007928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800792c:	f1b9 0901 	subs.w	r9, r9, #1
 8007930:	d505      	bpl.n	800793e <_fwalk_sglue+0x22>
 8007932:	6824      	ldr	r4, [r4, #0]
 8007934:	2c00      	cmp	r4, #0
 8007936:	d1f7      	bne.n	8007928 <_fwalk_sglue+0xc>
 8007938:	4630      	mov	r0, r6
 800793a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800793e:	89ab      	ldrh	r3, [r5, #12]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d907      	bls.n	8007954 <_fwalk_sglue+0x38>
 8007944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007948:	3301      	adds	r3, #1
 800794a:	d003      	beq.n	8007954 <_fwalk_sglue+0x38>
 800794c:	4629      	mov	r1, r5
 800794e:	4638      	mov	r0, r7
 8007950:	47c0      	blx	r8
 8007952:	4306      	orrs	r6, r0
 8007954:	3568      	adds	r5, #104	@ 0x68
 8007956:	e7e9      	b.n	800792c <_fwalk_sglue+0x10>

08007958 <iprintf>:
 8007958:	b40f      	push	{r0, r1, r2, r3}
 800795a:	b507      	push	{r0, r1, r2, lr}
 800795c:	4906      	ldr	r1, [pc, #24]	@ (8007978 <iprintf+0x20>)
 800795e:	ab04      	add	r3, sp, #16
 8007960:	6808      	ldr	r0, [r1, #0]
 8007962:	f853 2b04 	ldr.w	r2, [r3], #4
 8007966:	6881      	ldr	r1, [r0, #8]
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	f000 fa0f 	bl	8007d8c <_vfiprintf_r>
 800796e:	b003      	add	sp, #12
 8007970:	f85d eb04 	ldr.w	lr, [sp], #4
 8007974:	b004      	add	sp, #16
 8007976:	4770      	bx	lr
 8007978:	20000418 	.word	0x20000418

0800797c <__sread>:
 800797c:	b510      	push	{r4, lr}
 800797e:	460c      	mov	r4, r1
 8007980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007984:	f000 f868 	bl	8007a58 <_read_r>
 8007988:	2800      	cmp	r0, #0
 800798a:	bfab      	itete	ge
 800798c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800798e:	89a3      	ldrhlt	r3, [r4, #12]
 8007990:	181b      	addge	r3, r3, r0
 8007992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007996:	bfac      	ite	ge
 8007998:	6563      	strge	r3, [r4, #84]	@ 0x54
 800799a:	81a3      	strhlt	r3, [r4, #12]
 800799c:	bd10      	pop	{r4, pc}

0800799e <__swrite>:
 800799e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a2:	461f      	mov	r7, r3
 80079a4:	898b      	ldrh	r3, [r1, #12]
 80079a6:	05db      	lsls	r3, r3, #23
 80079a8:	4605      	mov	r5, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	4616      	mov	r6, r2
 80079ae:	d505      	bpl.n	80079bc <__swrite+0x1e>
 80079b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b4:	2302      	movs	r3, #2
 80079b6:	2200      	movs	r2, #0
 80079b8:	f000 f83c 	bl	8007a34 <_lseek_r>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	4632      	mov	r2, r6
 80079ca:	463b      	mov	r3, r7
 80079cc:	4628      	mov	r0, r5
 80079ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079d2:	f000 b853 	b.w	8007a7c <_write_r>

080079d6 <__sseek>:
 80079d6:	b510      	push	{r4, lr}
 80079d8:	460c      	mov	r4, r1
 80079da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079de:	f000 f829 	bl	8007a34 <_lseek_r>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	bf15      	itete	ne
 80079e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079f2:	81a3      	strheq	r3, [r4, #12]
 80079f4:	bf18      	it	ne
 80079f6:	81a3      	strhne	r3, [r4, #12]
 80079f8:	bd10      	pop	{r4, pc}

080079fa <__sclose>:
 80079fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fe:	f000 b809 	b.w	8007a14 <_close_r>

08007a02 <memset>:
 8007a02:	4402      	add	r2, r0
 8007a04:	4603      	mov	r3, r0
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d100      	bne.n	8007a0c <memset+0xa>
 8007a0a:	4770      	bx	lr
 8007a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8007a10:	e7f9      	b.n	8007a06 <memset+0x4>
	...

08007a14 <_close_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d06      	ldr	r5, [pc, #24]	@ (8007a30 <_close_r+0x1c>)
 8007a18:	2300      	movs	r3, #0
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	602b      	str	r3, [r5, #0]
 8007a20:	f7fa faf4 	bl	800200c <_close>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_close_r+0x1a>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_close_r+0x1a>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	200017c4 	.word	0x200017c4

08007a34 <_lseek_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4d07      	ldr	r5, [pc, #28]	@ (8007a54 <_lseek_r+0x20>)
 8007a38:	4604      	mov	r4, r0
 8007a3a:	4608      	mov	r0, r1
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	2200      	movs	r2, #0
 8007a40:	602a      	str	r2, [r5, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f7fa fb09 	bl	800205a <_lseek>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d102      	bne.n	8007a52 <_lseek_r+0x1e>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b103      	cbz	r3, 8007a52 <_lseek_r+0x1e>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	200017c4 	.word	0x200017c4

08007a58 <_read_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4d07      	ldr	r5, [pc, #28]	@ (8007a78 <_read_r+0x20>)
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	4608      	mov	r0, r1
 8007a60:	4611      	mov	r1, r2
 8007a62:	2200      	movs	r2, #0
 8007a64:	602a      	str	r2, [r5, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f7fa fab3 	bl	8001fd2 <_read>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_read_r+0x1e>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_read_r+0x1e>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	200017c4 	.word	0x200017c4

08007a7c <_write_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4d07      	ldr	r5, [pc, #28]	@ (8007a9c <_write_r+0x20>)
 8007a80:	4604      	mov	r4, r0
 8007a82:	4608      	mov	r0, r1
 8007a84:	4611      	mov	r1, r2
 8007a86:	2200      	movs	r2, #0
 8007a88:	602a      	str	r2, [r5, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f7fa f854 	bl	8001b38 <_write>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_write_r+0x1e>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_write_r+0x1e>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	200017c4 	.word	0x200017c4

08007aa0 <__errno>:
 8007aa0:	4b01      	ldr	r3, [pc, #4]	@ (8007aa8 <__errno+0x8>)
 8007aa2:	6818      	ldr	r0, [r3, #0]
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	20000418 	.word	0x20000418

08007aac <__libc_init_array>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4d0d      	ldr	r5, [pc, #52]	@ (8007ae4 <__libc_init_array+0x38>)
 8007ab0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ae8 <__libc_init_array+0x3c>)
 8007ab2:	1b64      	subs	r4, r4, r5
 8007ab4:	10a4      	asrs	r4, r4, #2
 8007ab6:	2600      	movs	r6, #0
 8007ab8:	42a6      	cmp	r6, r4
 8007aba:	d109      	bne.n	8007ad0 <__libc_init_array+0x24>
 8007abc:	4d0b      	ldr	r5, [pc, #44]	@ (8007aec <__libc_init_array+0x40>)
 8007abe:	4c0c      	ldr	r4, [pc, #48]	@ (8007af0 <__libc_init_array+0x44>)
 8007ac0:	f002 faae 	bl	800a020 <_init>
 8007ac4:	1b64      	subs	r4, r4, r5
 8007ac6:	10a4      	asrs	r4, r4, #2
 8007ac8:	2600      	movs	r6, #0
 8007aca:	42a6      	cmp	r6, r4
 8007acc:	d105      	bne.n	8007ada <__libc_init_array+0x2e>
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad4:	4798      	blx	r3
 8007ad6:	3601      	adds	r6, #1
 8007ad8:	e7ee      	b.n	8007ab8 <__libc_init_array+0xc>
 8007ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ade:	4798      	blx	r3
 8007ae0:	3601      	adds	r6, #1
 8007ae2:	e7f2      	b.n	8007aca <__libc_init_array+0x1e>
 8007ae4:	0800a370 	.word	0x0800a370
 8007ae8:	0800a370 	.word	0x0800a370
 8007aec:	0800a370 	.word	0x0800a370
 8007af0:	0800a374 	.word	0x0800a374

08007af4 <__retarget_lock_init_recursive>:
 8007af4:	4770      	bx	lr

08007af6 <__retarget_lock_acquire_recursive>:
 8007af6:	4770      	bx	lr

08007af8 <__retarget_lock_release_recursive>:
 8007af8:	4770      	bx	lr
	...

08007afc <__assert_func>:
 8007afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007afe:	4614      	mov	r4, r2
 8007b00:	461a      	mov	r2, r3
 8007b02:	4b09      	ldr	r3, [pc, #36]	@ (8007b28 <__assert_func+0x2c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4605      	mov	r5, r0
 8007b08:	68d8      	ldr	r0, [r3, #12]
 8007b0a:	b14c      	cbz	r4, 8007b20 <__assert_func+0x24>
 8007b0c:	4b07      	ldr	r3, [pc, #28]	@ (8007b2c <__assert_func+0x30>)
 8007b0e:	9100      	str	r1, [sp, #0]
 8007b10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b14:	4906      	ldr	r1, [pc, #24]	@ (8007b30 <__assert_func+0x34>)
 8007b16:	462b      	mov	r3, r5
 8007b18:	f000 fc88 	bl	800842c <fiprintf>
 8007b1c:	f000 fd3c 	bl	8008598 <abort>
 8007b20:	4b04      	ldr	r3, [pc, #16]	@ (8007b34 <__assert_func+0x38>)
 8007b22:	461c      	mov	r4, r3
 8007b24:	e7f3      	b.n	8007b0e <__assert_func+0x12>
 8007b26:	bf00      	nop
 8007b28:	20000418 	.word	0x20000418
 8007b2c:	0800a103 	.word	0x0800a103
 8007b30:	0800a110 	.word	0x0800a110
 8007b34:	0800a13e 	.word	0x0800a13e

08007b38 <_free_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4605      	mov	r5, r0
 8007b3c:	2900      	cmp	r1, #0
 8007b3e:	d041      	beq.n	8007bc4 <_free_r+0x8c>
 8007b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b44:	1f0c      	subs	r4, r1, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bfb8      	it	lt
 8007b4a:	18e4      	addlt	r4, r4, r3
 8007b4c:	f000 f8e8 	bl	8007d20 <__malloc_lock>
 8007b50:	4a1d      	ldr	r2, [pc, #116]	@ (8007bc8 <_free_r+0x90>)
 8007b52:	6813      	ldr	r3, [r2, #0]
 8007b54:	b933      	cbnz	r3, 8007b64 <_free_r+0x2c>
 8007b56:	6063      	str	r3, [r4, #4]
 8007b58:	6014      	str	r4, [r2, #0]
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b60:	f000 b8e4 	b.w	8007d2c <__malloc_unlock>
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	d908      	bls.n	8007b7a <_free_r+0x42>
 8007b68:	6820      	ldr	r0, [r4, #0]
 8007b6a:	1821      	adds	r1, r4, r0
 8007b6c:	428b      	cmp	r3, r1
 8007b6e:	bf01      	itttt	eq
 8007b70:	6819      	ldreq	r1, [r3, #0]
 8007b72:	685b      	ldreq	r3, [r3, #4]
 8007b74:	1809      	addeq	r1, r1, r0
 8007b76:	6021      	streq	r1, [r4, #0]
 8007b78:	e7ed      	b.n	8007b56 <_free_r+0x1e>
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	b10b      	cbz	r3, 8007b84 <_free_r+0x4c>
 8007b80:	42a3      	cmp	r3, r4
 8007b82:	d9fa      	bls.n	8007b7a <_free_r+0x42>
 8007b84:	6811      	ldr	r1, [r2, #0]
 8007b86:	1850      	adds	r0, r2, r1
 8007b88:	42a0      	cmp	r0, r4
 8007b8a:	d10b      	bne.n	8007ba4 <_free_r+0x6c>
 8007b8c:	6820      	ldr	r0, [r4, #0]
 8007b8e:	4401      	add	r1, r0
 8007b90:	1850      	adds	r0, r2, r1
 8007b92:	4283      	cmp	r3, r0
 8007b94:	6011      	str	r1, [r2, #0]
 8007b96:	d1e0      	bne.n	8007b5a <_free_r+0x22>
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	6053      	str	r3, [r2, #4]
 8007b9e:	4408      	add	r0, r1
 8007ba0:	6010      	str	r0, [r2, #0]
 8007ba2:	e7da      	b.n	8007b5a <_free_r+0x22>
 8007ba4:	d902      	bls.n	8007bac <_free_r+0x74>
 8007ba6:	230c      	movs	r3, #12
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	e7d6      	b.n	8007b5a <_free_r+0x22>
 8007bac:	6820      	ldr	r0, [r4, #0]
 8007bae:	1821      	adds	r1, r4, r0
 8007bb0:	428b      	cmp	r3, r1
 8007bb2:	bf04      	itt	eq
 8007bb4:	6819      	ldreq	r1, [r3, #0]
 8007bb6:	685b      	ldreq	r3, [r3, #4]
 8007bb8:	6063      	str	r3, [r4, #4]
 8007bba:	bf04      	itt	eq
 8007bbc:	1809      	addeq	r1, r1, r0
 8007bbe:	6021      	streq	r1, [r4, #0]
 8007bc0:	6054      	str	r4, [r2, #4]
 8007bc2:	e7ca      	b.n	8007b5a <_free_r+0x22>
 8007bc4:	bd38      	pop	{r3, r4, r5, pc}
 8007bc6:	bf00      	nop
 8007bc8:	200017d0 	.word	0x200017d0

08007bcc <malloc>:
 8007bcc:	4b02      	ldr	r3, [pc, #8]	@ (8007bd8 <malloc+0xc>)
 8007bce:	4601      	mov	r1, r0
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	f000 b825 	b.w	8007c20 <_malloc_r>
 8007bd6:	bf00      	nop
 8007bd8:	20000418 	.word	0x20000418

08007bdc <sbrk_aligned>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4e0f      	ldr	r6, [pc, #60]	@ (8007c1c <sbrk_aligned+0x40>)
 8007be0:	460c      	mov	r4, r1
 8007be2:	6831      	ldr	r1, [r6, #0]
 8007be4:	4605      	mov	r5, r0
 8007be6:	b911      	cbnz	r1, 8007bee <sbrk_aligned+0x12>
 8007be8:	f000 fcc6 	bl	8008578 <_sbrk_r>
 8007bec:	6030      	str	r0, [r6, #0]
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f000 fcc1 	bl	8008578 <_sbrk_r>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	d103      	bne.n	8007c02 <sbrk_aligned+0x26>
 8007bfa:	f04f 34ff 	mov.w	r4, #4294967295
 8007bfe:	4620      	mov	r0, r4
 8007c00:	bd70      	pop	{r4, r5, r6, pc}
 8007c02:	1cc4      	adds	r4, r0, #3
 8007c04:	f024 0403 	bic.w	r4, r4, #3
 8007c08:	42a0      	cmp	r0, r4
 8007c0a:	d0f8      	beq.n	8007bfe <sbrk_aligned+0x22>
 8007c0c:	1a21      	subs	r1, r4, r0
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 fcb2 	bl	8008578 <_sbrk_r>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d1f2      	bne.n	8007bfe <sbrk_aligned+0x22>
 8007c18:	e7ef      	b.n	8007bfa <sbrk_aligned+0x1e>
 8007c1a:	bf00      	nop
 8007c1c:	200017cc 	.word	0x200017cc

08007c20 <_malloc_r>:
 8007c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c24:	1ccd      	adds	r5, r1, #3
 8007c26:	f025 0503 	bic.w	r5, r5, #3
 8007c2a:	3508      	adds	r5, #8
 8007c2c:	2d0c      	cmp	r5, #12
 8007c2e:	bf38      	it	cc
 8007c30:	250c      	movcc	r5, #12
 8007c32:	2d00      	cmp	r5, #0
 8007c34:	4606      	mov	r6, r0
 8007c36:	db01      	blt.n	8007c3c <_malloc_r+0x1c>
 8007c38:	42a9      	cmp	r1, r5
 8007c3a:	d904      	bls.n	8007c46 <_malloc_r+0x26>
 8007c3c:	230c      	movs	r3, #12
 8007c3e:	6033      	str	r3, [r6, #0]
 8007c40:	2000      	movs	r0, #0
 8007c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d1c <_malloc_r+0xfc>
 8007c4a:	f000 f869 	bl	8007d20 <__malloc_lock>
 8007c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c52:	461c      	mov	r4, r3
 8007c54:	bb44      	cbnz	r4, 8007ca8 <_malloc_r+0x88>
 8007c56:	4629      	mov	r1, r5
 8007c58:	4630      	mov	r0, r6
 8007c5a:	f7ff ffbf 	bl	8007bdc <sbrk_aligned>
 8007c5e:	1c43      	adds	r3, r0, #1
 8007c60:	4604      	mov	r4, r0
 8007c62:	d158      	bne.n	8007d16 <_malloc_r+0xf6>
 8007c64:	f8d8 4000 	ldr.w	r4, [r8]
 8007c68:	4627      	mov	r7, r4
 8007c6a:	2f00      	cmp	r7, #0
 8007c6c:	d143      	bne.n	8007cf6 <_malloc_r+0xd6>
 8007c6e:	2c00      	cmp	r4, #0
 8007c70:	d04b      	beq.n	8007d0a <_malloc_r+0xea>
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	4639      	mov	r1, r7
 8007c76:	4630      	mov	r0, r6
 8007c78:	eb04 0903 	add.w	r9, r4, r3
 8007c7c:	f000 fc7c 	bl	8008578 <_sbrk_r>
 8007c80:	4581      	cmp	r9, r0
 8007c82:	d142      	bne.n	8007d0a <_malloc_r+0xea>
 8007c84:	6821      	ldr	r1, [r4, #0]
 8007c86:	1a6d      	subs	r5, r5, r1
 8007c88:	4629      	mov	r1, r5
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f7ff ffa6 	bl	8007bdc <sbrk_aligned>
 8007c90:	3001      	adds	r0, #1
 8007c92:	d03a      	beq.n	8007d0a <_malloc_r+0xea>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	442b      	add	r3, r5
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	bb62      	cbnz	r2, 8007cfc <_malloc_r+0xdc>
 8007ca2:	f8c8 7000 	str.w	r7, [r8]
 8007ca6:	e00f      	b.n	8007cc8 <_malloc_r+0xa8>
 8007ca8:	6822      	ldr	r2, [r4, #0]
 8007caa:	1b52      	subs	r2, r2, r5
 8007cac:	d420      	bmi.n	8007cf0 <_malloc_r+0xd0>
 8007cae:	2a0b      	cmp	r2, #11
 8007cb0:	d917      	bls.n	8007ce2 <_malloc_r+0xc2>
 8007cb2:	1961      	adds	r1, r4, r5
 8007cb4:	42a3      	cmp	r3, r4
 8007cb6:	6025      	str	r5, [r4, #0]
 8007cb8:	bf18      	it	ne
 8007cba:	6059      	strne	r1, [r3, #4]
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	bf08      	it	eq
 8007cc0:	f8c8 1000 	streq.w	r1, [r8]
 8007cc4:	5162      	str	r2, [r4, r5]
 8007cc6:	604b      	str	r3, [r1, #4]
 8007cc8:	4630      	mov	r0, r6
 8007cca:	f000 f82f 	bl	8007d2c <__malloc_unlock>
 8007cce:	f104 000b 	add.w	r0, r4, #11
 8007cd2:	1d23      	adds	r3, r4, #4
 8007cd4:	f020 0007 	bic.w	r0, r0, #7
 8007cd8:	1ac2      	subs	r2, r0, r3
 8007cda:	bf1c      	itt	ne
 8007cdc:	1a1b      	subne	r3, r3, r0
 8007cde:	50a3      	strne	r3, [r4, r2]
 8007ce0:	e7af      	b.n	8007c42 <_malloc_r+0x22>
 8007ce2:	6862      	ldr	r2, [r4, #4]
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	bf0c      	ite	eq
 8007ce8:	f8c8 2000 	streq.w	r2, [r8]
 8007cec:	605a      	strne	r2, [r3, #4]
 8007cee:	e7eb      	b.n	8007cc8 <_malloc_r+0xa8>
 8007cf0:	4623      	mov	r3, r4
 8007cf2:	6864      	ldr	r4, [r4, #4]
 8007cf4:	e7ae      	b.n	8007c54 <_malloc_r+0x34>
 8007cf6:	463c      	mov	r4, r7
 8007cf8:	687f      	ldr	r7, [r7, #4]
 8007cfa:	e7b6      	b.n	8007c6a <_malloc_r+0x4a>
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	42a3      	cmp	r3, r4
 8007d02:	d1fb      	bne.n	8007cfc <_malloc_r+0xdc>
 8007d04:	2300      	movs	r3, #0
 8007d06:	6053      	str	r3, [r2, #4]
 8007d08:	e7de      	b.n	8007cc8 <_malloc_r+0xa8>
 8007d0a:	230c      	movs	r3, #12
 8007d0c:	6033      	str	r3, [r6, #0]
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f000 f80c 	bl	8007d2c <__malloc_unlock>
 8007d14:	e794      	b.n	8007c40 <_malloc_r+0x20>
 8007d16:	6005      	str	r5, [r0, #0]
 8007d18:	e7d6      	b.n	8007cc8 <_malloc_r+0xa8>
 8007d1a:	bf00      	nop
 8007d1c:	200017d0 	.word	0x200017d0

08007d20 <__malloc_lock>:
 8007d20:	4801      	ldr	r0, [pc, #4]	@ (8007d28 <__malloc_lock+0x8>)
 8007d22:	f7ff bee8 	b.w	8007af6 <__retarget_lock_acquire_recursive>
 8007d26:	bf00      	nop
 8007d28:	200017c8 	.word	0x200017c8

08007d2c <__malloc_unlock>:
 8007d2c:	4801      	ldr	r0, [pc, #4]	@ (8007d34 <__malloc_unlock+0x8>)
 8007d2e:	f7ff bee3 	b.w	8007af8 <__retarget_lock_release_recursive>
 8007d32:	bf00      	nop
 8007d34:	200017c8 	.word	0x200017c8

08007d38 <__sfputc_r>:
 8007d38:	6893      	ldr	r3, [r2, #8]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	b410      	push	{r4}
 8007d40:	6093      	str	r3, [r2, #8]
 8007d42:	da08      	bge.n	8007d56 <__sfputc_r+0x1e>
 8007d44:	6994      	ldr	r4, [r2, #24]
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	db01      	blt.n	8007d4e <__sfputc_r+0x16>
 8007d4a:	290a      	cmp	r1, #10
 8007d4c:	d103      	bne.n	8007d56 <__sfputc_r+0x1e>
 8007d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d52:	f000 bb7d 	b.w	8008450 <__swbuf_r>
 8007d56:	6813      	ldr	r3, [r2, #0]
 8007d58:	1c58      	adds	r0, r3, #1
 8007d5a:	6010      	str	r0, [r2, #0]
 8007d5c:	7019      	strb	r1, [r3, #0]
 8007d5e:	4608      	mov	r0, r1
 8007d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <__sfputs_r>:
 8007d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d68:	4606      	mov	r6, r0
 8007d6a:	460f      	mov	r7, r1
 8007d6c:	4614      	mov	r4, r2
 8007d6e:	18d5      	adds	r5, r2, r3
 8007d70:	42ac      	cmp	r4, r5
 8007d72:	d101      	bne.n	8007d78 <__sfputs_r+0x12>
 8007d74:	2000      	movs	r0, #0
 8007d76:	e007      	b.n	8007d88 <__sfputs_r+0x22>
 8007d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d7c:	463a      	mov	r2, r7
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f7ff ffda 	bl	8007d38 <__sfputc_r>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d1f3      	bne.n	8007d70 <__sfputs_r+0xa>
 8007d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d8c <_vfiprintf_r>:
 8007d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d90:	460d      	mov	r5, r1
 8007d92:	b09d      	sub	sp, #116	@ 0x74
 8007d94:	4614      	mov	r4, r2
 8007d96:	4698      	mov	r8, r3
 8007d98:	4606      	mov	r6, r0
 8007d9a:	b118      	cbz	r0, 8007da4 <_vfiprintf_r+0x18>
 8007d9c:	6a03      	ldr	r3, [r0, #32]
 8007d9e:	b90b      	cbnz	r3, 8007da4 <_vfiprintf_r+0x18>
 8007da0:	f7ff fda4 	bl	80078ec <__sinit>
 8007da4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007da6:	07d9      	lsls	r1, r3, #31
 8007da8:	d405      	bmi.n	8007db6 <_vfiprintf_r+0x2a>
 8007daa:	89ab      	ldrh	r3, [r5, #12]
 8007dac:	059a      	lsls	r2, r3, #22
 8007dae:	d402      	bmi.n	8007db6 <_vfiprintf_r+0x2a>
 8007db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007db2:	f7ff fea0 	bl	8007af6 <__retarget_lock_acquire_recursive>
 8007db6:	89ab      	ldrh	r3, [r5, #12]
 8007db8:	071b      	lsls	r3, r3, #28
 8007dba:	d501      	bpl.n	8007dc0 <_vfiprintf_r+0x34>
 8007dbc:	692b      	ldr	r3, [r5, #16]
 8007dbe:	b99b      	cbnz	r3, 8007de8 <_vfiprintf_r+0x5c>
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f000 fb82 	bl	80084cc <__swsetup_r>
 8007dc8:	b170      	cbz	r0, 8007de8 <_vfiprintf_r+0x5c>
 8007dca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dcc:	07dc      	lsls	r4, r3, #31
 8007dce:	d504      	bpl.n	8007dda <_vfiprintf_r+0x4e>
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	b01d      	add	sp, #116	@ 0x74
 8007dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dda:	89ab      	ldrh	r3, [r5, #12]
 8007ddc:	0598      	lsls	r0, r3, #22
 8007dde:	d4f7      	bmi.n	8007dd0 <_vfiprintf_r+0x44>
 8007de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007de2:	f7ff fe89 	bl	8007af8 <__retarget_lock_release_recursive>
 8007de6:	e7f3      	b.n	8007dd0 <_vfiprintf_r+0x44>
 8007de8:	2300      	movs	r3, #0
 8007dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dec:	2320      	movs	r3, #32
 8007dee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df6:	2330      	movs	r3, #48	@ 0x30
 8007df8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007fa8 <_vfiprintf_r+0x21c>
 8007dfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e00:	f04f 0901 	mov.w	r9, #1
 8007e04:	4623      	mov	r3, r4
 8007e06:	469a      	mov	sl, r3
 8007e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e0c:	b10a      	cbz	r2, 8007e12 <_vfiprintf_r+0x86>
 8007e0e:	2a25      	cmp	r2, #37	@ 0x25
 8007e10:	d1f9      	bne.n	8007e06 <_vfiprintf_r+0x7a>
 8007e12:	ebba 0b04 	subs.w	fp, sl, r4
 8007e16:	d00b      	beq.n	8007e30 <_vfiprintf_r+0xa4>
 8007e18:	465b      	mov	r3, fp
 8007e1a:	4622      	mov	r2, r4
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7ff ffa1 	bl	8007d66 <__sfputs_r>
 8007e24:	3001      	adds	r0, #1
 8007e26:	f000 80a7 	beq.w	8007f78 <_vfiprintf_r+0x1ec>
 8007e2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e2c:	445a      	add	r2, fp
 8007e2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e30:	f89a 3000 	ldrb.w	r3, [sl]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 809f 	beq.w	8007f78 <_vfiprintf_r+0x1ec>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e44:	f10a 0a01 	add.w	sl, sl, #1
 8007e48:	9304      	str	r3, [sp, #16]
 8007e4a:	9307      	str	r3, [sp, #28]
 8007e4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e50:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e52:	4654      	mov	r4, sl
 8007e54:	2205      	movs	r2, #5
 8007e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e5a:	4853      	ldr	r0, [pc, #332]	@ (8007fa8 <_vfiprintf_r+0x21c>)
 8007e5c:	f7f8 f9b8 	bl	80001d0 <memchr>
 8007e60:	9a04      	ldr	r2, [sp, #16]
 8007e62:	b9d8      	cbnz	r0, 8007e9c <_vfiprintf_r+0x110>
 8007e64:	06d1      	lsls	r1, r2, #27
 8007e66:	bf44      	itt	mi
 8007e68:	2320      	movmi	r3, #32
 8007e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e6e:	0713      	lsls	r3, r2, #28
 8007e70:	bf44      	itt	mi
 8007e72:	232b      	movmi	r3, #43	@ 0x2b
 8007e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e78:	f89a 3000 	ldrb.w	r3, [sl]
 8007e7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e7e:	d015      	beq.n	8007eac <_vfiprintf_r+0x120>
 8007e80:	9a07      	ldr	r2, [sp, #28]
 8007e82:	4654      	mov	r4, sl
 8007e84:	2000      	movs	r0, #0
 8007e86:	f04f 0c0a 	mov.w	ip, #10
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e90:	3b30      	subs	r3, #48	@ 0x30
 8007e92:	2b09      	cmp	r3, #9
 8007e94:	d94b      	bls.n	8007f2e <_vfiprintf_r+0x1a2>
 8007e96:	b1b0      	cbz	r0, 8007ec6 <_vfiprintf_r+0x13a>
 8007e98:	9207      	str	r2, [sp, #28]
 8007e9a:	e014      	b.n	8007ec6 <_vfiprintf_r+0x13a>
 8007e9c:	eba0 0308 	sub.w	r3, r0, r8
 8007ea0:	fa09 f303 	lsl.w	r3, r9, r3
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	9304      	str	r3, [sp, #16]
 8007ea8:	46a2      	mov	sl, r4
 8007eaa:	e7d2      	b.n	8007e52 <_vfiprintf_r+0xc6>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	1d19      	adds	r1, r3, #4
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	9103      	str	r1, [sp, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bfbb      	ittet	lt
 8007eb8:	425b      	neglt	r3, r3
 8007eba:	f042 0202 	orrlt.w	r2, r2, #2
 8007ebe:	9307      	strge	r3, [sp, #28]
 8007ec0:	9307      	strlt	r3, [sp, #28]
 8007ec2:	bfb8      	it	lt
 8007ec4:	9204      	strlt	r2, [sp, #16]
 8007ec6:	7823      	ldrb	r3, [r4, #0]
 8007ec8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eca:	d10a      	bne.n	8007ee2 <_vfiprintf_r+0x156>
 8007ecc:	7863      	ldrb	r3, [r4, #1]
 8007ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ed0:	d132      	bne.n	8007f38 <_vfiprintf_r+0x1ac>
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	1d1a      	adds	r2, r3, #4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	9203      	str	r2, [sp, #12]
 8007eda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ede:	3402      	adds	r4, #2
 8007ee0:	9305      	str	r3, [sp, #20]
 8007ee2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007fb8 <_vfiprintf_r+0x22c>
 8007ee6:	7821      	ldrb	r1, [r4, #0]
 8007ee8:	2203      	movs	r2, #3
 8007eea:	4650      	mov	r0, sl
 8007eec:	f7f8 f970 	bl	80001d0 <memchr>
 8007ef0:	b138      	cbz	r0, 8007f02 <_vfiprintf_r+0x176>
 8007ef2:	9b04      	ldr	r3, [sp, #16]
 8007ef4:	eba0 000a 	sub.w	r0, r0, sl
 8007ef8:	2240      	movs	r2, #64	@ 0x40
 8007efa:	4082      	lsls	r2, r0
 8007efc:	4313      	orrs	r3, r2
 8007efe:	3401      	adds	r4, #1
 8007f00:	9304      	str	r3, [sp, #16]
 8007f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f06:	4829      	ldr	r0, [pc, #164]	@ (8007fac <_vfiprintf_r+0x220>)
 8007f08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f0c:	2206      	movs	r2, #6
 8007f0e:	f7f8 f95f 	bl	80001d0 <memchr>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	d03f      	beq.n	8007f96 <_vfiprintf_r+0x20a>
 8007f16:	4b26      	ldr	r3, [pc, #152]	@ (8007fb0 <_vfiprintf_r+0x224>)
 8007f18:	bb1b      	cbnz	r3, 8007f62 <_vfiprintf_r+0x1d6>
 8007f1a:	9b03      	ldr	r3, [sp, #12]
 8007f1c:	3307      	adds	r3, #7
 8007f1e:	f023 0307 	bic.w	r3, r3, #7
 8007f22:	3308      	adds	r3, #8
 8007f24:	9303      	str	r3, [sp, #12]
 8007f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f28:	443b      	add	r3, r7
 8007f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f2c:	e76a      	b.n	8007e04 <_vfiprintf_r+0x78>
 8007f2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f32:	460c      	mov	r4, r1
 8007f34:	2001      	movs	r0, #1
 8007f36:	e7a8      	b.n	8007e8a <_vfiprintf_r+0xfe>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	3401      	adds	r4, #1
 8007f3c:	9305      	str	r3, [sp, #20]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	f04f 0c0a 	mov.w	ip, #10
 8007f44:	4620      	mov	r0, r4
 8007f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f4a:	3a30      	subs	r2, #48	@ 0x30
 8007f4c:	2a09      	cmp	r2, #9
 8007f4e:	d903      	bls.n	8007f58 <_vfiprintf_r+0x1cc>
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0c6      	beq.n	8007ee2 <_vfiprintf_r+0x156>
 8007f54:	9105      	str	r1, [sp, #20]
 8007f56:	e7c4      	b.n	8007ee2 <_vfiprintf_r+0x156>
 8007f58:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e7f0      	b.n	8007f44 <_vfiprintf_r+0x1b8>
 8007f62:	ab03      	add	r3, sp, #12
 8007f64:	9300      	str	r3, [sp, #0]
 8007f66:	462a      	mov	r2, r5
 8007f68:	4b12      	ldr	r3, [pc, #72]	@ (8007fb4 <_vfiprintf_r+0x228>)
 8007f6a:	a904      	add	r1, sp, #16
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f3af 8000 	nop.w
 8007f72:	4607      	mov	r7, r0
 8007f74:	1c78      	adds	r0, r7, #1
 8007f76:	d1d6      	bne.n	8007f26 <_vfiprintf_r+0x19a>
 8007f78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f7a:	07d9      	lsls	r1, r3, #31
 8007f7c:	d405      	bmi.n	8007f8a <_vfiprintf_r+0x1fe>
 8007f7e:	89ab      	ldrh	r3, [r5, #12]
 8007f80:	059a      	lsls	r2, r3, #22
 8007f82:	d402      	bmi.n	8007f8a <_vfiprintf_r+0x1fe>
 8007f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f86:	f7ff fdb7 	bl	8007af8 <__retarget_lock_release_recursive>
 8007f8a:	89ab      	ldrh	r3, [r5, #12]
 8007f8c:	065b      	lsls	r3, r3, #25
 8007f8e:	f53f af1f 	bmi.w	8007dd0 <_vfiprintf_r+0x44>
 8007f92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f94:	e71e      	b.n	8007dd4 <_vfiprintf_r+0x48>
 8007f96:	ab03      	add	r3, sp, #12
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	462a      	mov	r2, r5
 8007f9c:	4b05      	ldr	r3, [pc, #20]	@ (8007fb4 <_vfiprintf_r+0x228>)
 8007f9e:	a904      	add	r1, sp, #16
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 f879 	bl	8008098 <_printf_i>
 8007fa6:	e7e4      	b.n	8007f72 <_vfiprintf_r+0x1e6>
 8007fa8:	0800a13f 	.word	0x0800a13f
 8007fac:	0800a149 	.word	0x0800a149
 8007fb0:	00000000 	.word	0x00000000
 8007fb4:	08007d67 	.word	0x08007d67
 8007fb8:	0800a145 	.word	0x0800a145

08007fbc <_printf_common>:
 8007fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc0:	4616      	mov	r6, r2
 8007fc2:	4698      	mov	r8, r3
 8007fc4:	688a      	ldr	r2, [r1, #8]
 8007fc6:	690b      	ldr	r3, [r1, #16]
 8007fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	bfb8      	it	lt
 8007fd0:	4613      	movlt	r3, r2
 8007fd2:	6033      	str	r3, [r6, #0]
 8007fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fd8:	4607      	mov	r7, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	b10a      	cbz	r2, 8007fe2 <_printf_common+0x26>
 8007fde:	3301      	adds	r3, #1
 8007fe0:	6033      	str	r3, [r6, #0]
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	0699      	lsls	r1, r3, #26
 8007fe6:	bf42      	ittt	mi
 8007fe8:	6833      	ldrmi	r3, [r6, #0]
 8007fea:	3302      	addmi	r3, #2
 8007fec:	6033      	strmi	r3, [r6, #0]
 8007fee:	6825      	ldr	r5, [r4, #0]
 8007ff0:	f015 0506 	ands.w	r5, r5, #6
 8007ff4:	d106      	bne.n	8008004 <_printf_common+0x48>
 8007ff6:	f104 0a19 	add.w	sl, r4, #25
 8007ffa:	68e3      	ldr	r3, [r4, #12]
 8007ffc:	6832      	ldr	r2, [r6, #0]
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	42ab      	cmp	r3, r5
 8008002:	dc26      	bgt.n	8008052 <_printf_common+0x96>
 8008004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	3b00      	subs	r3, #0
 800800c:	bf18      	it	ne
 800800e:	2301      	movne	r3, #1
 8008010:	0692      	lsls	r2, r2, #26
 8008012:	d42b      	bmi.n	800806c <_printf_common+0xb0>
 8008014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008018:	4641      	mov	r1, r8
 800801a:	4638      	mov	r0, r7
 800801c:	47c8      	blx	r9
 800801e:	3001      	adds	r0, #1
 8008020:	d01e      	beq.n	8008060 <_printf_common+0xa4>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	6922      	ldr	r2, [r4, #16]
 8008026:	f003 0306 	and.w	r3, r3, #6
 800802a:	2b04      	cmp	r3, #4
 800802c:	bf02      	ittt	eq
 800802e:	68e5      	ldreq	r5, [r4, #12]
 8008030:	6833      	ldreq	r3, [r6, #0]
 8008032:	1aed      	subeq	r5, r5, r3
 8008034:	68a3      	ldr	r3, [r4, #8]
 8008036:	bf0c      	ite	eq
 8008038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800803c:	2500      	movne	r5, #0
 800803e:	4293      	cmp	r3, r2
 8008040:	bfc4      	itt	gt
 8008042:	1a9b      	subgt	r3, r3, r2
 8008044:	18ed      	addgt	r5, r5, r3
 8008046:	2600      	movs	r6, #0
 8008048:	341a      	adds	r4, #26
 800804a:	42b5      	cmp	r5, r6
 800804c:	d11a      	bne.n	8008084 <_printf_common+0xc8>
 800804e:	2000      	movs	r0, #0
 8008050:	e008      	b.n	8008064 <_printf_common+0xa8>
 8008052:	2301      	movs	r3, #1
 8008054:	4652      	mov	r2, sl
 8008056:	4641      	mov	r1, r8
 8008058:	4638      	mov	r0, r7
 800805a:	47c8      	blx	r9
 800805c:	3001      	adds	r0, #1
 800805e:	d103      	bne.n	8008068 <_printf_common+0xac>
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008068:	3501      	adds	r5, #1
 800806a:	e7c6      	b.n	8007ffa <_printf_common+0x3e>
 800806c:	18e1      	adds	r1, r4, r3
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	2030      	movs	r0, #48	@ 0x30
 8008072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008076:	4422      	add	r2, r4
 8008078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800807c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008080:	3302      	adds	r3, #2
 8008082:	e7c7      	b.n	8008014 <_printf_common+0x58>
 8008084:	2301      	movs	r3, #1
 8008086:	4622      	mov	r2, r4
 8008088:	4641      	mov	r1, r8
 800808a:	4638      	mov	r0, r7
 800808c:	47c8      	blx	r9
 800808e:	3001      	adds	r0, #1
 8008090:	d0e6      	beq.n	8008060 <_printf_common+0xa4>
 8008092:	3601      	adds	r6, #1
 8008094:	e7d9      	b.n	800804a <_printf_common+0x8e>
	...

08008098 <_printf_i>:
 8008098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800809c:	7e0f      	ldrb	r7, [r1, #24]
 800809e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080a0:	2f78      	cmp	r7, #120	@ 0x78
 80080a2:	4691      	mov	r9, r2
 80080a4:	4680      	mov	r8, r0
 80080a6:	460c      	mov	r4, r1
 80080a8:	469a      	mov	sl, r3
 80080aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080ae:	d807      	bhi.n	80080c0 <_printf_i+0x28>
 80080b0:	2f62      	cmp	r7, #98	@ 0x62
 80080b2:	d80a      	bhi.n	80080ca <_printf_i+0x32>
 80080b4:	2f00      	cmp	r7, #0
 80080b6:	f000 80d1 	beq.w	800825c <_printf_i+0x1c4>
 80080ba:	2f58      	cmp	r7, #88	@ 0x58
 80080bc:	f000 80b8 	beq.w	8008230 <_printf_i+0x198>
 80080c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080c8:	e03a      	b.n	8008140 <_printf_i+0xa8>
 80080ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080ce:	2b15      	cmp	r3, #21
 80080d0:	d8f6      	bhi.n	80080c0 <_printf_i+0x28>
 80080d2:	a101      	add	r1, pc, #4	@ (adr r1, 80080d8 <_printf_i+0x40>)
 80080d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080d8:	08008131 	.word	0x08008131
 80080dc:	08008145 	.word	0x08008145
 80080e0:	080080c1 	.word	0x080080c1
 80080e4:	080080c1 	.word	0x080080c1
 80080e8:	080080c1 	.word	0x080080c1
 80080ec:	080080c1 	.word	0x080080c1
 80080f0:	08008145 	.word	0x08008145
 80080f4:	080080c1 	.word	0x080080c1
 80080f8:	080080c1 	.word	0x080080c1
 80080fc:	080080c1 	.word	0x080080c1
 8008100:	080080c1 	.word	0x080080c1
 8008104:	08008243 	.word	0x08008243
 8008108:	0800816f 	.word	0x0800816f
 800810c:	080081fd 	.word	0x080081fd
 8008110:	080080c1 	.word	0x080080c1
 8008114:	080080c1 	.word	0x080080c1
 8008118:	08008265 	.word	0x08008265
 800811c:	080080c1 	.word	0x080080c1
 8008120:	0800816f 	.word	0x0800816f
 8008124:	080080c1 	.word	0x080080c1
 8008128:	080080c1 	.word	0x080080c1
 800812c:	08008205 	.word	0x08008205
 8008130:	6833      	ldr	r3, [r6, #0]
 8008132:	1d1a      	adds	r2, r3, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6032      	str	r2, [r6, #0]
 8008138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800813c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008140:	2301      	movs	r3, #1
 8008142:	e09c      	b.n	800827e <_printf_i+0x1e6>
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	1d19      	adds	r1, r3, #4
 800814a:	6031      	str	r1, [r6, #0]
 800814c:	0606      	lsls	r6, r0, #24
 800814e:	d501      	bpl.n	8008154 <_printf_i+0xbc>
 8008150:	681d      	ldr	r5, [r3, #0]
 8008152:	e003      	b.n	800815c <_printf_i+0xc4>
 8008154:	0645      	lsls	r5, r0, #25
 8008156:	d5fb      	bpl.n	8008150 <_printf_i+0xb8>
 8008158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800815c:	2d00      	cmp	r5, #0
 800815e:	da03      	bge.n	8008168 <_printf_i+0xd0>
 8008160:	232d      	movs	r3, #45	@ 0x2d
 8008162:	426d      	negs	r5, r5
 8008164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008168:	4858      	ldr	r0, [pc, #352]	@ (80082cc <_printf_i+0x234>)
 800816a:	230a      	movs	r3, #10
 800816c:	e011      	b.n	8008192 <_printf_i+0xfa>
 800816e:	6821      	ldr	r1, [r4, #0]
 8008170:	6833      	ldr	r3, [r6, #0]
 8008172:	0608      	lsls	r0, r1, #24
 8008174:	f853 5b04 	ldr.w	r5, [r3], #4
 8008178:	d402      	bmi.n	8008180 <_printf_i+0xe8>
 800817a:	0649      	lsls	r1, r1, #25
 800817c:	bf48      	it	mi
 800817e:	b2ad      	uxthmi	r5, r5
 8008180:	2f6f      	cmp	r7, #111	@ 0x6f
 8008182:	4852      	ldr	r0, [pc, #328]	@ (80082cc <_printf_i+0x234>)
 8008184:	6033      	str	r3, [r6, #0]
 8008186:	bf14      	ite	ne
 8008188:	230a      	movne	r3, #10
 800818a:	2308      	moveq	r3, #8
 800818c:	2100      	movs	r1, #0
 800818e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008192:	6866      	ldr	r6, [r4, #4]
 8008194:	60a6      	str	r6, [r4, #8]
 8008196:	2e00      	cmp	r6, #0
 8008198:	db05      	blt.n	80081a6 <_printf_i+0x10e>
 800819a:	6821      	ldr	r1, [r4, #0]
 800819c:	432e      	orrs	r6, r5
 800819e:	f021 0104 	bic.w	r1, r1, #4
 80081a2:	6021      	str	r1, [r4, #0]
 80081a4:	d04b      	beq.n	800823e <_printf_i+0x1a6>
 80081a6:	4616      	mov	r6, r2
 80081a8:	fbb5 f1f3 	udiv	r1, r5, r3
 80081ac:	fb03 5711 	mls	r7, r3, r1, r5
 80081b0:	5dc7      	ldrb	r7, [r0, r7]
 80081b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081b6:	462f      	mov	r7, r5
 80081b8:	42bb      	cmp	r3, r7
 80081ba:	460d      	mov	r5, r1
 80081bc:	d9f4      	bls.n	80081a8 <_printf_i+0x110>
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d10b      	bne.n	80081da <_printf_i+0x142>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	07df      	lsls	r7, r3, #31
 80081c6:	d508      	bpl.n	80081da <_printf_i+0x142>
 80081c8:	6923      	ldr	r3, [r4, #16]
 80081ca:	6861      	ldr	r1, [r4, #4]
 80081cc:	4299      	cmp	r1, r3
 80081ce:	bfde      	ittt	le
 80081d0:	2330      	movle	r3, #48	@ 0x30
 80081d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081da:	1b92      	subs	r2, r2, r6
 80081dc:	6122      	str	r2, [r4, #16]
 80081de:	f8cd a000 	str.w	sl, [sp]
 80081e2:	464b      	mov	r3, r9
 80081e4:	aa03      	add	r2, sp, #12
 80081e6:	4621      	mov	r1, r4
 80081e8:	4640      	mov	r0, r8
 80081ea:	f7ff fee7 	bl	8007fbc <_printf_common>
 80081ee:	3001      	adds	r0, #1
 80081f0:	d14a      	bne.n	8008288 <_printf_i+0x1f0>
 80081f2:	f04f 30ff 	mov.w	r0, #4294967295
 80081f6:	b004      	add	sp, #16
 80081f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	f043 0320 	orr.w	r3, r3, #32
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	4832      	ldr	r0, [pc, #200]	@ (80082d0 <_printf_i+0x238>)
 8008206:	2778      	movs	r7, #120	@ 0x78
 8008208:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	6831      	ldr	r1, [r6, #0]
 8008210:	061f      	lsls	r7, r3, #24
 8008212:	f851 5b04 	ldr.w	r5, [r1], #4
 8008216:	d402      	bmi.n	800821e <_printf_i+0x186>
 8008218:	065f      	lsls	r7, r3, #25
 800821a:	bf48      	it	mi
 800821c:	b2ad      	uxthmi	r5, r5
 800821e:	6031      	str	r1, [r6, #0]
 8008220:	07d9      	lsls	r1, r3, #31
 8008222:	bf44      	itt	mi
 8008224:	f043 0320 	orrmi.w	r3, r3, #32
 8008228:	6023      	strmi	r3, [r4, #0]
 800822a:	b11d      	cbz	r5, 8008234 <_printf_i+0x19c>
 800822c:	2310      	movs	r3, #16
 800822e:	e7ad      	b.n	800818c <_printf_i+0xf4>
 8008230:	4826      	ldr	r0, [pc, #152]	@ (80082cc <_printf_i+0x234>)
 8008232:	e7e9      	b.n	8008208 <_printf_i+0x170>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	f023 0320 	bic.w	r3, r3, #32
 800823a:	6023      	str	r3, [r4, #0]
 800823c:	e7f6      	b.n	800822c <_printf_i+0x194>
 800823e:	4616      	mov	r6, r2
 8008240:	e7bd      	b.n	80081be <_printf_i+0x126>
 8008242:	6833      	ldr	r3, [r6, #0]
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	6961      	ldr	r1, [r4, #20]
 8008248:	1d18      	adds	r0, r3, #4
 800824a:	6030      	str	r0, [r6, #0]
 800824c:	062e      	lsls	r6, r5, #24
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	d501      	bpl.n	8008256 <_printf_i+0x1be>
 8008252:	6019      	str	r1, [r3, #0]
 8008254:	e002      	b.n	800825c <_printf_i+0x1c4>
 8008256:	0668      	lsls	r0, r5, #25
 8008258:	d5fb      	bpl.n	8008252 <_printf_i+0x1ba>
 800825a:	8019      	strh	r1, [r3, #0]
 800825c:	2300      	movs	r3, #0
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	4616      	mov	r6, r2
 8008262:	e7bc      	b.n	80081de <_printf_i+0x146>
 8008264:	6833      	ldr	r3, [r6, #0]
 8008266:	1d1a      	adds	r2, r3, #4
 8008268:	6032      	str	r2, [r6, #0]
 800826a:	681e      	ldr	r6, [r3, #0]
 800826c:	6862      	ldr	r2, [r4, #4]
 800826e:	2100      	movs	r1, #0
 8008270:	4630      	mov	r0, r6
 8008272:	f7f7 ffad 	bl	80001d0 <memchr>
 8008276:	b108      	cbz	r0, 800827c <_printf_i+0x1e4>
 8008278:	1b80      	subs	r0, r0, r6
 800827a:	6060      	str	r0, [r4, #4]
 800827c:	6863      	ldr	r3, [r4, #4]
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	2300      	movs	r3, #0
 8008282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008286:	e7aa      	b.n	80081de <_printf_i+0x146>
 8008288:	6923      	ldr	r3, [r4, #16]
 800828a:	4632      	mov	r2, r6
 800828c:	4649      	mov	r1, r9
 800828e:	4640      	mov	r0, r8
 8008290:	47d0      	blx	sl
 8008292:	3001      	adds	r0, #1
 8008294:	d0ad      	beq.n	80081f2 <_printf_i+0x15a>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	079b      	lsls	r3, r3, #30
 800829a:	d413      	bmi.n	80082c4 <_printf_i+0x22c>
 800829c:	68e0      	ldr	r0, [r4, #12]
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	4298      	cmp	r0, r3
 80082a2:	bfb8      	it	lt
 80082a4:	4618      	movlt	r0, r3
 80082a6:	e7a6      	b.n	80081f6 <_printf_i+0x15e>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4632      	mov	r2, r6
 80082ac:	4649      	mov	r1, r9
 80082ae:	4640      	mov	r0, r8
 80082b0:	47d0      	blx	sl
 80082b2:	3001      	adds	r0, #1
 80082b4:	d09d      	beq.n	80081f2 <_printf_i+0x15a>
 80082b6:	3501      	adds	r5, #1
 80082b8:	68e3      	ldr	r3, [r4, #12]
 80082ba:	9903      	ldr	r1, [sp, #12]
 80082bc:	1a5b      	subs	r3, r3, r1
 80082be:	42ab      	cmp	r3, r5
 80082c0:	dcf2      	bgt.n	80082a8 <_printf_i+0x210>
 80082c2:	e7eb      	b.n	800829c <_printf_i+0x204>
 80082c4:	2500      	movs	r5, #0
 80082c6:	f104 0619 	add.w	r6, r4, #25
 80082ca:	e7f5      	b.n	80082b8 <_printf_i+0x220>
 80082cc:	0800a150 	.word	0x0800a150
 80082d0:	0800a161 	.word	0x0800a161

080082d4 <__sflush_r>:
 80082d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082dc:	0716      	lsls	r6, r2, #28
 80082de:	4605      	mov	r5, r0
 80082e0:	460c      	mov	r4, r1
 80082e2:	d454      	bmi.n	800838e <__sflush_r+0xba>
 80082e4:	684b      	ldr	r3, [r1, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	dc02      	bgt.n	80082f0 <__sflush_r+0x1c>
 80082ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dd48      	ble.n	8008382 <__sflush_r+0xae>
 80082f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082f2:	2e00      	cmp	r6, #0
 80082f4:	d045      	beq.n	8008382 <__sflush_r+0xae>
 80082f6:	2300      	movs	r3, #0
 80082f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082fc:	682f      	ldr	r7, [r5, #0]
 80082fe:	6a21      	ldr	r1, [r4, #32]
 8008300:	602b      	str	r3, [r5, #0]
 8008302:	d030      	beq.n	8008366 <__sflush_r+0x92>
 8008304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	0759      	lsls	r1, r3, #29
 800830a:	d505      	bpl.n	8008318 <__sflush_r+0x44>
 800830c:	6863      	ldr	r3, [r4, #4]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008312:	b10b      	cbz	r3, 8008318 <__sflush_r+0x44>
 8008314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008316:	1ad2      	subs	r2, r2, r3
 8008318:	2300      	movs	r3, #0
 800831a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800831c:	6a21      	ldr	r1, [r4, #32]
 800831e:	4628      	mov	r0, r5
 8008320:	47b0      	blx	r6
 8008322:	1c43      	adds	r3, r0, #1
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	d106      	bne.n	8008336 <__sflush_r+0x62>
 8008328:	6829      	ldr	r1, [r5, #0]
 800832a:	291d      	cmp	r1, #29
 800832c:	d82b      	bhi.n	8008386 <__sflush_r+0xb2>
 800832e:	4a2a      	ldr	r2, [pc, #168]	@ (80083d8 <__sflush_r+0x104>)
 8008330:	40ca      	lsrs	r2, r1
 8008332:	07d6      	lsls	r6, r2, #31
 8008334:	d527      	bpl.n	8008386 <__sflush_r+0xb2>
 8008336:	2200      	movs	r2, #0
 8008338:	6062      	str	r2, [r4, #4]
 800833a:	04d9      	lsls	r1, r3, #19
 800833c:	6922      	ldr	r2, [r4, #16]
 800833e:	6022      	str	r2, [r4, #0]
 8008340:	d504      	bpl.n	800834c <__sflush_r+0x78>
 8008342:	1c42      	adds	r2, r0, #1
 8008344:	d101      	bne.n	800834a <__sflush_r+0x76>
 8008346:	682b      	ldr	r3, [r5, #0]
 8008348:	b903      	cbnz	r3, 800834c <__sflush_r+0x78>
 800834a:	6560      	str	r0, [r4, #84]	@ 0x54
 800834c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800834e:	602f      	str	r7, [r5, #0]
 8008350:	b1b9      	cbz	r1, 8008382 <__sflush_r+0xae>
 8008352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008356:	4299      	cmp	r1, r3
 8008358:	d002      	beq.n	8008360 <__sflush_r+0x8c>
 800835a:	4628      	mov	r0, r5
 800835c:	f7ff fbec 	bl	8007b38 <_free_r>
 8008360:	2300      	movs	r3, #0
 8008362:	6363      	str	r3, [r4, #52]	@ 0x34
 8008364:	e00d      	b.n	8008382 <__sflush_r+0xae>
 8008366:	2301      	movs	r3, #1
 8008368:	4628      	mov	r0, r5
 800836a:	47b0      	blx	r6
 800836c:	4602      	mov	r2, r0
 800836e:	1c50      	adds	r0, r2, #1
 8008370:	d1c9      	bne.n	8008306 <__sflush_r+0x32>
 8008372:	682b      	ldr	r3, [r5, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0c6      	beq.n	8008306 <__sflush_r+0x32>
 8008378:	2b1d      	cmp	r3, #29
 800837a:	d001      	beq.n	8008380 <__sflush_r+0xac>
 800837c:	2b16      	cmp	r3, #22
 800837e:	d11e      	bne.n	80083be <__sflush_r+0xea>
 8008380:	602f      	str	r7, [r5, #0]
 8008382:	2000      	movs	r0, #0
 8008384:	e022      	b.n	80083cc <__sflush_r+0xf8>
 8008386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800838a:	b21b      	sxth	r3, r3
 800838c:	e01b      	b.n	80083c6 <__sflush_r+0xf2>
 800838e:	690f      	ldr	r7, [r1, #16]
 8008390:	2f00      	cmp	r7, #0
 8008392:	d0f6      	beq.n	8008382 <__sflush_r+0xae>
 8008394:	0793      	lsls	r3, r2, #30
 8008396:	680e      	ldr	r6, [r1, #0]
 8008398:	bf08      	it	eq
 800839a:	694b      	ldreq	r3, [r1, #20]
 800839c:	600f      	str	r7, [r1, #0]
 800839e:	bf18      	it	ne
 80083a0:	2300      	movne	r3, #0
 80083a2:	eba6 0807 	sub.w	r8, r6, r7
 80083a6:	608b      	str	r3, [r1, #8]
 80083a8:	f1b8 0f00 	cmp.w	r8, #0
 80083ac:	dde9      	ble.n	8008382 <__sflush_r+0xae>
 80083ae:	6a21      	ldr	r1, [r4, #32]
 80083b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80083b2:	4643      	mov	r3, r8
 80083b4:	463a      	mov	r2, r7
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b0      	blx	r6
 80083ba:	2800      	cmp	r0, #0
 80083bc:	dc08      	bgt.n	80083d0 <__sflush_r+0xfc>
 80083be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	f04f 30ff 	mov.w	r0, #4294967295
 80083cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083d0:	4407      	add	r7, r0
 80083d2:	eba8 0800 	sub.w	r8, r8, r0
 80083d6:	e7e7      	b.n	80083a8 <__sflush_r+0xd4>
 80083d8:	20400001 	.word	0x20400001

080083dc <_fflush_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	690b      	ldr	r3, [r1, #16]
 80083e0:	4605      	mov	r5, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	b913      	cbnz	r3, 80083ec <_fflush_r+0x10>
 80083e6:	2500      	movs	r5, #0
 80083e8:	4628      	mov	r0, r5
 80083ea:	bd38      	pop	{r3, r4, r5, pc}
 80083ec:	b118      	cbz	r0, 80083f6 <_fflush_r+0x1a>
 80083ee:	6a03      	ldr	r3, [r0, #32]
 80083f0:	b90b      	cbnz	r3, 80083f6 <_fflush_r+0x1a>
 80083f2:	f7ff fa7b 	bl	80078ec <__sinit>
 80083f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0f3      	beq.n	80083e6 <_fflush_r+0xa>
 80083fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008400:	07d0      	lsls	r0, r2, #31
 8008402:	d404      	bmi.n	800840e <_fflush_r+0x32>
 8008404:	0599      	lsls	r1, r3, #22
 8008406:	d402      	bmi.n	800840e <_fflush_r+0x32>
 8008408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800840a:	f7ff fb74 	bl	8007af6 <__retarget_lock_acquire_recursive>
 800840e:	4628      	mov	r0, r5
 8008410:	4621      	mov	r1, r4
 8008412:	f7ff ff5f 	bl	80082d4 <__sflush_r>
 8008416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008418:	07da      	lsls	r2, r3, #31
 800841a:	4605      	mov	r5, r0
 800841c:	d4e4      	bmi.n	80083e8 <_fflush_r+0xc>
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	059b      	lsls	r3, r3, #22
 8008422:	d4e1      	bmi.n	80083e8 <_fflush_r+0xc>
 8008424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008426:	f7ff fb67 	bl	8007af8 <__retarget_lock_release_recursive>
 800842a:	e7dd      	b.n	80083e8 <_fflush_r+0xc>

0800842c <fiprintf>:
 800842c:	b40e      	push	{r1, r2, r3}
 800842e:	b503      	push	{r0, r1, lr}
 8008430:	4601      	mov	r1, r0
 8008432:	ab03      	add	r3, sp, #12
 8008434:	4805      	ldr	r0, [pc, #20]	@ (800844c <fiprintf+0x20>)
 8008436:	f853 2b04 	ldr.w	r2, [r3], #4
 800843a:	6800      	ldr	r0, [r0, #0]
 800843c:	9301      	str	r3, [sp, #4]
 800843e:	f7ff fca5 	bl	8007d8c <_vfiprintf_r>
 8008442:	b002      	add	sp, #8
 8008444:	f85d eb04 	ldr.w	lr, [sp], #4
 8008448:	b003      	add	sp, #12
 800844a:	4770      	bx	lr
 800844c:	20000418 	.word	0x20000418

08008450 <__swbuf_r>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	460e      	mov	r6, r1
 8008454:	4614      	mov	r4, r2
 8008456:	4605      	mov	r5, r0
 8008458:	b118      	cbz	r0, 8008462 <__swbuf_r+0x12>
 800845a:	6a03      	ldr	r3, [r0, #32]
 800845c:	b90b      	cbnz	r3, 8008462 <__swbuf_r+0x12>
 800845e:	f7ff fa45 	bl	80078ec <__sinit>
 8008462:	69a3      	ldr	r3, [r4, #24]
 8008464:	60a3      	str	r3, [r4, #8]
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	071a      	lsls	r2, r3, #28
 800846a:	d501      	bpl.n	8008470 <__swbuf_r+0x20>
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	b943      	cbnz	r3, 8008482 <__swbuf_r+0x32>
 8008470:	4621      	mov	r1, r4
 8008472:	4628      	mov	r0, r5
 8008474:	f000 f82a 	bl	80084cc <__swsetup_r>
 8008478:	b118      	cbz	r0, 8008482 <__swbuf_r+0x32>
 800847a:	f04f 37ff 	mov.w	r7, #4294967295
 800847e:	4638      	mov	r0, r7
 8008480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	6922      	ldr	r2, [r4, #16]
 8008486:	1a98      	subs	r0, r3, r2
 8008488:	6963      	ldr	r3, [r4, #20]
 800848a:	b2f6      	uxtb	r6, r6
 800848c:	4283      	cmp	r3, r0
 800848e:	4637      	mov	r7, r6
 8008490:	dc05      	bgt.n	800849e <__swbuf_r+0x4e>
 8008492:	4621      	mov	r1, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f7ff ffa1 	bl	80083dc <_fflush_r>
 800849a:	2800      	cmp	r0, #0
 800849c:	d1ed      	bne.n	800847a <__swbuf_r+0x2a>
 800849e:	68a3      	ldr	r3, [r4, #8]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	60a3      	str	r3, [r4, #8]
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	6022      	str	r2, [r4, #0]
 80084aa:	701e      	strb	r6, [r3, #0]
 80084ac:	6962      	ldr	r2, [r4, #20]
 80084ae:	1c43      	adds	r3, r0, #1
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d004      	beq.n	80084be <__swbuf_r+0x6e>
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	07db      	lsls	r3, r3, #31
 80084b8:	d5e1      	bpl.n	800847e <__swbuf_r+0x2e>
 80084ba:	2e0a      	cmp	r6, #10
 80084bc:	d1df      	bne.n	800847e <__swbuf_r+0x2e>
 80084be:	4621      	mov	r1, r4
 80084c0:	4628      	mov	r0, r5
 80084c2:	f7ff ff8b 	bl	80083dc <_fflush_r>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d0d9      	beq.n	800847e <__swbuf_r+0x2e>
 80084ca:	e7d6      	b.n	800847a <__swbuf_r+0x2a>

080084cc <__swsetup_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4b29      	ldr	r3, [pc, #164]	@ (8008574 <__swsetup_r+0xa8>)
 80084d0:	4605      	mov	r5, r0
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	460c      	mov	r4, r1
 80084d6:	b118      	cbz	r0, 80084e0 <__swsetup_r+0x14>
 80084d8:	6a03      	ldr	r3, [r0, #32]
 80084da:	b90b      	cbnz	r3, 80084e0 <__swsetup_r+0x14>
 80084dc:	f7ff fa06 	bl	80078ec <__sinit>
 80084e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084e4:	0719      	lsls	r1, r3, #28
 80084e6:	d422      	bmi.n	800852e <__swsetup_r+0x62>
 80084e8:	06da      	lsls	r2, r3, #27
 80084ea:	d407      	bmi.n	80084fc <__swsetup_r+0x30>
 80084ec:	2209      	movs	r2, #9
 80084ee:	602a      	str	r2, [r5, #0]
 80084f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084f4:	81a3      	strh	r3, [r4, #12]
 80084f6:	f04f 30ff 	mov.w	r0, #4294967295
 80084fa:	e033      	b.n	8008564 <__swsetup_r+0x98>
 80084fc:	0758      	lsls	r0, r3, #29
 80084fe:	d512      	bpl.n	8008526 <__swsetup_r+0x5a>
 8008500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008502:	b141      	cbz	r1, 8008516 <__swsetup_r+0x4a>
 8008504:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008508:	4299      	cmp	r1, r3
 800850a:	d002      	beq.n	8008512 <__swsetup_r+0x46>
 800850c:	4628      	mov	r0, r5
 800850e:	f7ff fb13 	bl	8007b38 <_free_r>
 8008512:	2300      	movs	r3, #0
 8008514:	6363      	str	r3, [r4, #52]	@ 0x34
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800851c:	81a3      	strh	r3, [r4, #12]
 800851e:	2300      	movs	r3, #0
 8008520:	6063      	str	r3, [r4, #4]
 8008522:	6923      	ldr	r3, [r4, #16]
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	f043 0308 	orr.w	r3, r3, #8
 800852c:	81a3      	strh	r3, [r4, #12]
 800852e:	6923      	ldr	r3, [r4, #16]
 8008530:	b94b      	cbnz	r3, 8008546 <__swsetup_r+0x7a>
 8008532:	89a3      	ldrh	r3, [r4, #12]
 8008534:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800853c:	d003      	beq.n	8008546 <__swsetup_r+0x7a>
 800853e:	4621      	mov	r1, r4
 8008540:	4628      	mov	r0, r5
 8008542:	f000 f856 	bl	80085f2 <__smakebuf_r>
 8008546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854a:	f013 0201 	ands.w	r2, r3, #1
 800854e:	d00a      	beq.n	8008566 <__swsetup_r+0x9a>
 8008550:	2200      	movs	r2, #0
 8008552:	60a2      	str	r2, [r4, #8]
 8008554:	6962      	ldr	r2, [r4, #20]
 8008556:	4252      	negs	r2, r2
 8008558:	61a2      	str	r2, [r4, #24]
 800855a:	6922      	ldr	r2, [r4, #16]
 800855c:	b942      	cbnz	r2, 8008570 <__swsetup_r+0xa4>
 800855e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008562:	d1c5      	bne.n	80084f0 <__swsetup_r+0x24>
 8008564:	bd38      	pop	{r3, r4, r5, pc}
 8008566:	0799      	lsls	r1, r3, #30
 8008568:	bf58      	it	pl
 800856a:	6962      	ldrpl	r2, [r4, #20]
 800856c:	60a2      	str	r2, [r4, #8]
 800856e:	e7f4      	b.n	800855a <__swsetup_r+0x8e>
 8008570:	2000      	movs	r0, #0
 8008572:	e7f7      	b.n	8008564 <__swsetup_r+0x98>
 8008574:	20000418 	.word	0x20000418

08008578 <_sbrk_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4d06      	ldr	r5, [pc, #24]	@ (8008594 <_sbrk_r+0x1c>)
 800857c:	2300      	movs	r3, #0
 800857e:	4604      	mov	r4, r0
 8008580:	4608      	mov	r0, r1
 8008582:	602b      	str	r3, [r5, #0]
 8008584:	f7f9 fd76 	bl	8002074 <_sbrk>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d102      	bne.n	8008592 <_sbrk_r+0x1a>
 800858c:	682b      	ldr	r3, [r5, #0]
 800858e:	b103      	cbz	r3, 8008592 <_sbrk_r+0x1a>
 8008590:	6023      	str	r3, [r4, #0]
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	200017c4 	.word	0x200017c4

08008598 <abort>:
 8008598:	b508      	push	{r3, lr}
 800859a:	2006      	movs	r0, #6
 800859c:	f000 f88e 	bl	80086bc <raise>
 80085a0:	2001      	movs	r0, #1
 80085a2:	f7f9 fd0b 	bl	8001fbc <_exit>

080085a6 <__swhatbuf_r>:
 80085a6:	b570      	push	{r4, r5, r6, lr}
 80085a8:	460c      	mov	r4, r1
 80085aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ae:	2900      	cmp	r1, #0
 80085b0:	b096      	sub	sp, #88	@ 0x58
 80085b2:	4615      	mov	r5, r2
 80085b4:	461e      	mov	r6, r3
 80085b6:	da0d      	bge.n	80085d4 <__swhatbuf_r+0x2e>
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085be:	f04f 0100 	mov.w	r1, #0
 80085c2:	bf14      	ite	ne
 80085c4:	2340      	movne	r3, #64	@ 0x40
 80085c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085ca:	2000      	movs	r0, #0
 80085cc:	6031      	str	r1, [r6, #0]
 80085ce:	602b      	str	r3, [r5, #0]
 80085d0:	b016      	add	sp, #88	@ 0x58
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	466a      	mov	r2, sp
 80085d6:	f000 f879 	bl	80086cc <_fstat_r>
 80085da:	2800      	cmp	r0, #0
 80085dc:	dbec      	blt.n	80085b8 <__swhatbuf_r+0x12>
 80085de:	9901      	ldr	r1, [sp, #4]
 80085e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085e8:	4259      	negs	r1, r3
 80085ea:	4159      	adcs	r1, r3
 80085ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085f0:	e7eb      	b.n	80085ca <__swhatbuf_r+0x24>

080085f2 <__smakebuf_r>:
 80085f2:	898b      	ldrh	r3, [r1, #12]
 80085f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f6:	079d      	lsls	r5, r3, #30
 80085f8:	4606      	mov	r6, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	d507      	bpl.n	800860e <__smakebuf_r+0x1c>
 80085fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008602:	6023      	str	r3, [r4, #0]
 8008604:	6123      	str	r3, [r4, #16]
 8008606:	2301      	movs	r3, #1
 8008608:	6163      	str	r3, [r4, #20]
 800860a:	b003      	add	sp, #12
 800860c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860e:	ab01      	add	r3, sp, #4
 8008610:	466a      	mov	r2, sp
 8008612:	f7ff ffc8 	bl	80085a6 <__swhatbuf_r>
 8008616:	9f00      	ldr	r7, [sp, #0]
 8008618:	4605      	mov	r5, r0
 800861a:	4639      	mov	r1, r7
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff faff 	bl	8007c20 <_malloc_r>
 8008622:	b948      	cbnz	r0, 8008638 <__smakebuf_r+0x46>
 8008624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008628:	059a      	lsls	r2, r3, #22
 800862a:	d4ee      	bmi.n	800860a <__smakebuf_r+0x18>
 800862c:	f023 0303 	bic.w	r3, r3, #3
 8008630:	f043 0302 	orr.w	r3, r3, #2
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	e7e2      	b.n	80085fe <__smakebuf_r+0xc>
 8008638:	89a3      	ldrh	r3, [r4, #12]
 800863a:	6020      	str	r0, [r4, #0]
 800863c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008640:	81a3      	strh	r3, [r4, #12]
 8008642:	9b01      	ldr	r3, [sp, #4]
 8008644:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008648:	b15b      	cbz	r3, 8008662 <__smakebuf_r+0x70>
 800864a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800864e:	4630      	mov	r0, r6
 8008650:	f000 f84e 	bl	80086f0 <_isatty_r>
 8008654:	b128      	cbz	r0, 8008662 <__smakebuf_r+0x70>
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	f023 0303 	bic.w	r3, r3, #3
 800865c:	f043 0301 	orr.w	r3, r3, #1
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	89a3      	ldrh	r3, [r4, #12]
 8008664:	431d      	orrs	r5, r3
 8008666:	81a5      	strh	r5, [r4, #12]
 8008668:	e7cf      	b.n	800860a <__smakebuf_r+0x18>

0800866a <_raise_r>:
 800866a:	291f      	cmp	r1, #31
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4605      	mov	r5, r0
 8008670:	460c      	mov	r4, r1
 8008672:	d904      	bls.n	800867e <_raise_r+0x14>
 8008674:	2316      	movs	r3, #22
 8008676:	6003      	str	r3, [r0, #0]
 8008678:	f04f 30ff 	mov.w	r0, #4294967295
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008680:	b112      	cbz	r2, 8008688 <_raise_r+0x1e>
 8008682:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008686:	b94b      	cbnz	r3, 800869c <_raise_r+0x32>
 8008688:	4628      	mov	r0, r5
 800868a:	f000 f853 	bl	8008734 <_getpid_r>
 800868e:	4622      	mov	r2, r4
 8008690:	4601      	mov	r1, r0
 8008692:	4628      	mov	r0, r5
 8008694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008698:	f000 b83a 	b.w	8008710 <_kill_r>
 800869c:	2b01      	cmp	r3, #1
 800869e:	d00a      	beq.n	80086b6 <_raise_r+0x4c>
 80086a0:	1c59      	adds	r1, r3, #1
 80086a2:	d103      	bne.n	80086ac <_raise_r+0x42>
 80086a4:	2316      	movs	r3, #22
 80086a6:	6003      	str	r3, [r0, #0]
 80086a8:	2001      	movs	r0, #1
 80086aa:	e7e7      	b.n	800867c <_raise_r+0x12>
 80086ac:	2100      	movs	r1, #0
 80086ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086b2:	4620      	mov	r0, r4
 80086b4:	4798      	blx	r3
 80086b6:	2000      	movs	r0, #0
 80086b8:	e7e0      	b.n	800867c <_raise_r+0x12>
	...

080086bc <raise>:
 80086bc:	4b02      	ldr	r3, [pc, #8]	@ (80086c8 <raise+0xc>)
 80086be:	4601      	mov	r1, r0
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	f7ff bfd2 	b.w	800866a <_raise_r>
 80086c6:	bf00      	nop
 80086c8:	20000418 	.word	0x20000418

080086cc <_fstat_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d07      	ldr	r5, [pc, #28]	@ (80086ec <_fstat_r+0x20>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	4611      	mov	r1, r2
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	f7f9 fca3 	bl	8002024 <_fstat>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	d102      	bne.n	80086e8 <_fstat_r+0x1c>
 80086e2:	682b      	ldr	r3, [r5, #0]
 80086e4:	b103      	cbz	r3, 80086e8 <_fstat_r+0x1c>
 80086e6:	6023      	str	r3, [r4, #0]
 80086e8:	bd38      	pop	{r3, r4, r5, pc}
 80086ea:	bf00      	nop
 80086ec:	200017c4 	.word	0x200017c4

080086f0 <_isatty_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d06      	ldr	r5, [pc, #24]	@ (800870c <_isatty_r+0x1c>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	f7f9 fca2 	bl	8002044 <_isatty>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_isatty_r+0x1a>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_isatty_r+0x1a>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	200017c4 	.word	0x200017c4

08008710 <_kill_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	@ (8008730 <_kill_r+0x20>)
 8008714:	2300      	movs	r3, #0
 8008716:	4604      	mov	r4, r0
 8008718:	4608      	mov	r0, r1
 800871a:	4611      	mov	r1, r2
 800871c:	602b      	str	r3, [r5, #0]
 800871e:	f7f9 fc3d 	bl	8001f9c <_kill>
 8008722:	1c43      	adds	r3, r0, #1
 8008724:	d102      	bne.n	800872c <_kill_r+0x1c>
 8008726:	682b      	ldr	r3, [r5, #0]
 8008728:	b103      	cbz	r3, 800872c <_kill_r+0x1c>
 800872a:	6023      	str	r3, [r4, #0]
 800872c:	bd38      	pop	{r3, r4, r5, pc}
 800872e:	bf00      	nop
 8008730:	200017c4 	.word	0x200017c4

08008734 <_getpid_r>:
 8008734:	f7f9 bc2a 	b.w	8001f8c <_getpid>

08008738 <tan>:
 8008738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800873a:	ec53 2b10 	vmov	r2, r3, d0
 800873e:	4816      	ldr	r0, [pc, #88]	@ (8008798 <tan+0x60>)
 8008740:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008744:	4281      	cmp	r1, r0
 8008746:	d807      	bhi.n	8008758 <tan+0x20>
 8008748:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8008790 <tan+0x58>
 800874c:	2001      	movs	r0, #1
 800874e:	b005      	add	sp, #20
 8008750:	f85d eb04 	ldr.w	lr, [sp], #4
 8008754:	f000 b8ac 	b.w	80088b0 <__kernel_tan>
 8008758:	4810      	ldr	r0, [pc, #64]	@ (800879c <tan+0x64>)
 800875a:	4281      	cmp	r1, r0
 800875c:	d908      	bls.n	8008770 <tan+0x38>
 800875e:	4610      	mov	r0, r2
 8008760:	4619      	mov	r1, r3
 8008762:	f7f7 fd89 	bl	8000278 <__aeabi_dsub>
 8008766:	ec41 0b10 	vmov	d0, r0, r1
 800876a:	b005      	add	sp, #20
 800876c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008770:	4668      	mov	r0, sp
 8008772:	f000 faa1 	bl	8008cb8 <__ieee754_rem_pio2>
 8008776:	0040      	lsls	r0, r0, #1
 8008778:	f000 0002 	and.w	r0, r0, #2
 800877c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008780:	ed9d 0b00 	vldr	d0, [sp]
 8008784:	f1c0 0001 	rsb	r0, r0, #1
 8008788:	f000 f892 	bl	80088b0 <__kernel_tan>
 800878c:	e7ed      	b.n	800876a <tan+0x32>
 800878e:	bf00      	nop
	...
 8008798:	3fe921fb 	.word	0x3fe921fb
 800879c:	7fefffff 	.word	0x7fefffff

080087a0 <powf>:
 80087a0:	b508      	push	{r3, lr}
 80087a2:	ed2d 8b04 	vpush	{d8-d9}
 80087a6:	eeb0 8a60 	vmov.f32	s16, s1
 80087aa:	eeb0 9a40 	vmov.f32	s18, s0
 80087ae:	f000 fc87 	bl	80090c0 <__ieee754_powf>
 80087b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80087b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ba:	eef0 8a40 	vmov.f32	s17, s0
 80087be:	d63e      	bvs.n	800883e <powf+0x9e>
 80087c0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80087c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c8:	d112      	bne.n	80087f0 <powf+0x50>
 80087ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80087ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d2:	d039      	beq.n	8008848 <powf+0xa8>
 80087d4:	eeb0 0a48 	vmov.f32	s0, s16
 80087d8:	f000 f839 	bl	800884e <finitef>
 80087dc:	b378      	cbz	r0, 800883e <powf+0x9e>
 80087de:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80087e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e6:	d52a      	bpl.n	800883e <powf+0x9e>
 80087e8:	f7ff f95a 	bl	8007aa0 <__errno>
 80087ec:	2322      	movs	r3, #34	@ 0x22
 80087ee:	e014      	b.n	800881a <powf+0x7a>
 80087f0:	f000 f82d 	bl	800884e <finitef>
 80087f4:	b998      	cbnz	r0, 800881e <powf+0x7e>
 80087f6:	eeb0 0a49 	vmov.f32	s0, s18
 80087fa:	f000 f828 	bl	800884e <finitef>
 80087fe:	b170      	cbz	r0, 800881e <powf+0x7e>
 8008800:	eeb0 0a48 	vmov.f32	s0, s16
 8008804:	f000 f823 	bl	800884e <finitef>
 8008808:	b148      	cbz	r0, 800881e <powf+0x7e>
 800880a:	eef4 8a68 	vcmp.f32	s17, s17
 800880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008812:	d7e9      	bvc.n	80087e8 <powf+0x48>
 8008814:	f7ff f944 	bl	8007aa0 <__errno>
 8008818:	2321      	movs	r3, #33	@ 0x21
 800881a:	6003      	str	r3, [r0, #0]
 800881c:	e00f      	b.n	800883e <powf+0x9e>
 800881e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008826:	d10a      	bne.n	800883e <powf+0x9e>
 8008828:	eeb0 0a49 	vmov.f32	s0, s18
 800882c:	f000 f80f 	bl	800884e <finitef>
 8008830:	b128      	cbz	r0, 800883e <powf+0x9e>
 8008832:	eeb0 0a48 	vmov.f32	s0, s16
 8008836:	f000 f80a 	bl	800884e <finitef>
 800883a:	2800      	cmp	r0, #0
 800883c:	d1d4      	bne.n	80087e8 <powf+0x48>
 800883e:	eeb0 0a68 	vmov.f32	s0, s17
 8008842:	ecbd 8b04 	vpop	{d8-d9}
 8008846:	bd08      	pop	{r3, pc}
 8008848:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800884c:	e7f7      	b.n	800883e <powf+0x9e>

0800884e <finitef>:
 800884e:	ee10 3a10 	vmov	r3, s0
 8008852:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8008856:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800885a:	bfac      	ite	ge
 800885c:	2000      	movge	r0, #0
 800885e:	2001      	movlt	r0, #1
 8008860:	4770      	bx	lr
	...

08008864 <roundf>:
 8008864:	ee10 0a10 	vmov	r0, s0
 8008868:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800886c:	3a7f      	subs	r2, #127	@ 0x7f
 800886e:	2a16      	cmp	r2, #22
 8008870:	dc15      	bgt.n	800889e <roundf+0x3a>
 8008872:	2a00      	cmp	r2, #0
 8008874:	da08      	bge.n	8008888 <roundf+0x24>
 8008876:	3201      	adds	r2, #1
 8008878:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800887c:	d101      	bne.n	8008882 <roundf+0x1e>
 800887e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8008882:	ee00 3a10 	vmov	s0, r3
 8008886:	4770      	bx	lr
 8008888:	4907      	ldr	r1, [pc, #28]	@ (80088a8 <roundf+0x44>)
 800888a:	4111      	asrs	r1, r2
 800888c:	4201      	tst	r1, r0
 800888e:	d0fa      	beq.n	8008886 <roundf+0x22>
 8008890:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008894:	4113      	asrs	r3, r2
 8008896:	4403      	add	r3, r0
 8008898:	ea23 0301 	bic.w	r3, r3, r1
 800889c:	e7f1      	b.n	8008882 <roundf+0x1e>
 800889e:	2a80      	cmp	r2, #128	@ 0x80
 80088a0:	d1f1      	bne.n	8008886 <roundf+0x22>
 80088a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80088a6:	4770      	bx	lr
 80088a8:	007fffff 	.word	0x007fffff
 80088ac:	00000000 	.word	0x00000000

080088b0 <__kernel_tan>:
 80088b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	ec5b ab10 	vmov	sl, fp, d0
 80088b8:	4bdb      	ldr	r3, [pc, #876]	@ (8008c28 <__kernel_tan+0x378>)
 80088ba:	b089      	sub	sp, #36	@ 0x24
 80088bc:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 80088c0:	429f      	cmp	r7, r3
 80088c2:	ec59 8b11 	vmov	r8, r9, d1
 80088c6:	4606      	mov	r6, r0
 80088c8:	f8cd b008 	str.w	fp, [sp, #8]
 80088cc:	d85d      	bhi.n	800898a <__kernel_tan+0xda>
 80088ce:	4650      	mov	r0, sl
 80088d0:	4659      	mov	r1, fp
 80088d2:	f7f8 f923 	bl	8000b1c <__aeabi_d2iz>
 80088d6:	4605      	mov	r5, r0
 80088d8:	2800      	cmp	r0, #0
 80088da:	d17c      	bne.n	80089d6 <__kernel_tan+0x126>
 80088dc:	1c73      	adds	r3, r6, #1
 80088de:	4652      	mov	r2, sl
 80088e0:	4313      	orrs	r3, r2
 80088e2:	433b      	orrs	r3, r7
 80088e4:	d110      	bne.n	8008908 <__kernel_tan+0x58>
 80088e6:	ec4b ab10 	vmov	d0, sl, fp
 80088ea:	f000 fbe1 	bl	80090b0 <fabs>
 80088ee:	49cf      	ldr	r1, [pc, #828]	@ (8008c2c <__kernel_tan+0x37c>)
 80088f0:	ec53 2b10 	vmov	r2, r3, d0
 80088f4:	2000      	movs	r0, #0
 80088f6:	f7f7 ffa1 	bl	800083c <__aeabi_ddiv>
 80088fa:	4682      	mov	sl, r0
 80088fc:	468b      	mov	fp, r1
 80088fe:	ec4b ab10 	vmov	d0, sl, fp
 8008902:	b009      	add	sp, #36	@ 0x24
 8008904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008908:	2e01      	cmp	r6, #1
 800890a:	d0f8      	beq.n	80088fe <__kernel_tan+0x4e>
 800890c:	4642      	mov	r2, r8
 800890e:	464b      	mov	r3, r9
 8008910:	4650      	mov	r0, sl
 8008912:	4659      	mov	r1, fp
 8008914:	f7f7 fcb2 	bl	800027c <__adddf3>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	460f      	mov	r7, r1
 800891e:	2000      	movs	r0, #0
 8008920:	49c3      	ldr	r1, [pc, #780]	@ (8008c30 <__kernel_tan+0x380>)
 8008922:	f7f7 ff8b 	bl	800083c <__aeabi_ddiv>
 8008926:	e9cd 0100 	strd	r0, r1, [sp]
 800892a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800892e:	462e      	mov	r6, r5
 8008930:	4652      	mov	r2, sl
 8008932:	462c      	mov	r4, r5
 8008934:	4630      	mov	r0, r6
 8008936:	461d      	mov	r5, r3
 8008938:	4639      	mov	r1, r7
 800893a:	465b      	mov	r3, fp
 800893c:	f7f7 fc9c 	bl	8000278 <__aeabi_dsub>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4640      	mov	r0, r8
 8008946:	4649      	mov	r1, r9
 8008948:	f7f7 fc96 	bl	8000278 <__aeabi_dsub>
 800894c:	4632      	mov	r2, r6
 800894e:	462b      	mov	r3, r5
 8008950:	f7f7 fe4a 	bl	80005e8 <__aeabi_dmul>
 8008954:	4632      	mov	r2, r6
 8008956:	4682      	mov	sl, r0
 8008958:	468b      	mov	fp, r1
 800895a:	462b      	mov	r3, r5
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f7 fe42 	bl	80005e8 <__aeabi_dmul>
 8008964:	4bb1      	ldr	r3, [pc, #708]	@ (8008c2c <__kernel_tan+0x37c>)
 8008966:	2200      	movs	r2, #0
 8008968:	f7f7 fc88 	bl	800027c <__adddf3>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4650      	mov	r0, sl
 8008972:	4659      	mov	r1, fp
 8008974:	f7f7 fc82 	bl	800027c <__adddf3>
 8008978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800897c:	f7f7 fe34 	bl	80005e8 <__aeabi_dmul>
 8008980:	4622      	mov	r2, r4
 8008982:	462b      	mov	r3, r5
 8008984:	f7f7 fc7a 	bl	800027c <__adddf3>
 8008988:	e7b7      	b.n	80088fa <__kernel_tan+0x4a>
 800898a:	4baa      	ldr	r3, [pc, #680]	@ (8008c34 <__kernel_tan+0x384>)
 800898c:	429f      	cmp	r7, r3
 800898e:	d922      	bls.n	80089d6 <__kernel_tan+0x126>
 8008990:	9b02      	ldr	r3, [sp, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	da05      	bge.n	80089a2 <__kernel_tan+0xf2>
 8008996:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800899a:	469b      	mov	fp, r3
 800899c:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80089a0:	4699      	mov	r9, r3
 80089a2:	4652      	mov	r2, sl
 80089a4:	465b      	mov	r3, fp
 80089a6:	a182      	add	r1, pc, #520	@ (adr r1, 8008bb0 <__kernel_tan+0x300>)
 80089a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ac:	f7f7 fc64 	bl	8000278 <__aeabi_dsub>
 80089b0:	4642      	mov	r2, r8
 80089b2:	464b      	mov	r3, r9
 80089b4:	4604      	mov	r4, r0
 80089b6:	460d      	mov	r5, r1
 80089b8:	a17f      	add	r1, pc, #508	@ (adr r1, 8008bb8 <__kernel_tan+0x308>)
 80089ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089be:	f7f7 fc5b 	bl	8000278 <__aeabi_dsub>
 80089c2:	4622      	mov	r2, r4
 80089c4:	462b      	mov	r3, r5
 80089c6:	f7f7 fc59 	bl	800027c <__adddf3>
 80089ca:	f04f 0800 	mov.w	r8, #0
 80089ce:	4682      	mov	sl, r0
 80089d0:	468b      	mov	fp, r1
 80089d2:	f04f 0900 	mov.w	r9, #0
 80089d6:	4652      	mov	r2, sl
 80089d8:	465b      	mov	r3, fp
 80089da:	4650      	mov	r0, sl
 80089dc:	4659      	mov	r1, fp
 80089de:	f7f7 fe03 	bl	80005e8 <__aeabi_dmul>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	e9cd 2300 	strd	r2, r3, [sp]
 80089ea:	f7f7 fdfd 	bl	80005e8 <__aeabi_dmul>
 80089ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089f2:	4604      	mov	r4, r0
 80089f4:	460d      	mov	r5, r1
 80089f6:	4650      	mov	r0, sl
 80089f8:	4659      	mov	r1, fp
 80089fa:	f7f7 fdf5 	bl	80005e8 <__aeabi_dmul>
 80089fe:	a370      	add	r3, pc, #448	@ (adr r3, 8008bc0 <__kernel_tan+0x310>)
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a08:	4620      	mov	r0, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f7f7 fdec 	bl	80005e8 <__aeabi_dmul>
 8008a10:	a36d      	add	r3, pc, #436	@ (adr r3, 8008bc8 <__kernel_tan+0x318>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	f7f7 fc31 	bl	800027c <__adddf3>
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	462b      	mov	r3, r5
 8008a1e:	f7f7 fde3 	bl	80005e8 <__aeabi_dmul>
 8008a22:	a36b      	add	r3, pc, #428	@ (adr r3, 8008bd0 <__kernel_tan+0x320>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fc28 	bl	800027c <__adddf3>
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	f7f7 fdda 	bl	80005e8 <__aeabi_dmul>
 8008a34:	a368      	add	r3, pc, #416	@ (adr r3, 8008bd8 <__kernel_tan+0x328>)
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f7f7 fc1f 	bl	800027c <__adddf3>
 8008a3e:	4622      	mov	r2, r4
 8008a40:	462b      	mov	r3, r5
 8008a42:	f7f7 fdd1 	bl	80005e8 <__aeabi_dmul>
 8008a46:	a366      	add	r3, pc, #408	@ (adr r3, 8008be0 <__kernel_tan+0x330>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f7f7 fc16 	bl	800027c <__adddf3>
 8008a50:	4622      	mov	r2, r4
 8008a52:	462b      	mov	r3, r5
 8008a54:	f7f7 fdc8 	bl	80005e8 <__aeabi_dmul>
 8008a58:	a363      	add	r3, pc, #396	@ (adr r3, 8008be8 <__kernel_tan+0x338>)
 8008a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5e:	f7f7 fc0d 	bl	800027c <__adddf3>
 8008a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a66:	f7f7 fdbf 	bl	80005e8 <__aeabi_dmul>
 8008a6a:	a361      	add	r3, pc, #388	@ (adr r3, 8008bf0 <__kernel_tan+0x340>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a74:	4620      	mov	r0, r4
 8008a76:	4629      	mov	r1, r5
 8008a78:	f7f7 fdb6 	bl	80005e8 <__aeabi_dmul>
 8008a7c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008bf8 <__kernel_tan+0x348>)
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	f7f7 fbfb 	bl	800027c <__adddf3>
 8008a86:	4622      	mov	r2, r4
 8008a88:	462b      	mov	r3, r5
 8008a8a:	f7f7 fdad 	bl	80005e8 <__aeabi_dmul>
 8008a8e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008c00 <__kernel_tan+0x350>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fbf2 	bl	800027c <__adddf3>
 8008a98:	4622      	mov	r2, r4
 8008a9a:	462b      	mov	r3, r5
 8008a9c:	f7f7 fda4 	bl	80005e8 <__aeabi_dmul>
 8008aa0:	a359      	add	r3, pc, #356	@ (adr r3, 8008c08 <__kernel_tan+0x358>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	f7f7 fbe9 	bl	800027c <__adddf3>
 8008aaa:	4622      	mov	r2, r4
 8008aac:	462b      	mov	r3, r5
 8008aae:	f7f7 fd9b 	bl	80005e8 <__aeabi_dmul>
 8008ab2:	a357      	add	r3, pc, #348	@ (adr r3, 8008c10 <__kernel_tan+0x360>)
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	f7f7 fbe0 	bl	800027c <__adddf3>
 8008abc:	4622      	mov	r2, r4
 8008abe:	462b      	mov	r3, r5
 8008ac0:	f7f7 fd92 	bl	80005e8 <__aeabi_dmul>
 8008ac4:	a354      	add	r3, pc, #336	@ (adr r3, 8008c18 <__kernel_tan+0x368>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f7 fbd7 	bl	800027c <__adddf3>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ad6:	f7f7 fbd1 	bl	800027c <__adddf3>
 8008ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ade:	f7f7 fd83 	bl	80005e8 <__aeabi_dmul>
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	f7f7 fbc9 	bl	800027c <__adddf3>
 8008aea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aee:	f7f7 fd7b 	bl	80005e8 <__aeabi_dmul>
 8008af2:	4642      	mov	r2, r8
 8008af4:	464b      	mov	r3, r9
 8008af6:	f7f7 fbc1 	bl	800027c <__adddf3>
 8008afa:	a349      	add	r3, pc, #292	@ (adr r3, 8008c20 <__kernel_tan+0x370>)
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	4604      	mov	r4, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b08:	f7f7 fd6e 	bl	80005e8 <__aeabi_dmul>
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	462b      	mov	r3, r5
 8008b10:	f7f7 fbb4 	bl	800027c <__adddf3>
 8008b14:	e9cd 0100 	strd	r0, r1, [sp]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	4659      	mov	r1, fp
 8008b1e:	4650      	mov	r0, sl
 8008b20:	f7f7 fbac 	bl	800027c <__adddf3>
 8008b24:	4b43      	ldr	r3, [pc, #268]	@ (8008c34 <__kernel_tan+0x384>)
 8008b26:	429f      	cmp	r7, r3
 8008b28:	4604      	mov	r4, r0
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	f240 8084 	bls.w	8008c38 <__kernel_tan+0x388>
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7f7 fcef 	bl	8000514 <__aeabi_i2d>
 8008b36:	4622      	mov	r2, r4
 8008b38:	4680      	mov	r8, r0
 8008b3a:	4689      	mov	r9, r1
 8008b3c:	462b      	mov	r3, r5
 8008b3e:	4620      	mov	r0, r4
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7f7 fd51 	bl	80005e8 <__aeabi_dmul>
 8008b46:	4642      	mov	r2, r8
 8008b48:	4606      	mov	r6, r0
 8008b4a:	460f      	mov	r7, r1
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f7 fb93 	bl	800027c <__adddf3>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	f7f7 fe6d 	bl	800083c <__aeabi_ddiv>
 8008b62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b66:	f7f7 fb87 	bl	8000278 <__aeabi_dsub>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4650      	mov	r0, sl
 8008b70:	4659      	mov	r1, fp
 8008b72:	f7f7 fb81 	bl	8000278 <__aeabi_dsub>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	f7f7 fb7f 	bl	800027c <__adddf3>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4640      	mov	r0, r8
 8008b84:	4649      	mov	r1, r9
 8008b86:	f7f7 fb77 	bl	8000278 <__aeabi_dsub>
 8008b8a:	9b02      	ldr	r3, [sp, #8]
 8008b8c:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8008b90:	f00a 0a02 	and.w	sl, sl, #2
 8008b94:	4604      	mov	r4, r0
 8008b96:	f1ca 0001 	rsb	r0, sl, #1
 8008b9a:	460d      	mov	r5, r1
 8008b9c:	f7f7 fcba 	bl	8000514 <__aeabi_i2d>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	f7f7 fd1e 	bl	80005e8 <__aeabi_dmul>
 8008bac:	e6a5      	b.n	80088fa <__kernel_tan+0x4a>
 8008bae:	bf00      	nop
 8008bb0:	54442d18 	.word	0x54442d18
 8008bb4:	3fe921fb 	.word	0x3fe921fb
 8008bb8:	33145c07 	.word	0x33145c07
 8008bbc:	3c81a626 	.word	0x3c81a626
 8008bc0:	74bf7ad4 	.word	0x74bf7ad4
 8008bc4:	3efb2a70 	.word	0x3efb2a70
 8008bc8:	32f0a7e9 	.word	0x32f0a7e9
 8008bcc:	3f12b80f 	.word	0x3f12b80f
 8008bd0:	1a8d1068 	.word	0x1a8d1068
 8008bd4:	3f3026f7 	.word	0x3f3026f7
 8008bd8:	fee08315 	.word	0xfee08315
 8008bdc:	3f57dbc8 	.word	0x3f57dbc8
 8008be0:	e96e8493 	.word	0xe96e8493
 8008be4:	3f8226e3 	.word	0x3f8226e3
 8008be8:	1bb341fe 	.word	0x1bb341fe
 8008bec:	3faba1ba 	.word	0x3faba1ba
 8008bf0:	db605373 	.word	0xdb605373
 8008bf4:	bef375cb 	.word	0xbef375cb
 8008bf8:	a03792a6 	.word	0xa03792a6
 8008bfc:	3f147e88 	.word	0x3f147e88
 8008c00:	f2f26501 	.word	0xf2f26501
 8008c04:	3f4344d8 	.word	0x3f4344d8
 8008c08:	c9560328 	.word	0xc9560328
 8008c0c:	3f6d6d22 	.word	0x3f6d6d22
 8008c10:	8406d637 	.word	0x8406d637
 8008c14:	3f9664f4 	.word	0x3f9664f4
 8008c18:	1110fe7a 	.word	0x1110fe7a
 8008c1c:	3fc11111 	.word	0x3fc11111
 8008c20:	55555563 	.word	0x55555563
 8008c24:	3fd55555 	.word	0x3fd55555
 8008c28:	3e2fffff 	.word	0x3e2fffff
 8008c2c:	3ff00000 	.word	0x3ff00000
 8008c30:	bff00000 	.word	0xbff00000
 8008c34:	3fe59427 	.word	0x3fe59427
 8008c38:	2e01      	cmp	r6, #1
 8008c3a:	d033      	beq.n	8008ca4 <__kernel_tan+0x3f4>
 8008c3c:	f04f 0800 	mov.w	r8, #0
 8008c40:	4689      	mov	r9, r1
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	2000      	movs	r0, #0
 8008c48:	4918      	ldr	r1, [pc, #96]	@ (8008cac <__kernel_tan+0x3fc>)
 8008c4a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008c4e:	f7f7 fdf5 	bl	800083c <__aeabi_ddiv>
 8008c52:	4652      	mov	r2, sl
 8008c54:	460f      	mov	r7, r1
 8008c56:	465b      	mov	r3, fp
 8008c58:	4606      	mov	r6, r0
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	4649      	mov	r1, r9
 8008c60:	f7f7 fb0a 	bl	8000278 <__aeabi_dsub>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c6c:	f7f7 fb04 	bl	8000278 <__aeabi_dsub>
 8008c70:	4642      	mov	r2, r8
 8008c72:	463b      	mov	r3, r7
 8008c74:	f7f7 fcb8 	bl	80005e8 <__aeabi_dmul>
 8008c78:	4642      	mov	r2, r8
 8008c7a:	4682      	mov	sl, r0
 8008c7c:	468b      	mov	fp, r1
 8008c7e:	463b      	mov	r3, r7
 8008c80:	4640      	mov	r0, r8
 8008c82:	4649      	mov	r1, r9
 8008c84:	f7f7 fcb0 	bl	80005e8 <__aeabi_dmul>
 8008c88:	4b09      	ldr	r3, [pc, #36]	@ (8008cb0 <__kernel_tan+0x400>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f7f7 faf6 	bl	800027c <__adddf3>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4650      	mov	r0, sl
 8008c96:	4659      	mov	r1, fp
 8008c98:	f7f7 faf0 	bl	800027c <__adddf3>
 8008c9c:	4644      	mov	r4, r8
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	463b      	mov	r3, r7
 8008ca2:	e66b      	b.n	800897c <__kernel_tan+0xcc>
 8008ca4:	4682      	mov	sl, r0
 8008ca6:	468b      	mov	fp, r1
 8008ca8:	e629      	b.n	80088fe <__kernel_tan+0x4e>
 8008caa:	bf00      	nop
 8008cac:	bff00000 	.word	0xbff00000
 8008cb0:	3ff00000 	.word	0x3ff00000
 8008cb4:	00000000 	.word	0x00000000

08008cb8 <__ieee754_rem_pio2>:
 8008cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cbc:	ec57 6b10 	vmov	r6, r7, d0
 8008cc0:	4bc5      	ldr	r3, [pc, #788]	@ (8008fd8 <__ieee754_rem_pio2+0x320>)
 8008cc2:	b08d      	sub	sp, #52	@ 0x34
 8008cc4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008cc8:	4598      	cmp	r8, r3
 8008cca:	4604      	mov	r4, r0
 8008ccc:	9704      	str	r7, [sp, #16]
 8008cce:	d807      	bhi.n	8008ce0 <__ieee754_rem_pio2+0x28>
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	ed80 0b00 	vstr	d0, [r0]
 8008cd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008cdc:	2500      	movs	r5, #0
 8008cde:	e028      	b.n	8008d32 <__ieee754_rem_pio2+0x7a>
 8008ce0:	4bbe      	ldr	r3, [pc, #760]	@ (8008fdc <__ieee754_rem_pio2+0x324>)
 8008ce2:	4598      	cmp	r8, r3
 8008ce4:	d878      	bhi.n	8008dd8 <__ieee754_rem_pio2+0x120>
 8008ce6:	9b04      	ldr	r3, [sp, #16]
 8008ce8:	4dbd      	ldr	r5, [pc, #756]	@ (8008fe0 <__ieee754_rem_pio2+0x328>)
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	4630      	mov	r0, r6
 8008cee:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2e8>)
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	dd38      	ble.n	8008d6a <__ieee754_rem_pio2+0xb2>
 8008cf8:	f7f7 fabe 	bl	8000278 <__aeabi_dsub>
 8008cfc:	45a8      	cmp	r8, r5
 8008cfe:	4606      	mov	r6, r0
 8008d00:	460f      	mov	r7, r1
 8008d02:	d01a      	beq.n	8008d3a <__ieee754_rem_pio2+0x82>
 8008d04:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2f0>)
 8008d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0a:	f7f7 fab5 	bl	8000278 <__aeabi_dsub>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4680      	mov	r8, r0
 8008d14:	4689      	mov	r9, r1
 8008d16:	4630      	mov	r0, r6
 8008d18:	4639      	mov	r1, r7
 8008d1a:	f7f7 faad 	bl	8000278 <__aeabi_dsub>
 8008d1e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2f0>)
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f7f7 faa8 	bl	8000278 <__aeabi_dsub>
 8008d28:	e9c4 8900 	strd	r8, r9, [r4]
 8008d2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d30:	2501      	movs	r5, #1
 8008d32:	4628      	mov	r0, r5
 8008d34:	b00d      	add	sp, #52	@ 0x34
 8008d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3a:	a39d      	add	r3, pc, #628	@ (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2f8>)
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f7f7 fa9a 	bl	8000278 <__aeabi_dsub>
 8008d44:	a39c      	add	r3, pc, #624	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x300>)
 8008d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	460f      	mov	r7, r1
 8008d4e:	f7f7 fa93 	bl	8000278 <__aeabi_dsub>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4680      	mov	r8, r0
 8008d58:	4689      	mov	r9, r1
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	f7f7 fa8b 	bl	8000278 <__aeabi_dsub>
 8008d62:	a395      	add	r3, pc, #596	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x300>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	e7dc      	b.n	8008d24 <__ieee754_rem_pio2+0x6c>
 8008d6a:	f7f7 fa87 	bl	800027c <__adddf3>
 8008d6e:	45a8      	cmp	r8, r5
 8008d70:	4606      	mov	r6, r0
 8008d72:	460f      	mov	r7, r1
 8008d74:	d018      	beq.n	8008da8 <__ieee754_rem_pio2+0xf0>
 8008d76:	a38c      	add	r3, pc, #560	@ (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2f0>)
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	f7f7 fa7e 	bl	800027c <__adddf3>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4680      	mov	r8, r0
 8008d86:	4689      	mov	r9, r1
 8008d88:	4630      	mov	r0, r6
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 fa74 	bl	8000278 <__aeabi_dsub>
 8008d90:	a385      	add	r3, pc, #532	@ (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2f0>)
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f7f7 fa71 	bl	800027c <__adddf3>
 8008d9a:	f04f 35ff 	mov.w	r5, #4294967295
 8008d9e:	e9c4 8900 	strd	r8, r9, [r4]
 8008da2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008da6:	e7c4      	b.n	8008d32 <__ieee754_rem_pio2+0x7a>
 8008da8:	a381      	add	r3, pc, #516	@ (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2f8>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fa65 	bl	800027c <__adddf3>
 8008db2:	a381      	add	r3, pc, #516	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x300>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	4606      	mov	r6, r0
 8008dba:	460f      	mov	r7, r1
 8008dbc:	f7f7 fa5e 	bl	800027c <__adddf3>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4680      	mov	r8, r0
 8008dc6:	4689      	mov	r9, r1
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 fa54 	bl	8000278 <__aeabi_dsub>
 8008dd0:	a379      	add	r3, pc, #484	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x300>)
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	e7de      	b.n	8008d96 <__ieee754_rem_pio2+0xde>
 8008dd8:	4b82      	ldr	r3, [pc, #520]	@ (8008fe4 <__ieee754_rem_pio2+0x32c>)
 8008dda:	4598      	cmp	r8, r3
 8008ddc:	f200 80d1 	bhi.w	8008f82 <__ieee754_rem_pio2+0x2ca>
 8008de0:	f000 f966 	bl	80090b0 <fabs>
 8008de4:	ec57 6b10 	vmov	r6, r7, d0
 8008de8:	a375      	add	r3, pc, #468	@ (adr r3, 8008fc0 <__ieee754_rem_pio2+0x308>)
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	4630      	mov	r0, r6
 8008df0:	4639      	mov	r1, r7
 8008df2:	f7f7 fbf9 	bl	80005e8 <__aeabi_dmul>
 8008df6:	4b7c      	ldr	r3, [pc, #496]	@ (8008fe8 <__ieee754_rem_pio2+0x330>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f7f7 fa3f 	bl	800027c <__adddf3>
 8008dfe:	f7f7 fe8d 	bl	8000b1c <__aeabi_d2iz>
 8008e02:	4605      	mov	r5, r0
 8008e04:	f7f7 fb86 	bl	8000514 <__aeabi_i2d>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e10:	a363      	add	r3, pc, #396	@ (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2e8>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fbe7 	bl	80005e8 <__aeabi_dmul>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4630      	mov	r0, r6
 8008e20:	4639      	mov	r1, r7
 8008e22:	f7f7 fa29 	bl	8000278 <__aeabi_dsub>
 8008e26:	a360      	add	r3, pc, #384	@ (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2f0>)
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	468b      	mov	fp, r1
 8008e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e34:	f7f7 fbd8 	bl	80005e8 <__aeabi_dmul>
 8008e38:	2d1f      	cmp	r5, #31
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	dc0c      	bgt.n	8008e5a <__ieee754_rem_pio2+0x1a2>
 8008e40:	4b6a      	ldr	r3, [pc, #424]	@ (8008fec <__ieee754_rem_pio2+0x334>)
 8008e42:	1e6a      	subs	r2, r5, #1
 8008e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e48:	4543      	cmp	r3, r8
 8008e4a:	d006      	beq.n	8008e5a <__ieee754_rem_pio2+0x1a2>
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	463b      	mov	r3, r7
 8008e50:	4650      	mov	r0, sl
 8008e52:	4659      	mov	r1, fp
 8008e54:	f7f7 fa10 	bl	8000278 <__aeabi_dsub>
 8008e58:	e00e      	b.n	8008e78 <__ieee754_rem_pio2+0x1c0>
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	4650      	mov	r0, sl
 8008e60:	4659      	mov	r1, fp
 8008e62:	f7f7 fa09 	bl	8000278 <__aeabi_dsub>
 8008e66:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008e6a:	9305      	str	r3, [sp, #20]
 8008e6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e70:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008e74:	2b10      	cmp	r3, #16
 8008e76:	dc02      	bgt.n	8008e7e <__ieee754_rem_pio2+0x1c6>
 8008e78:	e9c4 0100 	strd	r0, r1, [r4]
 8008e7c:	e039      	b.n	8008ef2 <__ieee754_rem_pio2+0x23a>
 8008e7e:	a34c      	add	r3, pc, #304	@ (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2f8>)
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e88:	f7f7 fbae 	bl	80005e8 <__aeabi_dmul>
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	460f      	mov	r7, r1
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4650      	mov	r0, sl
 8008e96:	4659      	mov	r1, fp
 8008e98:	f7f7 f9ee 	bl	8000278 <__aeabi_dsub>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4680      	mov	r8, r0
 8008ea2:	4689      	mov	r9, r1
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	4659      	mov	r1, fp
 8008ea8:	f7f7 f9e6 	bl	8000278 <__aeabi_dsub>
 8008eac:	4632      	mov	r2, r6
 8008eae:	463b      	mov	r3, r7
 8008eb0:	f7f7 f9e2 	bl	8000278 <__aeabi_dsub>
 8008eb4:	a340      	add	r3, pc, #256	@ (adr r3, 8008fb8 <__ieee754_rem_pio2+0x300>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	4606      	mov	r6, r0
 8008ebc:	460f      	mov	r7, r1
 8008ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ec2:	f7f7 fb91 	bl	80005e8 <__aeabi_dmul>
 8008ec6:	4632      	mov	r2, r6
 8008ec8:	463b      	mov	r3, r7
 8008eca:	f7f7 f9d5 	bl	8000278 <__aeabi_dsub>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 f9cd 	bl	8000278 <__aeabi_dsub>
 8008ede:	9a05      	ldr	r2, [sp, #20]
 8008ee0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b31      	cmp	r3, #49	@ 0x31
 8008ee8:	dc20      	bgt.n	8008f2c <__ieee754_rem_pio2+0x274>
 8008eea:	e9c4 0100 	strd	r0, r1, [r4]
 8008eee:	46c2      	mov	sl, r8
 8008ef0:	46cb      	mov	fp, r9
 8008ef2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	4642      	mov	r2, r8
 8008efa:	464b      	mov	r3, r9
 8008efc:	4659      	mov	r1, fp
 8008efe:	f7f7 f9bb 	bl	8000278 <__aeabi_dsub>
 8008f02:	463b      	mov	r3, r7
 8008f04:	4632      	mov	r2, r6
 8008f06:	f7f7 f9b7 	bl	8000278 <__aeabi_dsub>
 8008f0a:	9b04      	ldr	r3, [sp, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f12:	f6bf af0e 	bge.w	8008d32 <__ieee754_rem_pio2+0x7a>
 8008f16:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f20:	f8c4 8000 	str.w	r8, [r4]
 8008f24:	60a0      	str	r0, [r4, #8]
 8008f26:	60e3      	str	r3, [r4, #12]
 8008f28:	426d      	negs	r5, r5
 8008f2a:	e702      	b.n	8008d32 <__ieee754_rem_pio2+0x7a>
 8008f2c:	a326      	add	r3, pc, #152	@ (adr r3, 8008fc8 <__ieee754_rem_pio2+0x310>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f36:	f7f7 fb57 	bl	80005e8 <__aeabi_dmul>
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460f      	mov	r7, r1
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4640      	mov	r0, r8
 8008f44:	4649      	mov	r1, r9
 8008f46:	f7f7 f997 	bl	8000278 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4682      	mov	sl, r0
 8008f50:	468b      	mov	fp, r1
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 f98f 	bl	8000278 <__aeabi_dsub>
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	f7f7 f98b 	bl	8000278 <__aeabi_dsub>
 8008f62:	a31b      	add	r3, pc, #108	@ (adr r3, 8008fd0 <__ieee754_rem_pio2+0x318>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	4606      	mov	r6, r0
 8008f6a:	460f      	mov	r7, r1
 8008f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f70:	f7f7 fb3a 	bl	80005e8 <__aeabi_dmul>
 8008f74:	4632      	mov	r2, r6
 8008f76:	463b      	mov	r3, r7
 8008f78:	f7f7 f97e 	bl	8000278 <__aeabi_dsub>
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	e764      	b.n	8008e4c <__ieee754_rem_pio2+0x194>
 8008f82:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff0 <__ieee754_rem_pio2+0x338>)
 8008f84:	4598      	cmp	r8, r3
 8008f86:	d935      	bls.n	8008ff4 <__ieee754_rem_pio2+0x33c>
 8008f88:	4632      	mov	r2, r6
 8008f8a:	463b      	mov	r3, r7
 8008f8c:	4630      	mov	r0, r6
 8008f8e:	4639      	mov	r1, r7
 8008f90:	f7f7 f972 	bl	8000278 <__aeabi_dsub>
 8008f94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f98:	e9c4 0100 	strd	r0, r1, [r4]
 8008f9c:	e69e      	b.n	8008cdc <__ieee754_rem_pio2+0x24>
 8008f9e:	bf00      	nop
 8008fa0:	54400000 	.word	0x54400000
 8008fa4:	3ff921fb 	.word	0x3ff921fb
 8008fa8:	1a626331 	.word	0x1a626331
 8008fac:	3dd0b461 	.word	0x3dd0b461
 8008fb0:	1a600000 	.word	0x1a600000
 8008fb4:	3dd0b461 	.word	0x3dd0b461
 8008fb8:	2e037073 	.word	0x2e037073
 8008fbc:	3ba3198a 	.word	0x3ba3198a
 8008fc0:	6dc9c883 	.word	0x6dc9c883
 8008fc4:	3fe45f30 	.word	0x3fe45f30
 8008fc8:	2e000000 	.word	0x2e000000
 8008fcc:	3ba3198a 	.word	0x3ba3198a
 8008fd0:	252049c1 	.word	0x252049c1
 8008fd4:	397b839a 	.word	0x397b839a
 8008fd8:	3fe921fb 	.word	0x3fe921fb
 8008fdc:	4002d97b 	.word	0x4002d97b
 8008fe0:	3ff921fb 	.word	0x3ff921fb
 8008fe4:	413921fb 	.word	0x413921fb
 8008fe8:	3fe00000 	.word	0x3fe00000
 8008fec:	0800a174 	.word	0x0800a174
 8008ff0:	7fefffff 	.word	0x7fefffff
 8008ff4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008ff8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008ffc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009000:	4630      	mov	r0, r6
 8009002:	460f      	mov	r7, r1
 8009004:	f7f7 fd8a 	bl	8000b1c <__aeabi_d2iz>
 8009008:	f7f7 fa84 	bl	8000514 <__aeabi_i2d>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009018:	f7f7 f92e 	bl	8000278 <__aeabi_dsub>
 800901c:	4b22      	ldr	r3, [pc, #136]	@ (80090a8 <__ieee754_rem_pio2+0x3f0>)
 800901e:	2200      	movs	r2, #0
 8009020:	f7f7 fae2 	bl	80005e8 <__aeabi_dmul>
 8009024:	460f      	mov	r7, r1
 8009026:	4606      	mov	r6, r0
 8009028:	f7f7 fd78 	bl	8000b1c <__aeabi_d2iz>
 800902c:	f7f7 fa72 	bl	8000514 <__aeabi_i2d>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800903c:	f7f7 f91c 	bl	8000278 <__aeabi_dsub>
 8009040:	4b19      	ldr	r3, [pc, #100]	@ (80090a8 <__ieee754_rem_pio2+0x3f0>)
 8009042:	2200      	movs	r2, #0
 8009044:	f7f7 fad0 	bl	80005e8 <__aeabi_dmul>
 8009048:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800904c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8009050:	f04f 0803 	mov.w	r8, #3
 8009054:	2600      	movs	r6, #0
 8009056:	2700      	movs	r7, #0
 8009058:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800905c:	4632      	mov	r2, r6
 800905e:	463b      	mov	r3, r7
 8009060:	46c2      	mov	sl, r8
 8009062:	f108 38ff 	add.w	r8, r8, #4294967295
 8009066:	f7f7 fd27 	bl	8000ab8 <__aeabi_dcmpeq>
 800906a:	2800      	cmp	r0, #0
 800906c:	d1f4      	bne.n	8009058 <__ieee754_rem_pio2+0x3a0>
 800906e:	4b0f      	ldr	r3, [pc, #60]	@ (80090ac <__ieee754_rem_pio2+0x3f4>)
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	2302      	movs	r3, #2
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	462a      	mov	r2, r5
 8009078:	4653      	mov	r3, sl
 800907a:	4621      	mov	r1, r4
 800907c:	a806      	add	r0, sp, #24
 800907e:	f000 fb87 	bl	8009790 <__kernel_rem_pio2>
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	4605      	mov	r5, r0
 8009088:	f6bf ae53 	bge.w	8008d32 <__ieee754_rem_pio2+0x7a>
 800908c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009090:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009094:	e9c4 2300 	strd	r2, r3, [r4]
 8009098:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800909c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80090a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80090a4:	e740      	b.n	8008f28 <__ieee754_rem_pio2+0x270>
 80090a6:	bf00      	nop
 80090a8:	41700000 	.word	0x41700000
 80090ac:	0800a1f4 	.word	0x0800a1f4

080090b0 <fabs>:
 80090b0:	ec51 0b10 	vmov	r0, r1, d0
 80090b4:	4602      	mov	r2, r0
 80090b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80090ba:	ec43 2b10 	vmov	d0, r2, r3
 80090be:	4770      	bx	lr

080090c0 <__ieee754_powf>:
 80090c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090c4:	ee10 4a90 	vmov	r4, s1
 80090c8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80090cc:	ed2d 8b02 	vpush	{d8}
 80090d0:	ee10 6a10 	vmov	r6, s0
 80090d4:	eeb0 8a40 	vmov.f32	s16, s0
 80090d8:	eef0 8a60 	vmov.f32	s17, s1
 80090dc:	d10c      	bne.n	80090f8 <__ieee754_powf+0x38>
 80090de:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80090e2:	0076      	lsls	r6, r6, #1
 80090e4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80090e8:	f240 8274 	bls.w	80095d4 <__ieee754_powf+0x514>
 80090ec:	ee38 0a28 	vadd.f32	s0, s16, s17
 80090f0:	ecbd 8b02 	vpop	{d8}
 80090f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80090fc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009100:	d802      	bhi.n	8009108 <__ieee754_powf+0x48>
 8009102:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009106:	d908      	bls.n	800911a <__ieee754_powf+0x5a>
 8009108:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800910c:	d1ee      	bne.n	80090ec <__ieee754_powf+0x2c>
 800910e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009112:	0064      	lsls	r4, r4, #1
 8009114:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009118:	e7e6      	b.n	80090e8 <__ieee754_powf+0x28>
 800911a:	2e00      	cmp	r6, #0
 800911c:	da1f      	bge.n	800915e <__ieee754_powf+0x9e>
 800911e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8009122:	f080 8260 	bcs.w	80095e6 <__ieee754_powf+0x526>
 8009126:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800912a:	d32f      	bcc.n	800918c <__ieee754_powf+0xcc>
 800912c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8009130:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009134:	fa49 f503 	asr.w	r5, r9, r3
 8009138:	fa05 f303 	lsl.w	r3, r5, r3
 800913c:	454b      	cmp	r3, r9
 800913e:	d123      	bne.n	8009188 <__ieee754_powf+0xc8>
 8009140:	f005 0501 	and.w	r5, r5, #1
 8009144:	f1c5 0502 	rsb	r5, r5, #2
 8009148:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800914c:	d11f      	bne.n	800918e <__ieee754_powf+0xce>
 800914e:	2c00      	cmp	r4, #0
 8009150:	f280 8246 	bge.w	80095e0 <__ieee754_powf+0x520>
 8009154:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009158:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800915c:	e7c8      	b.n	80090f0 <__ieee754_powf+0x30>
 800915e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009162:	d111      	bne.n	8009188 <__ieee754_powf+0xc8>
 8009164:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009168:	f000 8234 	beq.w	80095d4 <__ieee754_powf+0x514>
 800916c:	d906      	bls.n	800917c <__ieee754_powf+0xbc>
 800916e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8009484 <__ieee754_powf+0x3c4>
 8009172:	2c00      	cmp	r4, #0
 8009174:	bfa8      	it	ge
 8009176:	eeb0 0a68 	vmovge.f32	s0, s17
 800917a:	e7b9      	b.n	80090f0 <__ieee754_powf+0x30>
 800917c:	2c00      	cmp	r4, #0
 800917e:	f280 822c 	bge.w	80095da <__ieee754_powf+0x51a>
 8009182:	eeb1 0a68 	vneg.f32	s0, s17
 8009186:	e7b3      	b.n	80090f0 <__ieee754_powf+0x30>
 8009188:	2500      	movs	r5, #0
 800918a:	e7dd      	b.n	8009148 <__ieee754_powf+0x88>
 800918c:	2500      	movs	r5, #0
 800918e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009192:	d102      	bne.n	800919a <__ieee754_powf+0xda>
 8009194:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009198:	e7aa      	b.n	80090f0 <__ieee754_powf+0x30>
 800919a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800919e:	f040 8227 	bne.w	80095f0 <__ieee754_powf+0x530>
 80091a2:	2e00      	cmp	r6, #0
 80091a4:	f2c0 8224 	blt.w	80095f0 <__ieee754_powf+0x530>
 80091a8:	eeb0 0a48 	vmov.f32	s0, s16
 80091ac:	ecbd 8b02 	vpop	{d8}
 80091b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b4:	f000 bae6 	b.w	8009784 <__ieee754_sqrtf>
 80091b8:	2d01      	cmp	r5, #1
 80091ba:	d199      	bne.n	80090f0 <__ieee754_powf+0x30>
 80091bc:	eeb1 0a40 	vneg.f32	s0, s0
 80091c0:	e796      	b.n	80090f0 <__ieee754_powf+0x30>
 80091c2:	0ff0      	lsrs	r0, r6, #31
 80091c4:	3801      	subs	r0, #1
 80091c6:	ea55 0300 	orrs.w	r3, r5, r0
 80091ca:	d104      	bne.n	80091d6 <__ieee754_powf+0x116>
 80091cc:	ee38 8a48 	vsub.f32	s16, s16, s16
 80091d0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80091d4:	e78c      	b.n	80090f0 <__ieee754_powf+0x30>
 80091d6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80091da:	d96d      	bls.n	80092b8 <__ieee754_powf+0x1f8>
 80091dc:	4baa      	ldr	r3, [pc, #680]	@ (8009488 <__ieee754_powf+0x3c8>)
 80091de:	4598      	cmp	r8, r3
 80091e0:	d808      	bhi.n	80091f4 <__ieee754_powf+0x134>
 80091e2:	2c00      	cmp	r4, #0
 80091e4:	da0b      	bge.n	80091fe <__ieee754_powf+0x13e>
 80091e6:	2000      	movs	r0, #0
 80091e8:	ecbd 8b02 	vpop	{d8}
 80091ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091f0:	f000 bac2 	b.w	8009778 <__math_oflowf>
 80091f4:	4ba5      	ldr	r3, [pc, #660]	@ (800948c <__ieee754_powf+0x3cc>)
 80091f6:	4598      	cmp	r8, r3
 80091f8:	d908      	bls.n	800920c <__ieee754_powf+0x14c>
 80091fa:	2c00      	cmp	r4, #0
 80091fc:	dcf3      	bgt.n	80091e6 <__ieee754_powf+0x126>
 80091fe:	2000      	movs	r0, #0
 8009200:	ecbd 8b02 	vpop	{d8}
 8009204:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009208:	f000 bab0 	b.w	800976c <__math_uflowf>
 800920c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009210:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009214:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8009490 <__ieee754_powf+0x3d0>
 8009218:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800921c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009220:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009224:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009228:	ee20 7a00 	vmul.f32	s14, s0, s0
 800922c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8009494 <__ieee754_powf+0x3d4>
 8009230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009234:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8009498 <__ieee754_powf+0x3d8>
 8009238:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800923c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800949c <__ieee754_powf+0x3dc>
 8009240:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009244:	eeb0 7a67 	vmov.f32	s14, s15
 8009248:	eea0 7a26 	vfma.f32	s14, s0, s13
 800924c:	ee17 3a10 	vmov	r3, s14
 8009250:	f36f 030b 	bfc	r3, #0, #12
 8009254:	ee07 3a10 	vmov	s14, r3
 8009258:	eeb0 6a47 	vmov.f32	s12, s14
 800925c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8009260:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009264:	3d01      	subs	r5, #1
 8009266:	4305      	orrs	r5, r0
 8009268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800926c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009270:	f36f 040b 	bfc	r4, #0, #12
 8009274:	bf18      	it	ne
 8009276:	eeb0 8a66 	vmovne.f32	s16, s13
 800927a:	ee06 4a90 	vmov	s13, r4
 800927e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009282:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8009286:	ee67 7a26 	vmul.f32	s15, s14, s13
 800928a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800928e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009292:	ee17 1a10 	vmov	r1, s14
 8009296:	2900      	cmp	r1, #0
 8009298:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800929c:	f340 80dd 	ble.w	800945a <__ieee754_powf+0x39a>
 80092a0:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80092a4:	f240 80ca 	bls.w	800943c <__ieee754_powf+0x37c>
 80092a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80092ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b0:	bf4c      	ite	mi
 80092b2:	2001      	movmi	r0, #1
 80092b4:	2000      	movpl	r0, #0
 80092b6:	e797      	b.n	80091e8 <__ieee754_powf+0x128>
 80092b8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80092bc:	bf01      	itttt	eq
 80092be:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80094a0 <__ieee754_powf+0x3e0>
 80092c2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80092c6:	f06f 0317 	mvneq.w	r3, #23
 80092ca:	ee17 7a90 	vmoveq	r7, s15
 80092ce:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80092d2:	bf18      	it	ne
 80092d4:	2300      	movne	r3, #0
 80092d6:	3a7f      	subs	r2, #127	@ 0x7f
 80092d8:	441a      	add	r2, r3
 80092da:	4b72      	ldr	r3, [pc, #456]	@ (80094a4 <__ieee754_powf+0x3e4>)
 80092dc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80092e0:	429f      	cmp	r7, r3
 80092e2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80092e6:	dd06      	ble.n	80092f6 <__ieee754_powf+0x236>
 80092e8:	4b6f      	ldr	r3, [pc, #444]	@ (80094a8 <__ieee754_powf+0x3e8>)
 80092ea:	429f      	cmp	r7, r3
 80092ec:	f340 80a4 	ble.w	8009438 <__ieee754_powf+0x378>
 80092f0:	3201      	adds	r2, #1
 80092f2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80092f6:	2600      	movs	r6, #0
 80092f8:	4b6c      	ldr	r3, [pc, #432]	@ (80094ac <__ieee754_powf+0x3ec>)
 80092fa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80092fe:	ee07 1a10 	vmov	s14, r1
 8009302:	edd3 5a00 	vldr	s11, [r3]
 8009306:	4b6a      	ldr	r3, [pc, #424]	@ (80094b0 <__ieee754_powf+0x3f0>)
 8009308:	ee75 7a87 	vadd.f32	s15, s11, s14
 800930c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009310:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009314:	1049      	asrs	r1, r1, #1
 8009316:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800931a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800931e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8009322:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009326:	ee07 1a90 	vmov	s15, r1
 800932a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800932e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009332:	ee15 7a10 	vmov	r7, s10
 8009336:	401f      	ands	r7, r3
 8009338:	ee06 7a90 	vmov	s13, r7
 800933c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009340:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009344:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009348:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800934c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80094b4 <__ieee754_powf+0x3f4>
 8009350:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80094b8 <__ieee754_powf+0x3f8>
 8009354:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009358:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80094bc <__ieee754_powf+0x3fc>
 800935c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009360:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8009490 <__ieee754_powf+0x3d0>
 8009364:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009368:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80094c0 <__ieee754_powf+0x400>
 800936c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009370:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80094c4 <__ieee754_powf+0x404>
 8009374:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009378:	eee7 5a27 	vfma.f32	s11, s14, s15
 800937c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009380:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009384:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009388:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800938c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009390:	eef0 5a67 	vmov.f32	s11, s15
 8009394:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009398:	ee75 5a87 	vadd.f32	s11, s11, s14
 800939c:	ee15 1a90 	vmov	r1, s11
 80093a0:	4019      	ands	r1, r3
 80093a2:	ee05 1a90 	vmov	s11, r1
 80093a6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80093aa:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80093ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80093b2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80093b6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80093ba:	eeb0 6a67 	vmov.f32	s12, s15
 80093be:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80093c2:	ee16 1a10 	vmov	r1, s12
 80093c6:	4019      	ands	r1, r3
 80093c8:	ee06 1a10 	vmov	s12, r1
 80093cc:	eeb0 7a46 	vmov.f32	s14, s12
 80093d0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80093d4:	493c      	ldr	r1, [pc, #240]	@ (80094c8 <__ieee754_powf+0x408>)
 80093d6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80093da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093de:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80094cc <__ieee754_powf+0x40c>
 80093e2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80094d0 <__ieee754_powf+0x410>
 80093e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093ea:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80094d4 <__ieee754_powf+0x414>
 80093ee:	eee6 7a07 	vfma.f32	s15, s12, s14
 80093f2:	ed91 7a00 	vldr	s14, [r1]
 80093f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093fa:	ee07 2a10 	vmov	s14, r2
 80093fe:	4a36      	ldr	r2, [pc, #216]	@ (80094d8 <__ieee754_powf+0x418>)
 8009400:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009404:	eeb0 7a67 	vmov.f32	s14, s15
 8009408:	eea6 7a25 	vfma.f32	s14, s12, s11
 800940c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8009410:	ed92 5a00 	vldr	s10, [r2]
 8009414:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009418:	ee37 7a26 	vadd.f32	s14, s14, s13
 800941c:	ee17 2a10 	vmov	r2, s14
 8009420:	401a      	ands	r2, r3
 8009422:	ee07 2a10 	vmov	s14, r2
 8009426:	ee77 6a66 	vsub.f32	s13, s14, s13
 800942a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800942e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8009432:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009436:	e715      	b.n	8009264 <__ieee754_powf+0x1a4>
 8009438:	2601      	movs	r6, #1
 800943a:	e75d      	b.n	80092f8 <__ieee754_powf+0x238>
 800943c:	d152      	bne.n	80094e4 <__ieee754_powf+0x424>
 800943e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80094dc <__ieee754_powf+0x41c>
 8009442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009446:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800944a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800944e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009452:	f73f af29 	bgt.w	80092a8 <__ieee754_powf+0x1e8>
 8009456:	2386      	movs	r3, #134	@ 0x86
 8009458:	e048      	b.n	80094ec <__ieee754_powf+0x42c>
 800945a:	4a21      	ldr	r2, [pc, #132]	@ (80094e0 <__ieee754_powf+0x420>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d907      	bls.n	8009470 <__ieee754_powf+0x3b0>
 8009460:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009468:	bf4c      	ite	mi
 800946a:	2001      	movmi	r0, #1
 800946c:	2000      	movpl	r0, #0
 800946e:	e6c7      	b.n	8009200 <__ieee754_powf+0x140>
 8009470:	d138      	bne.n	80094e4 <__ieee754_powf+0x424>
 8009472:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009476:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800947a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800947e:	dbea      	blt.n	8009456 <__ieee754_powf+0x396>
 8009480:	e7ee      	b.n	8009460 <__ieee754_powf+0x3a0>
 8009482:	bf00      	nop
 8009484:	00000000 	.word	0x00000000
 8009488:	3f7ffff3 	.word	0x3f7ffff3
 800948c:	3f800007 	.word	0x3f800007
 8009490:	3eaaaaab 	.word	0x3eaaaaab
 8009494:	3fb8aa00 	.word	0x3fb8aa00
 8009498:	3fb8aa3b 	.word	0x3fb8aa3b
 800949c:	36eca570 	.word	0x36eca570
 80094a0:	4b800000 	.word	0x4b800000
 80094a4:	001cc471 	.word	0x001cc471
 80094a8:	005db3d6 	.word	0x005db3d6
 80094ac:	0800a30c 	.word	0x0800a30c
 80094b0:	fffff000 	.word	0xfffff000
 80094b4:	3e6c3255 	.word	0x3e6c3255
 80094b8:	3e53f142 	.word	0x3e53f142
 80094bc:	3e8ba305 	.word	0x3e8ba305
 80094c0:	3edb6db7 	.word	0x3edb6db7
 80094c4:	3f19999a 	.word	0x3f19999a
 80094c8:	0800a2fc 	.word	0x0800a2fc
 80094cc:	3f76384f 	.word	0x3f76384f
 80094d0:	3f763800 	.word	0x3f763800
 80094d4:	369dc3a0 	.word	0x369dc3a0
 80094d8:	0800a304 	.word	0x0800a304
 80094dc:	3338aa3c 	.word	0x3338aa3c
 80094e0:	43160000 	.word	0x43160000
 80094e4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80094e8:	d96f      	bls.n	80095ca <__ieee754_powf+0x50a>
 80094ea:	15db      	asrs	r3, r3, #23
 80094ec:	3b7e      	subs	r3, #126	@ 0x7e
 80094ee:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80094f2:	4118      	asrs	r0, r3
 80094f4:	4408      	add	r0, r1
 80094f6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80094fa:	4a4e      	ldr	r2, [pc, #312]	@ (8009634 <__ieee754_powf+0x574>)
 80094fc:	3b7f      	subs	r3, #127	@ 0x7f
 80094fe:	411a      	asrs	r2, r3
 8009500:	4002      	ands	r2, r0
 8009502:	ee07 2a10 	vmov	s14, r2
 8009506:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800950a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800950e:	f1c3 0317 	rsb	r3, r3, #23
 8009512:	4118      	asrs	r0, r3
 8009514:	2900      	cmp	r1, #0
 8009516:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800951a:	bfb8      	it	lt
 800951c:	4240      	neglt	r0, r0
 800951e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8009522:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8009638 <__ieee754_powf+0x578>
 8009526:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800963c <__ieee754_powf+0x57c>
 800952a:	ee16 3a90 	vmov	r3, s13
 800952e:	f36f 030b 	bfc	r3, #0, #12
 8009532:	ee06 3a90 	vmov	s13, r3
 8009536:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800953a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800953e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009542:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009640 <__ieee754_powf+0x580>
 8009546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800954a:	eee0 7a87 	vfma.f32	s15, s1, s14
 800954e:	eeb0 7a67 	vmov.f32	s14, s15
 8009552:	eea6 7a86 	vfma.f32	s14, s13, s12
 8009556:	eef0 5a47 	vmov.f32	s11, s14
 800955a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800955e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8009562:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009566:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8009644 <__ieee754_powf+0x584>
 800956a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8009648 <__ieee754_powf+0x588>
 800956e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009572:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800964c <__ieee754_powf+0x58c>
 8009576:	eee6 5a26 	vfma.f32	s11, s12, s13
 800957a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8009650 <__ieee754_powf+0x590>
 800957e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8009582:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009654 <__ieee754_powf+0x594>
 8009586:	eee6 5a26 	vfma.f32	s11, s12, s13
 800958a:	eeb0 6a47 	vmov.f32	s12, s14
 800958e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8009592:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8009596:	ee67 5a06 	vmul.f32	s11, s14, s12
 800959a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800959e:	eee7 7a27 	vfma.f32	s15, s14, s15
 80095a2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80095a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80095aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80095ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80095b2:	ee10 3a10 	vmov	r3, s0
 80095b6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80095ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095be:	da06      	bge.n	80095ce <__ieee754_powf+0x50e>
 80095c0:	f000 f854 	bl	800966c <scalbnf>
 80095c4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80095c8:	e592      	b.n	80090f0 <__ieee754_powf+0x30>
 80095ca:	2000      	movs	r0, #0
 80095cc:	e7a7      	b.n	800951e <__ieee754_powf+0x45e>
 80095ce:	ee00 3a10 	vmov	s0, r3
 80095d2:	e7f7      	b.n	80095c4 <__ieee754_powf+0x504>
 80095d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80095d8:	e58a      	b.n	80090f0 <__ieee754_powf+0x30>
 80095da:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8009658 <__ieee754_powf+0x598>
 80095de:	e587      	b.n	80090f0 <__ieee754_powf+0x30>
 80095e0:	eeb0 0a48 	vmov.f32	s0, s16
 80095e4:	e584      	b.n	80090f0 <__ieee754_powf+0x30>
 80095e6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80095ea:	f43f adbb 	beq.w	8009164 <__ieee754_powf+0xa4>
 80095ee:	2502      	movs	r5, #2
 80095f0:	eeb0 0a48 	vmov.f32	s0, s16
 80095f4:	f000 f832 	bl	800965c <fabsf>
 80095f8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80095fc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8009600:	4647      	mov	r7, r8
 8009602:	d003      	beq.n	800960c <__ieee754_powf+0x54c>
 8009604:	f1b8 0f00 	cmp.w	r8, #0
 8009608:	f47f addb 	bne.w	80091c2 <__ieee754_powf+0x102>
 800960c:	2c00      	cmp	r4, #0
 800960e:	bfbc      	itt	lt
 8009610:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8009614:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8009618:	2e00      	cmp	r6, #0
 800961a:	f6bf ad69 	bge.w	80090f0 <__ieee754_powf+0x30>
 800961e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8009622:	ea58 0805 	orrs.w	r8, r8, r5
 8009626:	f47f adc7 	bne.w	80091b8 <__ieee754_powf+0xf8>
 800962a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800962e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8009632:	e55d      	b.n	80090f0 <__ieee754_powf+0x30>
 8009634:	ff800000 	.word	0xff800000
 8009638:	3f317218 	.word	0x3f317218
 800963c:	3f317200 	.word	0x3f317200
 8009640:	35bfbe8c 	.word	0x35bfbe8c
 8009644:	b5ddea0e 	.word	0xb5ddea0e
 8009648:	3331bb4c 	.word	0x3331bb4c
 800964c:	388ab355 	.word	0x388ab355
 8009650:	bb360b61 	.word	0xbb360b61
 8009654:	3e2aaaab 	.word	0x3e2aaaab
 8009658:	00000000 	.word	0x00000000

0800965c <fabsf>:
 800965c:	ee10 3a10 	vmov	r3, s0
 8009660:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009664:	ee00 3a10 	vmov	s0, r3
 8009668:	4770      	bx	lr
	...

0800966c <scalbnf>:
 800966c:	ee10 3a10 	vmov	r3, s0
 8009670:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009674:	d02b      	beq.n	80096ce <scalbnf+0x62>
 8009676:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800967a:	d302      	bcc.n	8009682 <scalbnf+0x16>
 800967c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009680:	4770      	bx	lr
 8009682:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009686:	d123      	bne.n	80096d0 <scalbnf+0x64>
 8009688:	4b24      	ldr	r3, [pc, #144]	@ (800971c <scalbnf+0xb0>)
 800968a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009720 <scalbnf+0xb4>
 800968e:	4298      	cmp	r0, r3
 8009690:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009694:	db17      	blt.n	80096c6 <scalbnf+0x5a>
 8009696:	ee10 3a10 	vmov	r3, s0
 800969a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800969e:	3a19      	subs	r2, #25
 80096a0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80096a4:	4288      	cmp	r0, r1
 80096a6:	dd15      	ble.n	80096d4 <scalbnf+0x68>
 80096a8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009724 <scalbnf+0xb8>
 80096ac:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009728 <scalbnf+0xbc>
 80096b0:	ee10 3a10 	vmov	r3, s0
 80096b4:	eeb0 7a67 	vmov.f32	s14, s15
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	bfb8      	it	lt
 80096bc:	eef0 7a66 	vmovlt.f32	s15, s13
 80096c0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80096c4:	4770      	bx	lr
 80096c6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800972c <scalbnf+0xc0>
 80096ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80096ce:	4770      	bx	lr
 80096d0:	0dd2      	lsrs	r2, r2, #23
 80096d2:	e7e5      	b.n	80096a0 <scalbnf+0x34>
 80096d4:	4410      	add	r0, r2
 80096d6:	28fe      	cmp	r0, #254	@ 0xfe
 80096d8:	dce6      	bgt.n	80096a8 <scalbnf+0x3c>
 80096da:	2800      	cmp	r0, #0
 80096dc:	dd06      	ble.n	80096ec <scalbnf+0x80>
 80096de:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80096e2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80096e6:	ee00 3a10 	vmov	s0, r3
 80096ea:	4770      	bx	lr
 80096ec:	f110 0f16 	cmn.w	r0, #22
 80096f0:	da09      	bge.n	8009706 <scalbnf+0x9a>
 80096f2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800972c <scalbnf+0xc0>
 80096f6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009730 <scalbnf+0xc4>
 80096fa:	ee10 3a10 	vmov	r3, s0
 80096fe:	eeb0 7a67 	vmov.f32	s14, s15
 8009702:	2b00      	cmp	r3, #0
 8009704:	e7d9      	b.n	80096ba <scalbnf+0x4e>
 8009706:	3019      	adds	r0, #25
 8009708:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800970c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009710:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009734 <scalbnf+0xc8>
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	e7d7      	b.n	80096ca <scalbnf+0x5e>
 800971a:	bf00      	nop
 800971c:	ffff3cb0 	.word	0xffff3cb0
 8009720:	4c000000 	.word	0x4c000000
 8009724:	7149f2ca 	.word	0x7149f2ca
 8009728:	f149f2ca 	.word	0xf149f2ca
 800972c:	0da24260 	.word	0x0da24260
 8009730:	8da24260 	.word	0x8da24260
 8009734:	33000000 	.word	0x33000000

08009738 <with_errnof>:
 8009738:	b510      	push	{r4, lr}
 800973a:	ed2d 8b02 	vpush	{d8}
 800973e:	eeb0 8a40 	vmov.f32	s16, s0
 8009742:	4604      	mov	r4, r0
 8009744:	f7fe f9ac 	bl	8007aa0 <__errno>
 8009748:	eeb0 0a48 	vmov.f32	s0, s16
 800974c:	ecbd 8b02 	vpop	{d8}
 8009750:	6004      	str	r4, [r0, #0]
 8009752:	bd10      	pop	{r4, pc}

08009754 <xflowf>:
 8009754:	b130      	cbz	r0, 8009764 <xflowf+0x10>
 8009756:	eef1 7a40 	vneg.f32	s15, s0
 800975a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800975e:	2022      	movs	r0, #34	@ 0x22
 8009760:	f7ff bfea 	b.w	8009738 <with_errnof>
 8009764:	eef0 7a40 	vmov.f32	s15, s0
 8009768:	e7f7      	b.n	800975a <xflowf+0x6>
	...

0800976c <__math_uflowf>:
 800976c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009774 <__math_uflowf+0x8>
 8009770:	f7ff bff0 	b.w	8009754 <xflowf>
 8009774:	10000000 	.word	0x10000000

08009778 <__math_oflowf>:
 8009778:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009780 <__math_oflowf+0x8>
 800977c:	f7ff bfea 	b.w	8009754 <xflowf>
 8009780:	70000000 	.word	0x70000000

08009784 <__ieee754_sqrtf>:
 8009784:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009788:	4770      	bx	lr
 800978a:	0000      	movs	r0, r0
 800978c:	0000      	movs	r0, r0
	...

08009790 <__kernel_rem_pio2>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	ed2d 8b02 	vpush	{d8}
 8009798:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800979c:	f112 0f14 	cmn.w	r2, #20
 80097a0:	9306      	str	r3, [sp, #24]
 80097a2:	9104      	str	r1, [sp, #16]
 80097a4:	4bc2      	ldr	r3, [pc, #776]	@ (8009ab0 <__kernel_rem_pio2+0x320>)
 80097a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80097a8:	9008      	str	r0, [sp, #32]
 80097aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097ae:	9300      	str	r3, [sp, #0]
 80097b0:	9b06      	ldr	r3, [sp, #24]
 80097b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80097b6:	bfa8      	it	ge
 80097b8:	1ed4      	subge	r4, r2, #3
 80097ba:	9305      	str	r3, [sp, #20]
 80097bc:	bfb2      	itee	lt
 80097be:	2400      	movlt	r4, #0
 80097c0:	2318      	movge	r3, #24
 80097c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80097c6:	f06f 0317 	mvn.w	r3, #23
 80097ca:	fb04 3303 	mla	r3, r4, r3, r3
 80097ce:	eb03 0b02 	add.w	fp, r3, r2
 80097d2:	9b00      	ldr	r3, [sp, #0]
 80097d4:	9a05      	ldr	r2, [sp, #20]
 80097d6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8009aa0 <__kernel_rem_pio2+0x310>
 80097da:	eb03 0802 	add.w	r8, r3, r2
 80097de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80097e0:	1aa7      	subs	r7, r4, r2
 80097e2:	ae20      	add	r6, sp, #128	@ 0x80
 80097e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80097e8:	2500      	movs	r5, #0
 80097ea:	4545      	cmp	r5, r8
 80097ec:	dd12      	ble.n	8009814 <__kernel_rem_pio2+0x84>
 80097ee:	9b06      	ldr	r3, [sp, #24]
 80097f0:	aa20      	add	r2, sp, #128	@ 0x80
 80097f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80097f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80097fa:	2700      	movs	r7, #0
 80097fc:	9b00      	ldr	r3, [sp, #0]
 80097fe:	429f      	cmp	r7, r3
 8009800:	dc2e      	bgt.n	8009860 <__kernel_rem_pio2+0xd0>
 8009802:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8009aa0 <__kernel_rem_pio2+0x310>
 8009806:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800980a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800980e:	46a8      	mov	r8, r5
 8009810:	2600      	movs	r6, #0
 8009812:	e01b      	b.n	800984c <__kernel_rem_pio2+0xbc>
 8009814:	42ef      	cmn	r7, r5
 8009816:	d407      	bmi.n	8009828 <__kernel_rem_pio2+0x98>
 8009818:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800981c:	f7f6 fe7a 	bl	8000514 <__aeabi_i2d>
 8009820:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009824:	3501      	adds	r5, #1
 8009826:	e7e0      	b.n	80097ea <__kernel_rem_pio2+0x5a>
 8009828:	ec51 0b18 	vmov	r0, r1, d8
 800982c:	e7f8      	b.n	8009820 <__kernel_rem_pio2+0x90>
 800982e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8009832:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009836:	f7f6 fed7 	bl	80005e8 <__aeabi_dmul>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009842:	f7f6 fd1b 	bl	800027c <__adddf3>
 8009846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800984a:	3601      	adds	r6, #1
 800984c:	9b05      	ldr	r3, [sp, #20]
 800984e:	429e      	cmp	r6, r3
 8009850:	dded      	ble.n	800982e <__kernel_rem_pio2+0x9e>
 8009852:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009856:	3701      	adds	r7, #1
 8009858:	ecaa 7b02 	vstmia	sl!, {d7}
 800985c:	3508      	adds	r5, #8
 800985e:	e7cd      	b.n	80097fc <__kernel_rem_pio2+0x6c>
 8009860:	9b00      	ldr	r3, [sp, #0]
 8009862:	f8dd 8000 	ldr.w	r8, [sp]
 8009866:	aa0c      	add	r2, sp, #48	@ 0x30
 8009868:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800986c:	930a      	str	r3, [sp, #40]	@ 0x28
 800986e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009870:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009874:	9309      	str	r3, [sp, #36]	@ 0x24
 8009876:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800987a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800987c:	ab98      	add	r3, sp, #608	@ 0x260
 800987e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009882:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009886:	ed8d 7b02 	vstr	d7, [sp, #8]
 800988a:	ac0c      	add	r4, sp, #48	@ 0x30
 800988c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800988e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009892:	46a1      	mov	r9, r4
 8009894:	46c2      	mov	sl, r8
 8009896:	f1ba 0f00 	cmp.w	sl, #0
 800989a:	dc77      	bgt.n	800998c <__kernel_rem_pio2+0x1fc>
 800989c:	4658      	mov	r0, fp
 800989e:	ed9d 0b02 	vldr	d0, [sp, #8]
 80098a2:	f000 fac5 	bl	8009e30 <scalbn>
 80098a6:	ec57 6b10 	vmov	r6, r7, d0
 80098aa:	2200      	movs	r2, #0
 80098ac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f6 fe98 	bl	80005e8 <__aeabi_dmul>
 80098b8:	ec41 0b10 	vmov	d0, r0, r1
 80098bc:	f000 fb34 	bl	8009f28 <floor>
 80098c0:	4b7c      	ldr	r3, [pc, #496]	@ (8009ab4 <__kernel_rem_pio2+0x324>)
 80098c2:	ec51 0b10 	vmov	r0, r1, d0
 80098c6:	2200      	movs	r2, #0
 80098c8:	f7f6 fe8e 	bl	80005e8 <__aeabi_dmul>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4630      	mov	r0, r6
 80098d2:	4639      	mov	r1, r7
 80098d4:	f7f6 fcd0 	bl	8000278 <__aeabi_dsub>
 80098d8:	460f      	mov	r7, r1
 80098da:	4606      	mov	r6, r0
 80098dc:	f7f7 f91e 	bl	8000b1c <__aeabi_d2iz>
 80098e0:	9002      	str	r0, [sp, #8]
 80098e2:	f7f6 fe17 	bl	8000514 <__aeabi_i2d>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4630      	mov	r0, r6
 80098ec:	4639      	mov	r1, r7
 80098ee:	f7f6 fcc3 	bl	8000278 <__aeabi_dsub>
 80098f2:	f1bb 0f00 	cmp.w	fp, #0
 80098f6:	4606      	mov	r6, r0
 80098f8:	460f      	mov	r7, r1
 80098fa:	dd6c      	ble.n	80099d6 <__kernel_rem_pio2+0x246>
 80098fc:	f108 31ff 	add.w	r1, r8, #4294967295
 8009900:	ab0c      	add	r3, sp, #48	@ 0x30
 8009902:	9d02      	ldr	r5, [sp, #8]
 8009904:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009908:	f1cb 0018 	rsb	r0, fp, #24
 800990c:	fa43 f200 	asr.w	r2, r3, r0
 8009910:	4415      	add	r5, r2
 8009912:	4082      	lsls	r2, r0
 8009914:	1a9b      	subs	r3, r3, r2
 8009916:	aa0c      	add	r2, sp, #48	@ 0x30
 8009918:	9502      	str	r5, [sp, #8]
 800991a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800991e:	f1cb 0217 	rsb	r2, fp, #23
 8009922:	fa43 f902 	asr.w	r9, r3, r2
 8009926:	f1b9 0f00 	cmp.w	r9, #0
 800992a:	dd64      	ble.n	80099f6 <__kernel_rem_pio2+0x266>
 800992c:	9b02      	ldr	r3, [sp, #8]
 800992e:	2200      	movs	r2, #0
 8009930:	3301      	adds	r3, #1
 8009932:	9302      	str	r3, [sp, #8]
 8009934:	4615      	mov	r5, r2
 8009936:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800993a:	4590      	cmp	r8, r2
 800993c:	f300 80a1 	bgt.w	8009a82 <__kernel_rem_pio2+0x2f2>
 8009940:	f1bb 0f00 	cmp.w	fp, #0
 8009944:	dd07      	ble.n	8009956 <__kernel_rem_pio2+0x1c6>
 8009946:	f1bb 0f01 	cmp.w	fp, #1
 800994a:	f000 80c1 	beq.w	8009ad0 <__kernel_rem_pio2+0x340>
 800994e:	f1bb 0f02 	cmp.w	fp, #2
 8009952:	f000 80c8 	beq.w	8009ae6 <__kernel_rem_pio2+0x356>
 8009956:	f1b9 0f02 	cmp.w	r9, #2
 800995a:	d14c      	bne.n	80099f6 <__kernel_rem_pio2+0x266>
 800995c:	4632      	mov	r2, r6
 800995e:	463b      	mov	r3, r7
 8009960:	4955      	ldr	r1, [pc, #340]	@ (8009ab8 <__kernel_rem_pio2+0x328>)
 8009962:	2000      	movs	r0, #0
 8009964:	f7f6 fc88 	bl	8000278 <__aeabi_dsub>
 8009968:	4606      	mov	r6, r0
 800996a:	460f      	mov	r7, r1
 800996c:	2d00      	cmp	r5, #0
 800996e:	d042      	beq.n	80099f6 <__kernel_rem_pio2+0x266>
 8009970:	4658      	mov	r0, fp
 8009972:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8009aa8 <__kernel_rem_pio2+0x318>
 8009976:	f000 fa5b 	bl	8009e30 <scalbn>
 800997a:	4630      	mov	r0, r6
 800997c:	4639      	mov	r1, r7
 800997e:	ec53 2b10 	vmov	r2, r3, d0
 8009982:	f7f6 fc79 	bl	8000278 <__aeabi_dsub>
 8009986:	4606      	mov	r6, r0
 8009988:	460f      	mov	r7, r1
 800998a:	e034      	b.n	80099f6 <__kernel_rem_pio2+0x266>
 800998c:	4b4b      	ldr	r3, [pc, #300]	@ (8009abc <__kernel_rem_pio2+0x32c>)
 800998e:	2200      	movs	r2, #0
 8009990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009994:	f7f6 fe28 	bl	80005e8 <__aeabi_dmul>
 8009998:	f7f7 f8c0 	bl	8000b1c <__aeabi_d2iz>
 800999c:	f7f6 fdba 	bl	8000514 <__aeabi_i2d>
 80099a0:	4b47      	ldr	r3, [pc, #284]	@ (8009ac0 <__kernel_rem_pio2+0x330>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	4606      	mov	r6, r0
 80099a6:	460f      	mov	r7, r1
 80099a8:	f7f6 fe1e 	bl	80005e8 <__aeabi_dmul>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099b4:	f7f6 fc60 	bl	8000278 <__aeabi_dsub>
 80099b8:	f7f7 f8b0 	bl	8000b1c <__aeabi_d2iz>
 80099bc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80099c0:	f849 0b04 	str.w	r0, [r9], #4
 80099c4:	4639      	mov	r1, r7
 80099c6:	4630      	mov	r0, r6
 80099c8:	f7f6 fc58 	bl	800027c <__adddf3>
 80099cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099d4:	e75f      	b.n	8009896 <__kernel_rem_pio2+0x106>
 80099d6:	d107      	bne.n	80099e8 <__kernel_rem_pio2+0x258>
 80099d8:	f108 33ff 	add.w	r3, r8, #4294967295
 80099dc:	aa0c      	add	r2, sp, #48	@ 0x30
 80099de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80099e6:	e79e      	b.n	8009926 <__kernel_rem_pio2+0x196>
 80099e8:	4b36      	ldr	r3, [pc, #216]	@ (8009ac4 <__kernel_rem_pio2+0x334>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	f7f7 f882 	bl	8000af4 <__aeabi_dcmpge>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d143      	bne.n	8009a7c <__kernel_rem_pio2+0x2ec>
 80099f4:	4681      	mov	r9, r0
 80099f6:	2200      	movs	r2, #0
 80099f8:	2300      	movs	r3, #0
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f7 f85b 	bl	8000ab8 <__aeabi_dcmpeq>
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f000 80c1 	beq.w	8009b8a <__kernel_rem_pio2+0x3fa>
 8009a08:	f108 33ff 	add.w	r3, r8, #4294967295
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	9900      	ldr	r1, [sp, #0]
 8009a10:	428b      	cmp	r3, r1
 8009a12:	da70      	bge.n	8009af6 <__kernel_rem_pio2+0x366>
 8009a14:	2a00      	cmp	r2, #0
 8009a16:	f000 808b 	beq.w	8009b30 <__kernel_rem_pio2+0x3a0>
 8009a1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a1e:	ab0c      	add	r3, sp, #48	@ 0x30
 8009a20:	f1ab 0b18 	sub.w	fp, fp, #24
 8009a24:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d0f6      	beq.n	8009a1a <__kernel_rem_pio2+0x28a>
 8009a2c:	4658      	mov	r0, fp
 8009a2e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8009aa8 <__kernel_rem_pio2+0x318>
 8009a32:	f000 f9fd 	bl	8009e30 <scalbn>
 8009a36:	f108 0301 	add.w	r3, r8, #1
 8009a3a:	00da      	lsls	r2, r3, #3
 8009a3c:	9205      	str	r2, [sp, #20]
 8009a3e:	ec55 4b10 	vmov	r4, r5, d0
 8009a42:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009a44:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8009abc <__kernel_rem_pio2+0x32c>
 8009a48:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009a4c:	4646      	mov	r6, r8
 8009a4e:	f04f 0a00 	mov.w	sl, #0
 8009a52:	2e00      	cmp	r6, #0
 8009a54:	f280 80d1 	bge.w	8009bfa <__kernel_rem_pio2+0x46a>
 8009a58:	4644      	mov	r4, r8
 8009a5a:	2c00      	cmp	r4, #0
 8009a5c:	f2c0 80ff 	blt.w	8009c5e <__kernel_rem_pio2+0x4ce>
 8009a60:	4b19      	ldr	r3, [pc, #100]	@ (8009ac8 <__kernel_rem_pio2+0x338>)
 8009a62:	461f      	mov	r7, r3
 8009a64:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009a66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a6a:	9306      	str	r3, [sp, #24]
 8009a6c:	f04f 0a00 	mov.w	sl, #0
 8009a70:	f04f 0b00 	mov.w	fp, #0
 8009a74:	2600      	movs	r6, #0
 8009a76:	eba8 0504 	sub.w	r5, r8, r4
 8009a7a:	e0e4      	b.n	8009c46 <__kernel_rem_pio2+0x4b6>
 8009a7c:	f04f 0902 	mov.w	r9, #2
 8009a80:	e754      	b.n	800992c <__kernel_rem_pio2+0x19c>
 8009a82:	f854 3b04 	ldr.w	r3, [r4], #4
 8009a86:	bb0d      	cbnz	r5, 8009acc <__kernel_rem_pio2+0x33c>
 8009a88:	b123      	cbz	r3, 8009a94 <__kernel_rem_pio2+0x304>
 8009a8a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a92:	2301      	movs	r3, #1
 8009a94:	3201      	adds	r2, #1
 8009a96:	461d      	mov	r5, r3
 8009a98:	e74f      	b.n	800993a <__kernel_rem_pio2+0x1aa>
 8009a9a:	bf00      	nop
 8009a9c:	f3af 8000 	nop.w
	...
 8009aac:	3ff00000 	.word	0x3ff00000
 8009ab0:	0800a358 	.word	0x0800a358
 8009ab4:	40200000 	.word	0x40200000
 8009ab8:	3ff00000 	.word	0x3ff00000
 8009abc:	3e700000 	.word	0x3e700000
 8009ac0:	41700000 	.word	0x41700000
 8009ac4:	3fe00000 	.word	0x3fe00000
 8009ac8:	0800a318 	.word	0x0800a318
 8009acc:	1acb      	subs	r3, r1, r3
 8009ace:	e7de      	b.n	8009a8e <__kernel_rem_pio2+0x2fe>
 8009ad0:	f108 32ff 	add.w	r2, r8, #4294967295
 8009ad4:	ab0c      	add	r3, sp, #48	@ 0x30
 8009ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ada:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009ade:	a90c      	add	r1, sp, #48	@ 0x30
 8009ae0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009ae4:	e737      	b.n	8009956 <__kernel_rem_pio2+0x1c6>
 8009ae6:	f108 32ff 	add.w	r2, r8, #4294967295
 8009aea:	ab0c      	add	r3, sp, #48	@ 0x30
 8009aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009af4:	e7f3      	b.n	8009ade <__kernel_rem_pio2+0x34e>
 8009af6:	a90c      	add	r1, sp, #48	@ 0x30
 8009af8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009afc:	3b01      	subs	r3, #1
 8009afe:	430a      	orrs	r2, r1
 8009b00:	e785      	b.n	8009a0e <__kernel_rem_pio2+0x27e>
 8009b02:	3401      	adds	r4, #1
 8009b04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	d0fa      	beq.n	8009b02 <__kernel_rem_pio2+0x372>
 8009b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009b12:	eb0d 0503 	add.w	r5, sp, r3
 8009b16:	9b06      	ldr	r3, [sp, #24]
 8009b18:	aa20      	add	r2, sp, #128	@ 0x80
 8009b1a:	4443      	add	r3, r8
 8009b1c:	f108 0701 	add.w	r7, r8, #1
 8009b20:	3d98      	subs	r5, #152	@ 0x98
 8009b22:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009b26:	4444      	add	r4, r8
 8009b28:	42bc      	cmp	r4, r7
 8009b2a:	da04      	bge.n	8009b36 <__kernel_rem_pio2+0x3a6>
 8009b2c:	46a0      	mov	r8, r4
 8009b2e:	e6a2      	b.n	8009876 <__kernel_rem_pio2+0xe6>
 8009b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b32:	2401      	movs	r4, #1
 8009b34:	e7e6      	b.n	8009b04 <__kernel_rem_pio2+0x374>
 8009b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b38:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009b3c:	f7f6 fcea 	bl	8000514 <__aeabi_i2d>
 8009b40:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8009e00 <__kernel_rem_pio2+0x670>
 8009b44:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009b48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b50:	46b2      	mov	sl, r6
 8009b52:	f04f 0800 	mov.w	r8, #0
 8009b56:	9b05      	ldr	r3, [sp, #20]
 8009b58:	4598      	cmp	r8, r3
 8009b5a:	dd05      	ble.n	8009b68 <__kernel_rem_pio2+0x3d8>
 8009b5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b60:	3701      	adds	r7, #1
 8009b62:	eca5 7b02 	vstmia	r5!, {d7}
 8009b66:	e7df      	b.n	8009b28 <__kernel_rem_pio2+0x398>
 8009b68:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009b6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009b70:	f7f6 fd3a 	bl	80005e8 <__aeabi_dmul>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b7c:	f7f6 fb7e 	bl	800027c <__adddf3>
 8009b80:	f108 0801 	add.w	r8, r8, #1
 8009b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b88:	e7e5      	b.n	8009b56 <__kernel_rem_pio2+0x3c6>
 8009b8a:	f1cb 0000 	rsb	r0, fp, #0
 8009b8e:	ec47 6b10 	vmov	d0, r6, r7
 8009b92:	f000 f94d 	bl	8009e30 <scalbn>
 8009b96:	ec55 4b10 	vmov	r4, r5, d0
 8009b9a:	4b9b      	ldr	r3, [pc, #620]	@ (8009e08 <__kernel_rem_pio2+0x678>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	f7f6 ffa7 	bl	8000af4 <__aeabi_dcmpge>
 8009ba6:	b300      	cbz	r0, 8009bea <__kernel_rem_pio2+0x45a>
 8009ba8:	4b98      	ldr	r3, [pc, #608]	@ (8009e0c <__kernel_rem_pio2+0x67c>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	4620      	mov	r0, r4
 8009bae:	4629      	mov	r1, r5
 8009bb0:	f7f6 fd1a 	bl	80005e8 <__aeabi_dmul>
 8009bb4:	f7f6 ffb2 	bl	8000b1c <__aeabi_d2iz>
 8009bb8:	4606      	mov	r6, r0
 8009bba:	f7f6 fcab 	bl	8000514 <__aeabi_i2d>
 8009bbe:	4b92      	ldr	r3, [pc, #584]	@ (8009e08 <__kernel_rem_pio2+0x678>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f7f6 fd11 	bl	80005e8 <__aeabi_dmul>
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	4602      	mov	r2, r0
 8009bca:	4629      	mov	r1, r5
 8009bcc:	4620      	mov	r0, r4
 8009bce:	f7f6 fb53 	bl	8000278 <__aeabi_dsub>
 8009bd2:	f7f6 ffa3 	bl	8000b1c <__aeabi_d2iz>
 8009bd6:	ab0c      	add	r3, sp, #48	@ 0x30
 8009bd8:	f10b 0b18 	add.w	fp, fp, #24
 8009bdc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009be0:	f108 0801 	add.w	r8, r8, #1
 8009be4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009be8:	e720      	b.n	8009a2c <__kernel_rem_pio2+0x29c>
 8009bea:	4620      	mov	r0, r4
 8009bec:	4629      	mov	r1, r5
 8009bee:	f7f6 ff95 	bl	8000b1c <__aeabi_d2iz>
 8009bf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009bf4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009bf8:	e718      	b.n	8009a2c <__kernel_rem_pio2+0x29c>
 8009bfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8009bfc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009c00:	f7f6 fc88 	bl	8000514 <__aeabi_i2d>
 8009c04:	4622      	mov	r2, r4
 8009c06:	462b      	mov	r3, r5
 8009c08:	f7f6 fcee 	bl	80005e8 <__aeabi_dmul>
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009c12:	465b      	mov	r3, fp
 8009c14:	4620      	mov	r0, r4
 8009c16:	4629      	mov	r1, r5
 8009c18:	f7f6 fce6 	bl	80005e8 <__aeabi_dmul>
 8009c1c:	3e01      	subs	r6, #1
 8009c1e:	4604      	mov	r4, r0
 8009c20:	460d      	mov	r5, r1
 8009c22:	e716      	b.n	8009a52 <__kernel_rem_pio2+0x2c2>
 8009c24:	9906      	ldr	r1, [sp, #24]
 8009c26:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009c2a:	9106      	str	r1, [sp, #24]
 8009c2c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009c30:	f7f6 fcda 	bl	80005e8 <__aeabi_dmul>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4650      	mov	r0, sl
 8009c3a:	4659      	mov	r1, fp
 8009c3c:	f7f6 fb1e 	bl	800027c <__adddf3>
 8009c40:	3601      	adds	r6, #1
 8009c42:	4682      	mov	sl, r0
 8009c44:	468b      	mov	fp, r1
 8009c46:	9b00      	ldr	r3, [sp, #0]
 8009c48:	429e      	cmp	r6, r3
 8009c4a:	dc01      	bgt.n	8009c50 <__kernel_rem_pio2+0x4c0>
 8009c4c:	42ae      	cmp	r6, r5
 8009c4e:	dde9      	ble.n	8009c24 <__kernel_rem_pio2+0x494>
 8009c50:	ab48      	add	r3, sp, #288	@ 0x120
 8009c52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009c56:	e9c5 ab00 	strd	sl, fp, [r5]
 8009c5a:	3c01      	subs	r4, #1
 8009c5c:	e6fd      	b.n	8009a5a <__kernel_rem_pio2+0x2ca>
 8009c5e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	dc0b      	bgt.n	8009c7c <__kernel_rem_pio2+0x4ec>
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	dc35      	bgt.n	8009cd4 <__kernel_rem_pio2+0x544>
 8009c68:	d059      	beq.n	8009d1e <__kernel_rem_pio2+0x58e>
 8009c6a:	9b02      	ldr	r3, [sp, #8]
 8009c6c:	f003 0007 	and.w	r0, r3, #7
 8009c70:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009c74:	ecbd 8b02 	vpop	{d8}
 8009c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d1f3      	bne.n	8009c6a <__kernel_rem_pio2+0x4da>
 8009c82:	9b05      	ldr	r3, [sp, #20]
 8009c84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009c88:	eb0d 0403 	add.w	r4, sp, r3
 8009c8c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009c90:	4625      	mov	r5, r4
 8009c92:	46c2      	mov	sl, r8
 8009c94:	f1ba 0f00 	cmp.w	sl, #0
 8009c98:	dc69      	bgt.n	8009d6e <__kernel_rem_pio2+0x5de>
 8009c9a:	4645      	mov	r5, r8
 8009c9c:	2d01      	cmp	r5, #1
 8009c9e:	f300 8087 	bgt.w	8009db0 <__kernel_rem_pio2+0x620>
 8009ca2:	9c05      	ldr	r4, [sp, #20]
 8009ca4:	ab48      	add	r3, sp, #288	@ 0x120
 8009ca6:	441c      	add	r4, r3
 8009ca8:	2000      	movs	r0, #0
 8009caa:	2100      	movs	r1, #0
 8009cac:	f1b8 0f01 	cmp.w	r8, #1
 8009cb0:	f300 809c 	bgt.w	8009dec <__kernel_rem_pio2+0x65c>
 8009cb4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8009cb8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8009cbc:	f1b9 0f00 	cmp.w	r9, #0
 8009cc0:	f040 80a6 	bne.w	8009e10 <__kernel_rem_pio2+0x680>
 8009cc4:	9b04      	ldr	r3, [sp, #16]
 8009cc6:	e9c3 5600 	strd	r5, r6, [r3]
 8009cca:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009cce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009cd2:	e7ca      	b.n	8009c6a <__kernel_rem_pio2+0x4da>
 8009cd4:	9d05      	ldr	r5, [sp, #20]
 8009cd6:	ab48      	add	r3, sp, #288	@ 0x120
 8009cd8:	441d      	add	r5, r3
 8009cda:	4644      	mov	r4, r8
 8009cdc:	2000      	movs	r0, #0
 8009cde:	2100      	movs	r1, #0
 8009ce0:	2c00      	cmp	r4, #0
 8009ce2:	da35      	bge.n	8009d50 <__kernel_rem_pio2+0x5c0>
 8009ce4:	f1b9 0f00 	cmp.w	r9, #0
 8009ce8:	d038      	beq.n	8009d5c <__kernel_rem_pio2+0x5cc>
 8009cea:	4602      	mov	r2, r0
 8009cec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cf0:	9c04      	ldr	r4, [sp, #16]
 8009cf2:	e9c4 2300 	strd	r2, r3, [r4]
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009cfe:	f7f6 fabb 	bl	8000278 <__aeabi_dsub>
 8009d02:	ad4a      	add	r5, sp, #296	@ 0x128
 8009d04:	2401      	movs	r4, #1
 8009d06:	45a0      	cmp	r8, r4
 8009d08:	da2b      	bge.n	8009d62 <__kernel_rem_pio2+0x5d2>
 8009d0a:	f1b9 0f00 	cmp.w	r9, #0
 8009d0e:	d002      	beq.n	8009d16 <__kernel_rem_pio2+0x586>
 8009d10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d14:	4619      	mov	r1, r3
 8009d16:	9b04      	ldr	r3, [sp, #16]
 8009d18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009d1c:	e7a5      	b.n	8009c6a <__kernel_rem_pio2+0x4da>
 8009d1e:	9c05      	ldr	r4, [sp, #20]
 8009d20:	ab48      	add	r3, sp, #288	@ 0x120
 8009d22:	441c      	add	r4, r3
 8009d24:	2000      	movs	r0, #0
 8009d26:	2100      	movs	r1, #0
 8009d28:	f1b8 0f00 	cmp.w	r8, #0
 8009d2c:	da09      	bge.n	8009d42 <__kernel_rem_pio2+0x5b2>
 8009d2e:	f1b9 0f00 	cmp.w	r9, #0
 8009d32:	d002      	beq.n	8009d3a <__kernel_rem_pio2+0x5aa>
 8009d34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d38:	4619      	mov	r1, r3
 8009d3a:	9b04      	ldr	r3, [sp, #16]
 8009d3c:	e9c3 0100 	strd	r0, r1, [r3]
 8009d40:	e793      	b.n	8009c6a <__kernel_rem_pio2+0x4da>
 8009d42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d46:	f7f6 fa99 	bl	800027c <__adddf3>
 8009d4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d4e:	e7eb      	b.n	8009d28 <__kernel_rem_pio2+0x598>
 8009d50:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009d54:	f7f6 fa92 	bl	800027c <__adddf3>
 8009d58:	3c01      	subs	r4, #1
 8009d5a:	e7c1      	b.n	8009ce0 <__kernel_rem_pio2+0x550>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	e7c6      	b.n	8009cf0 <__kernel_rem_pio2+0x560>
 8009d62:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009d66:	f7f6 fa89 	bl	800027c <__adddf3>
 8009d6a:	3401      	adds	r4, #1
 8009d6c:	e7cb      	b.n	8009d06 <__kernel_rem_pio2+0x576>
 8009d6e:	ed35 7b02 	vldmdb	r5!, {d7}
 8009d72:	ed8d 7b00 	vstr	d7, [sp]
 8009d76:	ed95 7b02 	vldr	d7, [r5, #8]
 8009d7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d7e:	ec53 2b17 	vmov	r2, r3, d7
 8009d82:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d86:	f7f6 fa79 	bl	800027c <__adddf3>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4606      	mov	r6, r0
 8009d90:	460f      	mov	r7, r1
 8009d92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d96:	f7f6 fa6f 	bl	8000278 <__aeabi_dsub>
 8009d9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d9e:	f7f6 fa6d 	bl	800027c <__adddf3>
 8009da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009da6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009daa:	e9c5 6700 	strd	r6, r7, [r5]
 8009dae:	e771      	b.n	8009c94 <__kernel_rem_pio2+0x504>
 8009db0:	ed34 7b02 	vldmdb	r4!, {d7}
 8009db4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009db8:	ec51 0b17 	vmov	r0, r1, d7
 8009dbc:	4652      	mov	r2, sl
 8009dbe:	465b      	mov	r3, fp
 8009dc0:	ed8d 7b00 	vstr	d7, [sp]
 8009dc4:	f7f6 fa5a 	bl	800027c <__adddf3>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	4606      	mov	r6, r0
 8009dce:	460f      	mov	r7, r1
 8009dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dd4:	f7f6 fa50 	bl	8000278 <__aeabi_dsub>
 8009dd8:	4652      	mov	r2, sl
 8009dda:	465b      	mov	r3, fp
 8009ddc:	f7f6 fa4e 	bl	800027c <__adddf3>
 8009de0:	3d01      	subs	r5, #1
 8009de2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009de6:	e9c4 6700 	strd	r6, r7, [r4]
 8009dea:	e757      	b.n	8009c9c <__kernel_rem_pio2+0x50c>
 8009dec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009df0:	f7f6 fa44 	bl	800027c <__adddf3>
 8009df4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009df8:	e758      	b.n	8009cac <__kernel_rem_pio2+0x51c>
 8009dfa:	bf00      	nop
 8009dfc:	f3af 8000 	nop.w
	...
 8009e08:	41700000 	.word	0x41700000
 8009e0c:	3e700000 	.word	0x3e700000
 8009e10:	9b04      	ldr	r3, [sp, #16]
 8009e12:	9a04      	ldr	r2, [sp, #16]
 8009e14:	601d      	str	r5, [r3, #0]
 8009e16:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8009e1a:	605c      	str	r4, [r3, #4]
 8009e1c:	609f      	str	r7, [r3, #8]
 8009e1e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8009e22:	60d3      	str	r3, [r2, #12]
 8009e24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009e28:	6110      	str	r0, [r2, #16]
 8009e2a:	6153      	str	r3, [r2, #20]
 8009e2c:	e71d      	b.n	8009c6a <__kernel_rem_pio2+0x4da>
 8009e2e:	bf00      	nop

08009e30 <scalbn>:
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	ec55 4b10 	vmov	r4, r5, d0
 8009e36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009e3a:	4606      	mov	r6, r0
 8009e3c:	462b      	mov	r3, r5
 8009e3e:	b991      	cbnz	r1, 8009e66 <scalbn+0x36>
 8009e40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009e44:	4323      	orrs	r3, r4
 8009e46:	d03b      	beq.n	8009ec0 <scalbn+0x90>
 8009e48:	4b33      	ldr	r3, [pc, #204]	@ (8009f18 <scalbn+0xe8>)
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f7f6 fbca 	bl	80005e8 <__aeabi_dmul>
 8009e54:	4b31      	ldr	r3, [pc, #196]	@ (8009f1c <scalbn+0xec>)
 8009e56:	429e      	cmp	r6, r3
 8009e58:	4604      	mov	r4, r0
 8009e5a:	460d      	mov	r5, r1
 8009e5c:	da0f      	bge.n	8009e7e <scalbn+0x4e>
 8009e5e:	a326      	add	r3, pc, #152	@ (adr r3, 8009ef8 <scalbn+0xc8>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	e01e      	b.n	8009ea4 <scalbn+0x74>
 8009e66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009e6a:	4291      	cmp	r1, r2
 8009e6c:	d10b      	bne.n	8009e86 <scalbn+0x56>
 8009e6e:	4622      	mov	r2, r4
 8009e70:	4620      	mov	r0, r4
 8009e72:	4629      	mov	r1, r5
 8009e74:	f7f6 fa02 	bl	800027c <__adddf3>
 8009e78:	4604      	mov	r4, r0
 8009e7a:	460d      	mov	r5, r1
 8009e7c:	e020      	b.n	8009ec0 <scalbn+0x90>
 8009e7e:	460b      	mov	r3, r1
 8009e80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009e84:	3936      	subs	r1, #54	@ 0x36
 8009e86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009e8a:	4296      	cmp	r6, r2
 8009e8c:	dd0d      	ble.n	8009eaa <scalbn+0x7a>
 8009e8e:	2d00      	cmp	r5, #0
 8009e90:	a11b      	add	r1, pc, #108	@ (adr r1, 8009f00 <scalbn+0xd0>)
 8009e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e96:	da02      	bge.n	8009e9e <scalbn+0x6e>
 8009e98:	a11b      	add	r1, pc, #108	@ (adr r1, 8009f08 <scalbn+0xd8>)
 8009e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e9e:	a318      	add	r3, pc, #96	@ (adr r3, 8009f00 <scalbn+0xd0>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 fba0 	bl	80005e8 <__aeabi_dmul>
 8009ea8:	e7e6      	b.n	8009e78 <scalbn+0x48>
 8009eaa:	1872      	adds	r2, r6, r1
 8009eac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009eb0:	428a      	cmp	r2, r1
 8009eb2:	dcec      	bgt.n	8009e8e <scalbn+0x5e>
 8009eb4:	2a00      	cmp	r2, #0
 8009eb6:	dd06      	ble.n	8009ec6 <scalbn+0x96>
 8009eb8:	f36f 531e 	bfc	r3, #20, #11
 8009ebc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ec0:	ec45 4b10 	vmov	d0, r4, r5
 8009ec4:	bd70      	pop	{r4, r5, r6, pc}
 8009ec6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009eca:	da08      	bge.n	8009ede <scalbn+0xae>
 8009ecc:	2d00      	cmp	r5, #0
 8009ece:	a10a      	add	r1, pc, #40	@ (adr r1, 8009ef8 <scalbn+0xc8>)
 8009ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ed4:	dac3      	bge.n	8009e5e <scalbn+0x2e>
 8009ed6:	a10e      	add	r1, pc, #56	@ (adr r1, 8009f10 <scalbn+0xe0>)
 8009ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009edc:	e7bf      	b.n	8009e5e <scalbn+0x2e>
 8009ede:	3236      	adds	r2, #54	@ 0x36
 8009ee0:	f36f 531e 	bfc	r3, #20, #11
 8009ee4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ee8:	4620      	mov	r0, r4
 8009eea:	4b0d      	ldr	r3, [pc, #52]	@ (8009f20 <scalbn+0xf0>)
 8009eec:	4629      	mov	r1, r5
 8009eee:	2200      	movs	r2, #0
 8009ef0:	e7d8      	b.n	8009ea4 <scalbn+0x74>
 8009ef2:	bf00      	nop
 8009ef4:	f3af 8000 	nop.w
 8009ef8:	c2f8f359 	.word	0xc2f8f359
 8009efc:	01a56e1f 	.word	0x01a56e1f
 8009f00:	8800759c 	.word	0x8800759c
 8009f04:	7e37e43c 	.word	0x7e37e43c
 8009f08:	8800759c 	.word	0x8800759c
 8009f0c:	fe37e43c 	.word	0xfe37e43c
 8009f10:	c2f8f359 	.word	0xc2f8f359
 8009f14:	81a56e1f 	.word	0x81a56e1f
 8009f18:	43500000 	.word	0x43500000
 8009f1c:	ffff3cb0 	.word	0xffff3cb0
 8009f20:	3c900000 	.word	0x3c900000
 8009f24:	00000000 	.word	0x00000000

08009f28 <floor>:
 8009f28:	ec51 0b10 	vmov	r0, r1, d0
 8009f2c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f34:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009f38:	2e13      	cmp	r6, #19
 8009f3a:	460c      	mov	r4, r1
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	4680      	mov	r8, r0
 8009f40:	dc34      	bgt.n	8009fac <floor+0x84>
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	da17      	bge.n	8009f76 <floor+0x4e>
 8009f46:	a332      	add	r3, pc, #200	@ (adr r3, 800a010 <floor+0xe8>)
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	f7f6 f996 	bl	800027c <__adddf3>
 8009f50:	2200      	movs	r2, #0
 8009f52:	2300      	movs	r3, #0
 8009f54:	f7f6 fdd8 	bl	8000b08 <__aeabi_dcmpgt>
 8009f58:	b150      	cbz	r0, 8009f70 <floor+0x48>
 8009f5a:	2c00      	cmp	r4, #0
 8009f5c:	da55      	bge.n	800a00a <floor+0xe2>
 8009f5e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009f62:	432c      	orrs	r4, r5
 8009f64:	2500      	movs	r5, #0
 8009f66:	42ac      	cmp	r4, r5
 8009f68:	4c2b      	ldr	r4, [pc, #172]	@ (800a018 <floor+0xf0>)
 8009f6a:	bf08      	it	eq
 8009f6c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009f70:	4621      	mov	r1, r4
 8009f72:	4628      	mov	r0, r5
 8009f74:	e023      	b.n	8009fbe <floor+0x96>
 8009f76:	4f29      	ldr	r7, [pc, #164]	@ (800a01c <floor+0xf4>)
 8009f78:	4137      	asrs	r7, r6
 8009f7a:	ea01 0307 	and.w	r3, r1, r7
 8009f7e:	4303      	orrs	r3, r0
 8009f80:	d01d      	beq.n	8009fbe <floor+0x96>
 8009f82:	a323      	add	r3, pc, #140	@ (adr r3, 800a010 <floor+0xe8>)
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	f7f6 f978 	bl	800027c <__adddf3>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2300      	movs	r3, #0
 8009f90:	f7f6 fdba 	bl	8000b08 <__aeabi_dcmpgt>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d0eb      	beq.n	8009f70 <floor+0x48>
 8009f98:	2c00      	cmp	r4, #0
 8009f9a:	bfbe      	ittt	lt
 8009f9c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009fa0:	4133      	asrlt	r3, r6
 8009fa2:	18e4      	addlt	r4, r4, r3
 8009fa4:	ea24 0407 	bic.w	r4, r4, r7
 8009fa8:	2500      	movs	r5, #0
 8009faa:	e7e1      	b.n	8009f70 <floor+0x48>
 8009fac:	2e33      	cmp	r6, #51	@ 0x33
 8009fae:	dd0a      	ble.n	8009fc6 <floor+0x9e>
 8009fb0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009fb4:	d103      	bne.n	8009fbe <floor+0x96>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	f7f6 f95f 	bl	800027c <__adddf3>
 8009fbe:	ec41 0b10 	vmov	d0, r0, r1
 8009fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009fca:	f04f 37ff 	mov.w	r7, #4294967295
 8009fce:	40df      	lsrs	r7, r3
 8009fd0:	4207      	tst	r7, r0
 8009fd2:	d0f4      	beq.n	8009fbe <floor+0x96>
 8009fd4:	a30e      	add	r3, pc, #56	@ (adr r3, 800a010 <floor+0xe8>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	f7f6 f94f 	bl	800027c <__adddf3>
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f7f6 fd91 	bl	8000b08 <__aeabi_dcmpgt>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d0c2      	beq.n	8009f70 <floor+0x48>
 8009fea:	2c00      	cmp	r4, #0
 8009fec:	da0a      	bge.n	800a004 <floor+0xdc>
 8009fee:	2e14      	cmp	r6, #20
 8009ff0:	d101      	bne.n	8009ff6 <floor+0xce>
 8009ff2:	3401      	adds	r4, #1
 8009ff4:	e006      	b.n	800a004 <floor+0xdc>
 8009ff6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	40b3      	lsls	r3, r6
 8009ffe:	441d      	add	r5, r3
 800a000:	4545      	cmp	r5, r8
 800a002:	d3f6      	bcc.n	8009ff2 <floor+0xca>
 800a004:	ea25 0507 	bic.w	r5, r5, r7
 800a008:	e7b2      	b.n	8009f70 <floor+0x48>
 800a00a:	2500      	movs	r5, #0
 800a00c:	462c      	mov	r4, r5
 800a00e:	e7af      	b.n	8009f70 <floor+0x48>
 800a010:	8800759c 	.word	0x8800759c
 800a014:	7e37e43c 	.word	0x7e37e43c
 800a018:	bff00000 	.word	0xbff00000
 800a01c:	000fffff 	.word	0x000fffff

0800a020 <_init>:
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a022:	bf00      	nop
 800a024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a026:	bc08      	pop	{r3}
 800a028:	469e      	mov	lr, r3
 800a02a:	4770      	bx	lr

0800a02c <_fini>:
 800a02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02e:	bf00      	nop
 800a030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a032:	bc08      	pop	{r3}
 800a034:	469e      	mov	lr, r3
 800a036:	4770      	bx	lr
