
DO.AN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08008280  08008280  00009280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d4  080083d4  0000a468  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080083d4  080083d4  000093d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083dc  080083dc  0000a468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083dc  080083dc  000093dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000468  20000000  080083e4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a468  2**0
                  CONTENTS
 10 .bss          0000064c  20000468  20000468  0000a468  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ab4  20000ab4  0000a468  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a468  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cffb  00000000  00000000  0000a498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002601  00000000  00000000  00017493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00019a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a77  00000000  00000000  0001a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022948  00000000  00000000  0001b2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e19  00000000  00000000  0003dc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce0a5  00000000  00000000  0004ea20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  0011cac5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004414  00000000  00000000  0011cb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  00120f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000468 	.word	0x20000468
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008268 	.word	0x08008268

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000046c 	.word	0x2000046c
 80001cc:	08008268 	.word	0x08008268

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d013      	beq.n	80005dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00b      	beq.n	80005dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c4:	e000      	b.n	80005c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0f9      	beq.n	80005c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d2:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	b2d2      	uxtb	r2, r2
 80005da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <process_amplitude>:
static void MX_I2S2_Init(void);
static void MX_TIM1_Init(void);
static void MX_CRC_Init(void);
/* USER CODE BEGIN PFP */
int process_amplitude(int16_t *pcm, int len)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b085      	sub	sp, #20
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
	int32_t sum = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	e010      	b.n	8000620 <process_amplitude+0x36>
	{
		sum += abs(pcm[i]);
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800060a:	2b00      	cmp	r3, #0
 800060c:	bfb8      	it	lt
 800060e:	425b      	neglt	r3, r3
 8000610:	b29b      	uxth	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < len; i++)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	3301      	adds	r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	429a      	cmp	r2, r3
 8000626:	dbea      	blt.n	80005fe <process_amplitude+0x14>
	}
	return sum / len;
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000630:	4618      	mov	r0, r3
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4];  // for brightness

int datasentflag=0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d106      	bne.n	800065c <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	{
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800064e:	2100      	movs	r1, #0
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8000652:	f003 fbcd 	bl	8003df0 <HAL_TIM_PWM_Stop_DMA>
		datasentflag = 1;
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]
	}
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40010000 	.word	0x40010000
 8000668:	20000534 	.word	0x20000534
 800066c:	20000724 	.word	0x20000724

08000670 <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	b2d9      	uxtb	r1, r3
 8000682:	4a11      	ldr	r2, [pc, #68]	@ (80006c8 <Set_LED+0x58>)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	b2d9      	uxtb	r1, r3
 800068e:	4a0e      	ldr	r2, [pc, #56]	@ (80006c8 <Set_LED+0x58>)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	460a      	mov	r2, r1
 8000698:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	b2d9      	uxtb	r1, r3
 800069e:	4a0a      	ldr	r2, [pc, #40]	@ (80006c8 <Set_LED+0x58>)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4413      	add	r3, r2
 80006a6:	460a      	mov	r2, r1
 80006a8:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	b2d9      	uxtb	r1, r3
 80006ae:	4a06      	ldr	r2, [pc, #24]	@ (80006c8 <Set_LED+0x58>)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	460a      	mov	r2, r1
 80006b8:	70da      	strb	r2, [r3, #3]
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000704 	.word	0x20000704

080006cc <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness)  // 0-45
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	e036      	b.n	800075e <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 80006f0:	4a30      	ldr	r2, [pc, #192]	@ (80007b4 <WS2812_Send+0xd4>)
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	785b      	ldrb	r3, [r3, #1]
 80006fa:	041a      	lsls	r2, r3, #16
 80006fc:	492d      	ldr	r1, [pc, #180]	@ (80007b4 <WS2812_Send+0xd4>)
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	440b      	add	r3, r1
 8000704:	789b      	ldrb	r3, [r3, #2]
 8000706:	021b      	lsls	r3, r3, #8
 8000708:	431a      	orrs	r2, r3
 800070a:	492a      	ldr	r1, [pc, #168]	@ (80007b4 <WS2812_Send+0xd4>)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	78db      	ldrb	r3, [r3, #3]
 8000714:	4313      	orrs	r3, r2
 8000716:	603b      	str	r3, [r7, #0]
#endif

		for (int i=23; i>=0; i--)
 8000718:	2317      	movs	r3, #23
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	e019      	b.n	8000752 <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 800071e:	2201      	movs	r2, #1
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	461a      	mov	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	4013      	ands	r3, r2
 800072c:	2b00      	cmp	r3, #0
 800072e:	d005      	beq.n	800073c <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000730:	4a21      	ldr	r2, [pc, #132]	@ (80007b8 <WS2812_Send+0xd8>)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	213c      	movs	r1, #60	@ 0x3c
 8000736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800073a:	e004      	b.n	8000746 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 800073c:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <WS2812_Send+0xd8>)
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	211e      	movs	r1, #30
 8000742:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3b01      	subs	r3, #1
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	2b00      	cmp	r3, #0
 8000756:	dae2      	bge.n	800071e <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	3301      	adds	r3, #1
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	2b07      	cmp	r3, #7
 8000762:	ddc5      	ble.n	80006f0 <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	e00a      	b.n	8000780 <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 800076a:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <WS2812_Send+0xd8>)
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	2100      	movs	r1, #0
 8000770:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	3301      	adds	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	3301      	adds	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	2b31      	cmp	r3, #49	@ 0x31
 8000784:	ddf1      	ble.n	800076a <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	b29b      	uxth	r3, r3
 800078a:	4a0b      	ldr	r2, [pc, #44]	@ (80007b8 <WS2812_Send+0xd8>)
 800078c:	2100      	movs	r1, #0
 800078e:	480b      	ldr	r0, [pc, #44]	@ (80007bc <WS2812_Send+0xdc>)
 8000790:	f003 f966 	bl	8003a60 <HAL_TIM_PWM_Start_DMA>

	uint32_t timeout = HAL_GetTick();
 8000794:	f000 fef2 	bl	800157c <HAL_GetTick>
 8000798:	6078      	str	r0, [r7, #4]

	while (!datasentflag){};
 800079a:	bf00      	nop
 800079c:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <WS2812_Send+0xe0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d0fb      	beq.n	800079c <WS2812_Send+0xbc>
	datasentflag = 0;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <WS2812_Send+0xe0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000704 	.word	0x20000704
 80007b8:	20000728 	.word	0x20000728
 80007bc:	20000534 	.word	0x20000534
 80007c0:	20000724 	.word	0x20000724

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007ca:	f000 fe71 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f887 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d2:	f000 fa0f 	bl	8000bf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d6:	f000 f9d7 	bl	8000b88 <MX_DMA_Init>
  MX_I2S2_Init();
 80007da:	f000 f907 	bl	80009ec <MX_I2S2_Init>
  MX_TIM1_Init();
 80007de:	f000 f933 	bl	8000a48 <MX_TIM1_Init>
  MX_CRC_Init();
 80007e2:	f000 f8e7 	bl	80009b4 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 80007e6:	f004 fa27 	bl	8004c38 <MX_PDM2PCM_Init>
  /* USER CODE BEGIN 2 */



  HAL_I2S_Receive_DMA(&hi2s2,(uint8_t*) pdmBuffer, PDM_BUFFER_SIZE);
 80007ea:	2280      	movs	r2, #128	@ 0x80
 80007ec:	4934      	ldr	r1, [pc, #208]	@ (80008c0 <main+0xfc>)
 80007ee:	4835      	ldr	r0, [pc, #212]	@ (80008c4 <main+0x100>)
 80007f0:	f001 fe86 	bl	8002500 <HAL_I2S_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(pdmReady == 1)
 80007f4:	4b34      	ldr	r3, [pc, #208]	@ (80008c8 <main+0x104>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d1fb      	bne.n	80007f4 <main+0x30>
	  {
		  pdmReady = 0;
 80007fc:	4b32      	ldr	r3, [pc, #200]	@ (80008c8 <main+0x104>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
	      // Convert PDM to PCM
		  MX_PDM2PCM_Process(&pdmBuffer[PDM_BUFFER_SIZE / 2], pcmBuffer);
 8000802:	4932      	ldr	r1, [pc, #200]	@ (80008cc <main+0x108>)
 8000804:	4832      	ldr	r0, [pc, #200]	@ (80008d0 <main+0x10c>)
 8000806:	f004 fa41 	bl	8004c8c <MX_PDM2PCM_Process>

	      // Get amplitude
	      amplitude = process_amplitude((int16_t*)pcmBuffer, PCM_BUFFER_SIZE);
 800080a:	2110      	movs	r1, #16
 800080c:	482f      	ldr	r0, [pc, #188]	@ (80008cc <main+0x108>)
 800080e:	f7ff feec 	bl	80005ea <process_amplitude>
 8000812:	4603      	mov	r3, r0
 8000814:	4a2f      	ldr	r2, [pc, #188]	@ (80008d4 <main+0x110>)
 8000816:	6013      	str	r3, [r2, #0]
	      printf("AMP: %d\n", amplitude);
 8000818:	4b2e      	ldr	r3, [pc, #184]	@ (80008d4 <main+0x110>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	482e      	ldr	r0, [pc, #184]	@ (80008d8 <main+0x114>)
 8000820:	f006 fa46 	bl	8006cb0 <iprintf>


	      // Map amplitude to green
	      // Map amplitude to 0–8 LEDs
	      int level = amplitude / 100;  // Do nhay
 8000824:	4b2b      	ldr	r3, [pc, #172]	@ (80008d4 <main+0x110>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a2c      	ldr	r2, [pc, #176]	@ (80008dc <main+0x118>)
 800082a:	fb82 1203 	smull	r1, r2, r2, r3
 800082e:	1152      	asrs	r2, r2, #5
 8000830:	17db      	asrs	r3, r3, #31
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	60fb      	str	r3, [r7, #12]
	      if (level > 8) level = 8;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2b08      	cmp	r3, #8
 800083a:	dd01      	ble.n	8000840 <main+0x7c>
 800083c:	2308      	movs	r3, #8
 800083e:	60fb      	str	r3, [r7, #12]

	      // Update LED colors
	      for (int i = 0; i < 8; i++)
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	e02e      	b.n	80008a4 <main+0xe0>
	      {
	          if (i < level)
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	429a      	cmp	r2, r3
 800084c:	da21      	bge.n	8000892 <main+0xce>
	          {
	              uint8_t r = rand() % 256;
 800084e:	f006 f92f 	bl	8006ab0 <rand>
 8000852:	4603      	mov	r3, r0
 8000854:	425a      	negs	r2, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	bf58      	it	pl
 800085c:	4253      	negpl	r3, r2
 800085e:	71fb      	strb	r3, [r7, #7]
	              uint8_t g = rand() % 256;
 8000860:	f006 f926 	bl	8006ab0 <rand>
 8000864:	4603      	mov	r3, r0
 8000866:	425a      	negs	r2, r3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	bf58      	it	pl
 800086e:	4253      	negpl	r3, r2
 8000870:	71bb      	strb	r3, [r7, #6]
	              uint8_t b = rand() % 256;
 8000872:	f006 f91d 	bl	8006ab0 <rand>
 8000876:	4603      	mov	r3, r0
 8000878:	425a      	negs	r2, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	b2d2      	uxtb	r2, r2
 800087e:	bf58      	it	pl
 8000880:	4253      	negpl	r3, r2
 8000882:	717b      	strb	r3, [r7, #5]
	              Set_LED(i, r, g, b);
 8000884:	79f9      	ldrb	r1, [r7, #7]
 8000886:	79ba      	ldrb	r2, [r7, #6]
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	68b8      	ldr	r0, [r7, #8]
 800088c:	f7ff fef0 	bl	8000670 <Set_LED>
 8000890:	e005      	b.n	800089e <main+0xda>
	          }
	          else
	              Set_LED(i, 0, 0, 0);   // Off
 8000892:	2300      	movs	r3, #0
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	68b8      	ldr	r0, [r7, #8]
 800089a:	f7ff fee9 	bl	8000670 <Set_LED>
	      for (int i = 0; i < 8; i++)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	2b07      	cmp	r3, #7
 80008a8:	ddcd      	ble.n	8000846 <main+0x82>
	      }

	      Set_Brightness(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff ff0e 	bl	80006cc <Set_Brightness>
	      WS2812_Send();
 80008b0:	f7ff ff16 	bl	80006e0 <WS2812_Send>
	      // Restart I2S DMA
	      HAL_I2S_Receive_DMA(&hi2s2, pdmBuffer, PDM_BUFFER_SIZE);
 80008b4:	2280      	movs	r2, #128	@ 0x80
 80008b6:	4902      	ldr	r1, [pc, #8]	@ (80008c0 <main+0xfc>)
 80008b8:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <main+0x100>)
 80008ba:	f001 fe21 	bl	8002500 <HAL_I2S_Receive_DMA>
	  if(pdmReady == 1)
 80008be:	e799      	b.n	80007f4 <main+0x30>
 80008c0:	200005dc 	.word	0x200005dc
 80008c4:	2000048c 	.word	0x2000048c
 80008c8:	20000700 	.word	0x20000700
 80008cc:	200006dc 	.word	0x200006dc
 80008d0:	2000065c 	.word	0x2000065c
 80008d4:	200006fc 	.word	0x200006fc
 80008d8:	08008280 	.word	0x08008280
 80008dc:	51eb851f 	.word	0x51eb851f

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	@ 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2230      	movs	r2, #48	@ 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f006 fa33 	bl	8006d5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <SystemClock_Config+0xcc>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	4a27      	ldr	r2, [pc, #156]	@ (80009ac <SystemClock_Config+0xcc>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	@ 0x40
 8000914:	4b25      	ldr	r3, [pc, #148]	@ (80009ac <SystemClock_Config+0xcc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <SystemClock_Config+0xd0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a21      	ldr	r2, [pc, #132]	@ (80009b0 <SystemClock_Config+0xd0>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <SystemClock_Config+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800093c:	2302      	movs	r3, #2
 800093e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000944:	2310      	movs	r3, #16
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094c:	2300      	movs	r3, #0
 800094e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000950:	2308      	movs	r3, #8
 8000952:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000954:	23a0      	movs	r3, #160	@ 0xa0
 8000956:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800095c:	2307      	movs	r3, #7
 800095e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0320 	add.w	r3, r7, #32
 8000964:	4618      	mov	r0, r3
 8000966:	f002 fa2d 	bl	8002dc4 <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000970:	f000 fae0 	bl	8000f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2302      	movs	r3, #2
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000980:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000986:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800098a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2105      	movs	r1, #5
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fc8e 	bl	80032b4 <HAL_RCC_ClockConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800099e:	f000 fac9 	bl	8000f34 <Error_Handler>
  }
}
 80009a2:	bf00      	nop
 80009a4:	3750      	adds	r7, #80	@ 0x50
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000

080009b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <MX_CRC_Init+0x30>)
 80009ba:	4a0b      	ldr	r2, [pc, #44]	@ (80009e8 <MX_CRC_Init+0x34>)
 80009bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009be:	4809      	ldr	r0, [pc, #36]	@ (80009e4 <MX_CRC_Init+0x30>)
 80009c0:	f000 fef9 	bl	80017b6 <HAL_CRC_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009ca:	f000 fab3 	bl	8000f34 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80009ce:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <MX_CRC_Init+0x30>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <MX_CRC_Init+0x30>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f042 0201 	orr.w	r2, r2, #1
 80009dc:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000484 	.word	0x20000484
 80009e8:	40023000 	.word	0x40023000

080009ec <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80009f0:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <MX_I2S2_Init+0x54>)
 80009f2:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <MX_I2S2_Init+0x58>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80009f6:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_I2S2_Init+0x54>)
 80009f8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80009fc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009fe:	4b10      	ldr	r3, [pc, #64]	@ (8000a40 <MX_I2S2_Init+0x54>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_I2S2_Init+0x54>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a40 <MX_I2S2_Init+0x54>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <MX_I2S2_Init+0x54>)
 8000a12:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000a16:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_I2S2_Init+0x54>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <MX_I2S2_Init+0x54>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_I2S2_Init+0x54>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_I2S2_Init+0x54>)
 8000a2c:	f001 fc28 	bl	8002280 <HAL_I2S_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000a36:	f000 fa7d 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	2000048c 	.word	0x2000048c
 8000a44:	40003800 	.word	0x40003800

08000a48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b096      	sub	sp, #88	@ 0x58
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
 8000a76:	615a      	str	r2, [r3, #20]
 8000a78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2220      	movs	r2, #32
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f006 f96a 	bl	8006d5a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a86:	4b3e      	ldr	r3, [pc, #248]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000a88:	4a3e      	ldr	r2, [pc, #248]	@ (8000b84 <MX_TIM1_Init+0x13c>)
 8000a8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a8c:	4b3c      	ldr	r3, [pc, #240]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a92:	4b3b      	ldr	r3, [pc, #236]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8000a98:	4b39      	ldr	r3, [pc, #228]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000a9a:	22c7      	movs	r2, #199	@ 0xc7
 8000a9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9e:	4b38      	ldr	r3, [pc, #224]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aa4:	4b36      	ldr	r3, [pc, #216]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b35      	ldr	r3, [pc, #212]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab0:	4833      	ldr	r0, [pc, #204]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000ab2:	f002 ff2d 	bl	8003910 <HAL_TIM_Base_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000abc:	f000 fa3a 	bl	8000f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ac6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000aca:	4619      	mov	r1, r3
 8000acc:	482c      	ldr	r0, [pc, #176]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000ace:	f003 fb23 	bl	8004118 <HAL_TIM_ConfigClockSource>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ad8:	f000 fa2c 	bl	8000f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000adc:	4828      	ldr	r0, [pc, #160]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000ade:	f002 ff66 	bl	80039ae <HAL_TIM_PWM_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ae8:	f000 fa24 	bl	8000f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000af8:	4619      	mov	r1, r3
 8000afa:	4821      	ldr	r0, [pc, #132]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000afc:	f003 ffce 	bl	8004a9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b06:	f000 fa15 	bl	8000f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b0a:	2360      	movs	r3, #96	@ 0x60
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4814      	ldr	r0, [pc, #80]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000b30:	f003 fa30 	bl	8003f94 <HAL_TIM_PWM_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b3a:	f000 f9fb 	bl	8000f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b56:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4807      	ldr	r0, [pc, #28]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000b62:	f004 f817 	bl	8004b94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b6c:	f000 f9e2 	bl	8000f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b70:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <MX_TIM1_Init+0x138>)
 8000b72:	f000 fb39 	bl	80011e8 <HAL_TIM_MspPostInit>

}
 8000b76:	bf00      	nop
 8000b78:	3758      	adds	r7, #88	@ 0x58
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000534 	.word	0x20000534
 8000b84:	40010000 	.word	0x40010000

08000b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b17      	ldr	r3, [pc, #92]	@ (8000bf0 <MX_DMA_Init+0x68>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a16      	ldr	r2, [pc, #88]	@ (8000bf0 <MX_DMA_Init+0x68>)
 8000b98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b14      	ldr	r3, [pc, #80]	@ (8000bf0 <MX_DMA_Init+0x68>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <MX_DMA_Init+0x68>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf0 <MX_DMA_Init+0x68>)
 8000bb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <MX_DMA_Init+0x68>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	200e      	movs	r0, #14
 8000bcc:	f000 fdbd 	bl	800174a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bd0:	200e      	movs	r0, #14
 8000bd2:	f000 fdd6 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2039      	movs	r0, #57	@ 0x39
 8000bdc:	f000 fdb5 	bl	800174a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000be0:	2039      	movs	r0, #57	@ 0x39
 8000be2:	f000 fdce 	bl	8001782 <HAL_NVIC_EnableIRQ>

}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	@ 0x30
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
 8000c0e:	4b9a      	ldr	r3, [pc, #616]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a99      	ldr	r2, [pc, #612]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c14:	f043 0310 	orr.w	r3, r3, #16
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b97      	ldr	r3, [pc, #604]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	61bb      	str	r3, [r7, #24]
 8000c24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	4b93      	ldr	r3, [pc, #588]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a92      	ldr	r2, [pc, #584]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b90      	ldr	r3, [pc, #576]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b8c      	ldr	r3, [pc, #560]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a8b      	ldr	r2, [pc, #556]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b89      	ldr	r3, [pc, #548]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b85      	ldr	r3, [pc, #532]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a84      	ldr	r2, [pc, #528]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b82      	ldr	r3, [pc, #520]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b7e      	ldr	r3, [pc, #504]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	4a7d      	ldr	r2, [pc, #500]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b77      	ldr	r3, [pc, #476]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a76      	ldr	r2, [pc, #472]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b74      	ldr	r3, [pc, #464]	@ (8000e78 <MX_GPIO_Init+0x284>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	4871      	ldr	r0, [pc, #452]	@ (8000e7c <MX_GPIO_Init+0x288>)
 8000cb8:	f001 fac8 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	486f      	ldr	r0, [pc, #444]	@ (8000e80 <MX_GPIO_Init+0x28c>)
 8000cc2:	f001 fac3 	bl	800224c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000ccc:	486d      	ldr	r0, [pc, #436]	@ (8000e84 <MX_GPIO_Init+0x290>)
 8000cce:	f001 fabd 	bl	800224c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4864      	ldr	r0, [pc, #400]	@ (8000e7c <MX_GPIO_Init+0x288>)
 8000cea:	f001 f913 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	485e      	ldr	r0, [pc, #376]	@ (8000e80 <MX_GPIO_Init+0x28c>)
 8000d06:	f001 f905 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	485a      	ldr	r0, [pc, #360]	@ (8000e88 <MX_GPIO_Init+0x294>)
 8000d20:	f001 f8f8 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d24:	2310      	movs	r3, #16
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d34:	2306      	movs	r3, #6
 8000d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4852      	ldr	r0, [pc, #328]	@ (8000e88 <MX_GPIO_Init+0x294>)
 8000d40:	f001 f8e8 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d44:	23e0      	movs	r3, #224	@ 0xe0
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d54:	2305      	movs	r3, #5
 8000d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	484a      	ldr	r0, [pc, #296]	@ (8000e88 <MX_GPIO_Init+0x294>)
 8000d60:	f001 f8d8 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d64:	2304      	movs	r3, #4
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4845      	ldr	r0, [pc, #276]	@ (8000e8c <MX_GPIO_Init+0x298>)
 8000d78:	f001 f8cc 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d7c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000d80:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	483b      	ldr	r0, [pc, #236]	@ (8000e84 <MX_GPIO_Init+0x290>)
 8000d96:	f001 f8bd 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d9a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dac:	2306      	movs	r3, #6
 8000dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4832      	ldr	r0, [pc, #200]	@ (8000e80 <MX_GPIO_Init+0x28c>)
 8000db8:	f001 f8ac 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	4619      	mov	r1, r3
 8000dd0:	482d      	ldr	r0, [pc, #180]	@ (8000e88 <MX_GPIO_Init+0x294>)
 8000dd2:	f001 f89f 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000dd6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000de8:	230a      	movs	r3, #10
 8000dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4825      	ldr	r0, [pc, #148]	@ (8000e88 <MX_GPIO_Init+0x294>)
 8000df4:	f001 f88e 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000df8:	2320      	movs	r3, #32
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481e      	ldr	r0, [pc, #120]	@ (8000e84 <MX_GPIO_Init+0x290>)
 8000e0c:	f001 f882 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e10:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e16:	2312      	movs	r3, #18
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e22:	2304      	movs	r3, #4
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4817      	ldr	r0, [pc, #92]	@ (8000e8c <MX_GPIO_Init+0x298>)
 8000e2e:	f001 f871 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e32:	2302      	movs	r3, #2
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e36:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <MX_GPIO_Init+0x288>)
 8000e48:	f001 f864 	bl	8001f14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <MX_GPIO_Init+0x288>)
 8000e6a:	f001 f853 	bl	8001f14 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e6e:	bf00      	nop
 8000e70:	3730      	adds	r7, #48	@ 0x30
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020400 	.word	0x40020400

08000e90 <_write>:

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e009      	b.n	8000eb6 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1c5a      	adds	r2, r3, #1
 8000ea6:	60ba      	str	r2, [r7, #8]
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fb76 	bl	800059c <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	dbf1      	blt.n	8000ea2 <_write+0x12>
	}

	return len;
 8000ebe:	687b      	ldr	r3, [r7, #4]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_I2S_RxHalfCpltCallback>:

void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == SPI2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <HAL_I2S_RxHalfCpltCallback+0x30>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10a      	bne.n	8000ef0 <HAL_I2S_RxHalfCpltCallback+0x28>
	{
		MX_PDM2PCM_Process(&pdmBuffer[0], pcmBuffer);
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <HAL_I2S_RxHalfCpltCallback+0x34>)
 8000edc:	4808      	ldr	r0, [pc, #32]	@ (8000f00 <HAL_I2S_RxHalfCpltCallback+0x38>)
 8000ede:	f003 fed5 	bl	8004c8c <MX_PDM2PCM_Process>
		amplitude = process_amplitude(pcmBuffer, PCM_BUFFER_SIZE);
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	4805      	ldr	r0, [pc, #20]	@ (8000efc <HAL_I2S_RxHalfCpltCallback+0x34>)
 8000ee6:	f7ff fb80 	bl	80005ea <process_amplitude>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <HAL_I2S_RxHalfCpltCallback+0x3c>)
 8000eee:	6013      	str	r3, [r2, #0]
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40003800 	.word	0x40003800
 8000efc:	200006dc 	.word	0x200006dc
 8000f00:	200005dc 	.word	0x200005dc
 8000f04:	200006fc 	.word	0x200006fc

08000f08 <HAL_I2S_RxCpltCallback>:


void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    if (hi2s->Instance == SPI2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <HAL_I2S_RxCpltCallback+0x24>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d102      	bne.n	8000f20 <HAL_I2S_RxCpltCallback+0x18>
    {
    	//MX_PDM2PCM_Process(&pdmBuffer[PDM_BUFFER_SIZE / 2], pcmBuffer);
    	//amplitude = process_amplitude(pcmBuffer, PCM_BUFFER_SIZE);

    	//printf("AMP: %d\n", amplitude);
    	pdmReady = 1;
 8000f1a:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <HAL_I2S_RxCpltCallback+0x28>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]

    }
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	40003800 	.word	0x40003800
 8000f30:	20000700 	.word	0x20000700

08000f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f38:	b672      	cpsid	i
}
 8000f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <Error_Handler+0x8>

08000f40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_MspInit+0x4c>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f7e:	2007      	movs	r0, #7
 8000f80:	f000 fbd8 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40023800 	.word	0x40023800

08000f90 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_CRC_MspInit+0x3c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10d      	bne.n	8000fbe <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_CRC_MspInit+0x40>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <HAL_CRC_MspInit+0x40>)
 8000fac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <HAL_CRC_MspInit+0x40>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40023000 	.word	0x40023000
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	@ 0x38
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a4a      	ldr	r2, [pc, #296]	@ (8001128 <HAL_I2S_MspInit+0x154>)
 8001000:	4293      	cmp	r3, r2
 8001002:	f040 808c 	bne.w	800111e <HAL_I2S_MspInit+0x14a>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 800100a:	2332      	movs	r3, #50	@ 0x32
 800100c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800100e:	2302      	movs	r3, #2
 8001010:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4618      	mov	r0, r3
 8001018:	f002 fb38 	bl	800368c <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001022:	f7ff ff87 	bl	8000f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b40      	ldr	r3, [pc, #256]	@ (800112c <HAL_I2S_MspInit+0x158>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a3f      	ldr	r2, [pc, #252]	@ (800112c <HAL_I2S_MspInit+0x158>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b3d      	ldr	r3, [pc, #244]	@ (800112c <HAL_I2S_MspInit+0x158>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b39      	ldr	r3, [pc, #228]	@ (800112c <HAL_I2S_MspInit+0x158>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a38      	ldr	r2, [pc, #224]	@ (800112c <HAL_I2S_MspInit+0x158>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b36      	ldr	r3, [pc, #216]	@ (800112c <HAL_I2S_MspInit+0x158>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b32      	ldr	r3, [pc, #200]	@ (800112c <HAL_I2S_MspInit+0x158>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a31      	ldr	r2, [pc, #196]	@ (800112c <HAL_I2S_MspInit+0x158>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <HAL_I2S_MspInit+0x158>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800107a:	2308      	movs	r3, #8
 800107c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800108a:	2305      	movs	r3, #5
 800108c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	4826      	ldr	r0, [pc, #152]	@ (8001130 <HAL_I2S_MspInit+0x15c>)
 8001096:	f000 ff3d 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800109a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ac:	2305      	movs	r3, #5
 80010ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	481f      	ldr	r0, [pc, #124]	@ (8001134 <HAL_I2S_MspInit+0x160>)
 80010b8:	f000 ff2c 	bl	8001f14 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 80010be:	4a1f      	ldr	r2, [pc, #124]	@ (800113c <HAL_I2S_MspInit+0x168>)
 80010c0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 80010d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010da:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 80010de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010e2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 80010e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010ea:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 80010ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 80010f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010fa:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001102:	480d      	ldr	r0, [pc, #52]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 8001104:	f000 fb74 	bl	80017f0 <HAL_DMA_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 800110e:	f7ff ff11 	bl	8000f34 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a08      	ldr	r2, [pc, #32]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 8001116:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001118:	4a07      	ldr	r2, [pc, #28]	@ (8001138 <HAL_I2S_MspInit+0x164>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800111e:	bf00      	nop
 8001120:	3738      	adds	r7, #56	@ 0x38
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40003800 	.word	0x40003800
 800112c:	40023800 	.word	0x40023800
 8001130:	40020800 	.word	0x40020800
 8001134:	40020400 	.word	0x40020400
 8001138:	200004d4 	.word	0x200004d4
 800113c:	40026058 	.word	0x40026058

08001140 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a22      	ldr	r2, [pc, #136]	@ (80011d8 <HAL_TIM_Base_MspInit+0x98>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d13e      	bne.n	80011d0 <HAL_TIM_Base_MspInit+0x90>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <HAL_TIM_Base_MspInit+0x9c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	4a20      	ldr	r2, [pc, #128]	@ (80011dc <HAL_TIM_Base_MspInit+0x9c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6453      	str	r3, [r2, #68]	@ 0x44
 8001162:	4b1e      	ldr	r3, [pc, #120]	@ (80011dc <HAL_TIM_Base_MspInit+0x9c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001170:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HAL_TIM_Base_MspInit+0xa4>)
 8001172:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001176:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800117a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800117c:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 800117e:	2240      	movs	r2, #64	@ 0x40
 8001180:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001182:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001188:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 800118a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001196:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 800119a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800119e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 80011a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011ac:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80011b4:	480a      	ldr	r0, [pc, #40]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 80011b6:	f000 fb1b 	bl	80017f0 <HAL_DMA_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80011c0:	f7ff feb8 	bl	8000f34 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a06      	ldr	r2, [pc, #24]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 80011c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80011ca:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <HAL_TIM_Base_MspInit+0xa0>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40010000 	.word	0x40010000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	2000057c 	.word	0x2000057c
 80011e4:	40026428 	.word	0x40026428

080011e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <HAL_TIM_MspPostInit+0x68>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d11e      	bne.n	8001248 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <HAL_TIM_MspPostInit+0x6c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a10      	ldr	r2, [pc, #64]	@ (8001254 <HAL_TIM_MspPostInit+0x6c>)
 8001214:	f043 0310 	orr.w	r3, r3, #16
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <HAL_TIM_MspPostInit+0x6c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800122a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001238:	2301      	movs	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	4805      	ldr	r0, [pc, #20]	@ (8001258 <HAL_TIM_MspPostInit+0x70>)
 8001244:	f000 fe66 	bl	8001f14 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3720      	adds	r7, #32
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40010000 	.word	0x40010000
 8001254:	40023800 	.word	0x40023800
 8001258:	40021000 	.word	0x40021000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <NMI_Handler+0x4>

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <MemManage_Handler+0x4>

08001274 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <UsageFault_Handler+0x4>

08001284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b2:	f000 f94f 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <DMA1_Stream3_IRQHandler+0x10>)
 80012c2:	f000 fbbd 	bl	8001a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200004d4 	.word	0x200004d4

080012d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <DMA2_Stream1_IRQHandler+0x10>)
 80012d6:	f000 fbb3 	bl	8001a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000057c 	.word	0x2000057c

080012e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_kill>:

int _kill(int pid, int sig)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012fe:	f005 fd7b 	bl	8006df8 <__errno>
 8001302:	4603      	mov	r3, r0
 8001304:	2216      	movs	r2, #22
 8001306:	601a      	str	r2, [r3, #0]
  return -1;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_exit>:

void _exit (int status)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ffe7 	bl	80012f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001326:	bf00      	nop
 8001328:	e7fd      	b.n	8001326 <_exit+0x12>

0800132a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e00a      	b.n	8001352 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800133c:	f3af 8000 	nop.w
 8001340:	4601      	mov	r1, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	60ba      	str	r2, [r7, #8]
 8001348:	b2ca      	uxtb	r2, r1
 800134a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	429a      	cmp	r2, r3
 8001358:	dbf0      	blt.n	800133c <_read+0x12>
  }

  return len;
 800135a:	687b      	ldr	r3, [r7, #4]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800138c:	605a      	str	r2, [r3, #4]
  return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <_isatty>:

int _isatty(int file)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b085      	sub	sp, #20
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f005 fcfc 	bl	8006df8 <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	220c      	movs	r2, #12
 8001404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <_sbrk+0x64>)
 800141c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20020000 	.word	0x20020000
 800142c:	00000400 	.word	0x00000400
 8001430:	2000090c 	.word	0x2000090c
 8001434:	20000ab8 	.word	0x20000ab8

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001494 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001460:	f7ff ffea 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148a:	f005 fcbb 	bl	8006e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff f999 	bl	80007c4 <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 80014a0:	080083e4 	.word	0x080083e4
  ldr r2, =_sbss
 80014a4:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 80014a8:	20000ab4 	.word	0x20000ab4

080014ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <HAL_Init+0x40>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <HAL_Init+0x40>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <HAL_Init+0x40>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f92b 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fd2c 	bl	8000f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	@ (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f943 	bl	800179e <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f90b 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	@ (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	20000910 	.word	0x20000910

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	@ (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000910 	.word	0x20000910

08001594 <__NVIC_SetPriorityGrouping>:
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4907      	ldr	r1, [pc, #28]	@ (8001630 <__NVIC_EnableIRQ+0x38>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e100 	.word	0xe000e100

08001634 <__NVIC_SetPriority>:
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	6039      	str	r1, [r7, #0]
 800163e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db0a      	blt.n	800165e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	490c      	ldr	r1, [pc, #48]	@ (8001680 <__NVIC_SetPriority+0x4c>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	440b      	add	r3, r1
 8001658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800165c:	e00a      	b.n	8001674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4908      	ldr	r1, [pc, #32]	@ (8001684 <__NVIC_SetPriority+0x50>)
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	3b04      	subs	r3, #4
 800166c:	0112      	lsls	r2, r2, #4
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	440b      	add	r3, r1
 8001672:	761a      	strb	r2, [r3, #24]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <NVIC_EncodePriority>:
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	@ 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f1c3 0307 	rsb	r3, r3, #7
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	bf28      	it	cs
 80016a6:	2304      	movcs	r3, #4
 80016a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3304      	adds	r3, #4
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d902      	bls.n	80016b8 <NVIC_EncodePriority+0x30>
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3b03      	subs	r3, #3
 80016b6:	e000      	b.n	80016ba <NVIC_EncodePriority+0x32>
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	f04f 32ff 	mov.w	r2, #4294967295
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	401a      	ands	r2, r3
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43d9      	mvns	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	4313      	orrs	r3, r2
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3724      	adds	r7, #36	@ 0x24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
	...

080016f0 <SysTick_Config>:
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff8e 	bl	8001634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff29 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff3e 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff8e 	bl	8001688 <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5d 	bl	8001634 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff31 	bl	80015f8 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e00e      	b.n	80017e6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	795b      	ldrb	r3, [r3, #5]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d105      	bne.n	80017de <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fbd9 	bl	8000f90 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2201      	movs	r2, #1
 80017e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff febe 	bl	800157c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e099      	b.n	8001940 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800182c:	e00f      	b.n	800184e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800182e:	f7ff fea5 	bl	800157c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b05      	cmp	r3, #5
 800183a:	d908      	bls.n	800184e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2220      	movs	r2, #32
 8001840:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2203      	movs	r2, #3
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e078      	b.n	8001940 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1e8      	bne.n	800182e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	4b38      	ldr	r3, [pc, #224]	@ (8001948 <HAL_DMA_Init+0x158>)
 8001868:	4013      	ands	r3, r2
 800186a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800187a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	4313      	orrs	r3, r2
 800189e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d107      	bne.n	80018b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b0:	4313      	orrs	r3, r2
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f023 0307 	bic.w	r3, r3, #7
 80018ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d117      	bne.n	8001912 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00e      	beq.n	8001912 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fa91 	bl	8001e1c <DMA_CheckFifoParam>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2240      	movs	r2, #64	@ 0x40
 8001904:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800190e:	2301      	movs	r3, #1
 8001910:	e016      	b.n	8001940 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 fa48 	bl	8001db0 <DMA_CalcBaseAndBitshift>
 8001920:	4603      	mov	r3, r0
 8001922:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001928:	223f      	movs	r2, #63	@ 0x3f
 800192a:	409a      	lsls	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	f010803f 	.word	0xf010803f

0800194c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001962:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_DMA_Start_IT+0x26>
 800196e:	2302      	movs	r3, #2
 8001970:	e040      	b.n	80019f4 <HAL_DMA_Start_IT+0xa8>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d12f      	bne.n	80019e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f9da 	bl	8001d54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a4:	223f      	movs	r2, #63	@ 0x3f
 80019a6:	409a      	lsls	r2, r3
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0216 	orr.w	r2, r2, #22
 80019ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0208 	orr.w	r2, r2, #8
 80019d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e005      	b.n	80019f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019ee:	2302      	movs	r3, #2
 80019f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d004      	beq.n	8001a1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2280      	movs	r2, #128	@ 0x80
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00c      	b.n	8001a34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2205      	movs	r2, #5
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0201 	bic.w	r2, r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a4c:	4b8e      	ldr	r3, [pc, #568]	@ (8001c88 <HAL_DMA_IRQHandler+0x248>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a8e      	ldr	r2, [pc, #568]	@ (8001c8c <HAL_DMA_IRQHandler+0x24c>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0a9b      	lsrs	r3, r3, #10
 8001a58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d01a      	beq.n	8001aac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0204 	bic.w	r2, r2, #4
 8001a92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a98:	2208      	movs	r2, #8
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d012      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ace:	2201      	movs	r2, #1
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ada:	f043 0202 	orr.w	r2, r3, #2
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d012      	beq.n	8001b18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00b      	beq.n	8001b18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b04:	2204      	movs	r2, #4
 8001b06:	409a      	lsls	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b10:	f043 0204 	orr.w	r2, r3, #4
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d043      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d03c      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3a:	2210      	movs	r2, #16
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d018      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d108      	bne.n	8001b70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d024      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	4798      	blx	r3
 8001b6e:	e01f      	b.n	8001bb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01b      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
 8001b80:	e016      	b.n	8001bb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0208 	bic.w	r2, r2, #8
 8001b9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 808f 	beq.w	8001ce0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8087 	beq.w	8001ce0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d136      	bne.n	8001c58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0216 	bic.w	r2, r2, #22
 8001bf8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d103      	bne.n	8001c1a <HAL_DMA_IRQHandler+0x1da>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0208 	bic.w	r2, r2, #8
 8001c28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2e:	223f      	movs	r2, #63	@ 0x3f
 8001c30:	409a      	lsls	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d07e      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
        }
        return;
 8001c56:	e079      	b.n	8001d4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01d      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10d      	bne.n	8001c90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d031      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
 8001c84:	e02c      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x2a0>
 8001c86:	bf00      	nop
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
 8001ca0:	e01e      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10f      	bne.n	8001cd0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0210 	bic.w	r2, r2, #16
 8001cbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d032      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d022      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2205      	movs	r2, #5
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d307      	bcc.n	8001d28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f2      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x2cc>
 8001d26:	e000      	b.n	8001d2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
 8001d4a:	e000      	b.n	8001d4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d4c:	bf00      	nop
    }
  }
}
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b40      	cmp	r3, #64	@ 0x40
 8001d80:	d108      	bne.n	8001d94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d92:	e007      	b.n	8001da4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	60da      	str	r2, [r3, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3b10      	subs	r3, #16
 8001dc0:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <DMA_CalcBaseAndBitshift+0x64>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dca:	4a13      	ldr	r2, [pc, #76]	@ (8001e18 <DMA_CalcBaseAndBitshift+0x68>)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d909      	bls.n	8001df2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001de6:	f023 0303 	bic.w	r3, r3, #3
 8001dea:	1d1a      	adds	r2, r3, #4
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	659a      	str	r2, [r3, #88]	@ 0x58
 8001df0:	e007      	b.n	8001e02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001dfa:	f023 0303 	bic.w	r3, r3, #3
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	aaaaaaab 	.word	0xaaaaaaab
 8001e18:	0800829c 	.word	0x0800829c

08001e1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d11f      	bne.n	8001e76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d856      	bhi.n	8001eea <DMA_CheckFifoParam+0xce>
 8001e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <DMA_CheckFifoParam+0x28>)
 8001e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e42:	bf00      	nop
 8001e44:	08001e55 	.word	0x08001e55
 8001e48:	08001e67 	.word	0x08001e67
 8001e4c:	08001e55 	.word	0x08001e55
 8001e50:	08001eeb 	.word	0x08001eeb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d046      	beq.n	8001eee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e64:	e043      	b.n	8001eee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e6e:	d140      	bne.n	8001ef2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e74:	e03d      	b.n	8001ef2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e7e:	d121      	bne.n	8001ec4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d837      	bhi.n	8001ef6 <DMA_CheckFifoParam+0xda>
 8001e86:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <DMA_CheckFifoParam+0x70>)
 8001e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001ea3 	.word	0x08001ea3
 8001e94:	08001e9d 	.word	0x08001e9d
 8001e98:	08001eb5 	.word	0x08001eb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea0:	e030      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d025      	beq.n	8001efa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eb2:	e022      	b.n	8001efa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ebc:	d11f      	bne.n	8001efe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ec2:	e01c      	b.n	8001efe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d903      	bls.n	8001ed2 <DMA_CheckFifoParam+0xb6>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d003      	beq.n	8001ed8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ed0:	e018      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed6:	e015      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00e      	beq.n	8001f02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ee8:	e00b      	b.n	8001f02 <DMA_CheckFifoParam+0xe6>
      break;
 8001eea:	bf00      	nop
 8001eec:	e00a      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;
 8001eee:	bf00      	nop
 8001ef0:	e008      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef2:	bf00      	nop
 8001ef4:	e006      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;
 8001ef6:	bf00      	nop
 8001ef8:	e004      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;
 8001efa:	bf00      	nop
 8001efc:	e002      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;   
 8001efe:	bf00      	nop
 8001f00:	e000      	b.n	8001f04 <DMA_CheckFifoParam+0xe8>
      break;
 8001f02:	bf00      	nop
    }
  } 
  
  return status; 
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e16b      	b.n	8002208 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 815a 	bne.w	8002202 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d005      	beq.n	8001f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d130      	bne.n	8001fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 0201 	and.w	r2, r3, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d017      	beq.n	8002004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d123      	bne.n	8002058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	08da      	lsrs	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3208      	adds	r2, #8
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80b4 	beq.w	8002202 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b60      	ldr	r3, [pc, #384]	@ (8002220 <HAL_GPIO_Init+0x30c>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002220 <HAL_GPIO_Init+0x30c>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002220 <HAL_GPIO_Init+0x30c>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002224 <HAL_GPIO_Init+0x310>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a52      	ldr	r2, [pc, #328]	@ (8002228 <HAL_GPIO_Init+0x314>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d02b      	beq.n	800213a <HAL_GPIO_Init+0x226>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a51      	ldr	r2, [pc, #324]	@ (800222c <HAL_GPIO_Init+0x318>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d025      	beq.n	8002136 <HAL_GPIO_Init+0x222>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a50      	ldr	r2, [pc, #320]	@ (8002230 <HAL_GPIO_Init+0x31c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01f      	beq.n	8002132 <HAL_GPIO_Init+0x21e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002234 <HAL_GPIO_Init+0x320>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0x21a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x216>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4d      	ldr	r2, [pc, #308]	@ (800223c <HAL_GPIO_Init+0x328>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x212>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4c      	ldr	r2, [pc, #304]	@ (8002240 <HAL_GPIO_Init+0x32c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x20e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4b      	ldr	r2, [pc, #300]	@ (8002244 <HAL_GPIO_Init+0x330>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x20a>
 800211a:	2307      	movs	r3, #7
 800211c:	e00e      	b.n	800213c <HAL_GPIO_Init+0x228>
 800211e:	2308      	movs	r3, #8
 8002120:	e00c      	b.n	800213c <HAL_GPIO_Init+0x228>
 8002122:	2306      	movs	r3, #6
 8002124:	e00a      	b.n	800213c <HAL_GPIO_Init+0x228>
 8002126:	2305      	movs	r3, #5
 8002128:	e008      	b.n	800213c <HAL_GPIO_Init+0x228>
 800212a:	2304      	movs	r3, #4
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x228>
 800212e:	2303      	movs	r3, #3
 8002130:	e004      	b.n	800213c <HAL_GPIO_Init+0x228>
 8002132:	2302      	movs	r3, #2
 8002134:	e002      	b.n	800213c <HAL_GPIO_Init+0x228>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_GPIO_Init+0x228>
 800213a:	2300      	movs	r3, #0
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	f002 0203 	and.w	r2, r2, #3
 8002142:	0092      	lsls	r2, r2, #2
 8002144:	4093      	lsls	r3, r2
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800214c:	4935      	ldr	r1, [pc, #212]	@ (8002224 <HAL_GPIO_Init+0x310>)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	089b      	lsrs	r3, r3, #2
 8002152:	3302      	adds	r3, #2
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800215a:	4b3b      	ldr	r3, [pc, #236]	@ (8002248 <HAL_GPIO_Init+0x334>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800217e:	4a32      	ldr	r2, [pc, #200]	@ (8002248 <HAL_GPIO_Init+0x334>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002184:	4b30      	ldr	r3, [pc, #192]	@ (8002248 <HAL_GPIO_Init+0x334>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a8:	4a27      	ldr	r2, [pc, #156]	@ (8002248 <HAL_GPIO_Init+0x334>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ae:	4b26      	ldr	r3, [pc, #152]	@ (8002248 <HAL_GPIO_Init+0x334>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002248 <HAL_GPIO_Init+0x334>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002248 <HAL_GPIO_Init+0x334>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021fc:	4a12      	ldr	r2, [pc, #72]	@ (8002248 <HAL_GPIO_Init+0x334>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3301      	adds	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2b0f      	cmp	r3, #15
 800220c:	f67f ae90 	bls.w	8001f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3724      	adds	r7, #36	@ 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800
 8002224:	40013800 	.word	0x40013800
 8002228:	40020000 	.word	0x40020000
 800222c:	40020400 	.word	0x40020400
 8002230:	40020800 	.word	0x40020800
 8002234:	40020c00 	.word	0x40020c00
 8002238:	40021000 	.word	0x40021000
 800223c:	40021400 	.word	0x40021400
 8002240:	40021800 	.word	0x40021800
 8002244:	40021c00 	.word	0x40021c00
 8002248:	40013c00 	.word	0x40013c00

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002268:	e003      	b.n	8002272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	041a      	lsls	r2, r3, #16
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	619a      	str	r2, [r3, #24]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e128      	b.n	80024e4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a90      	ldr	r2, [pc, #576]	@ (80024ec <HAL_I2S_Init+0x26c>)
 80022aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7fe fe91 	bl	8000fd4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2202      	movs	r2, #2
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80022c8:	f023 030f 	bic.w	r3, r3, #15
 80022cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2202      	movs	r2, #2
 80022d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d060      	beq.n	80023a0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80022e6:	2310      	movs	r3, #16
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e001      	b.n	80022f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80022ec:	2320      	movs	r3, #32
 80022ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d802      	bhi.n	80022fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80022fe:	2001      	movs	r0, #1
 8002300:	f001 faa6 	bl	8003850 <HAL_RCCEx_GetPeriphCLKFreq>
 8002304:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800230e:	d125      	bne.n	800235c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	461a      	mov	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	fbb2 f3f3 	udiv	r3, r2, r3
 8002334:	3305      	adds	r3, #5
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e01f      	b.n	800237a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	fbb2 f2f3 	udiv	r2, r2, r3
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	461a      	mov	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	3305      	adds	r3, #5
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e00e      	b.n	800237a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fbb2 f2f3 	udiv	r2, r2, r3
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	461a      	mov	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	3305      	adds	r3, #5
 8002378:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4a5c      	ldr	r2, [pc, #368]	@ (80024f0 <HAL_I2S_Init+0x270>)
 800237e:	fba2 2303 	umull	r2, r3, r2, r3
 8002382:	08db      	lsrs	r3, r3, #3
 8002384:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	e003      	b.n	80023a8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d902      	bls.n	80023b4 <HAL_I2S_Init+0x134>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	2bff      	cmp	r3, #255	@ 0xff
 80023b2:	d907      	bls.n	80023c4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b8:	f043 0210 	orr.w	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e08f      	b.n	80024e4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	ea42 0103 	orr.w	r1, r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80023e2:	f023 030f 	bic.w	r3, r3, #15
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6851      	ldr	r1, [r2, #4]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6892      	ldr	r2, [r2, #8]
 80023ee:	4311      	orrs	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68d2      	ldr	r2, [r2, #12]
 80023f4:	4311      	orrs	r1, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6992      	ldr	r2, [r2, #24]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002406:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d161      	bne.n	80024d4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a38      	ldr	r2, [pc, #224]	@ (80024f4 <HAL_I2S_Init+0x274>)
 8002414:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a37      	ldr	r2, [pc, #220]	@ (80024f8 <HAL_I2S_Init+0x278>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d101      	bne.n	8002424 <HAL_I2S_Init+0x1a4>
 8002420:	4b36      	ldr	r3, [pc, #216]	@ (80024fc <HAL_I2S_Init+0x27c>)
 8002422:	e001      	b.n	8002428 <HAL_I2S_Init+0x1a8>
 8002424:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	4932      	ldr	r1, [pc, #200]	@ (80024f8 <HAL_I2S_Init+0x278>)
 8002430:	428a      	cmp	r2, r1
 8002432:	d101      	bne.n	8002438 <HAL_I2S_Init+0x1b8>
 8002434:	4a31      	ldr	r2, [pc, #196]	@ (80024fc <HAL_I2S_Init+0x27c>)
 8002436:	e001      	b.n	800243c <HAL_I2S_Init+0x1bc>
 8002438:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800243c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002440:	f023 030f 	bic.w	r3, r3, #15
 8002444:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2b      	ldr	r2, [pc, #172]	@ (80024f8 <HAL_I2S_Init+0x278>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_I2S_Init+0x1d4>
 8002450:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <HAL_I2S_Init+0x27c>)
 8002452:	e001      	b.n	8002458 <HAL_I2S_Init+0x1d8>
 8002454:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002458:	2202      	movs	r2, #2
 800245a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a25      	ldr	r2, [pc, #148]	@ (80024f8 <HAL_I2S_Init+0x278>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d101      	bne.n	800246a <HAL_I2S_Init+0x1ea>
 8002466:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <HAL_I2S_Init+0x27c>)
 8002468:	e001      	b.n	800246e <HAL_I2S_Init+0x1ee>
 800246a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800247a:	d003      	beq.n	8002484 <HAL_I2S_Init+0x204>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002484:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	e001      	b.n	8002490 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800248c:	2300      	movs	r3, #0
 800248e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800249a:	4313      	orrs	r3, r2
 800249c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	897b      	ldrh	r3, [r7, #10]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024bc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a0d      	ldr	r2, [pc, #52]	@ (80024f8 <HAL_I2S_Init+0x278>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_I2S_Init+0x24c>
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <HAL_I2S_Init+0x27c>)
 80024ca:	e001      	b.n	80024d0 <HAL_I2S_Init+0x250>
 80024cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80024d0:	897a      	ldrh	r2, [r7, #10]
 80024d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3720      	adds	r7, #32
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	080027fd 	.word	0x080027fd
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	08002911 	.word	0x08002911
 80024f8:	40003800 	.word	0x40003800
 80024fc:	40003400 	.word	0x40003400

08002500 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_I2S_Receive_DMA+0x1a>
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e09d      	b.n	800265a <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
 800252c:	e095      	b.n	800265a <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_I2S_Receive_DMA+0x3e>
 800253a:	2302      	movs	r3, #2
 800253c:	e08d      	b.n	800265a <HAL_I2S_Receive_DMA+0x15a>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2204      	movs	r2, #4
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d002      	beq.n	8002572 <HAL_I2S_Receive_DMA+0x72>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d10a      	bne.n	8002588 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002586:	e005      	b.n	8002594 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	88fa      	ldrh	r2, [r7, #6]
 8002592:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002598:	4a32      	ldr	r2, [pc, #200]	@ (8002664 <HAL_I2S_Receive_DMA+0x164>)
 800259a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a0:	4a31      	ldr	r2, [pc, #196]	@ (8002668 <HAL_I2S_Receive_DMA+0x168>)
 80025a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a8:	4a30      	ldr	r2, [pc, #192]	@ (800266c <HAL_I2S_Receive_DMA+0x16c>)
 80025aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025ba:	d10a      	bne.n	80025d2 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	330c      	adds	r3, #12
 80025dc:	4619      	mov	r1, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80025e8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80025ea:	f7ff f9af 	bl	800194c <HAL_DMA_Start_IT>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00f      	beq.n	8002614 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f8:	f043 0208 	orr.w	r2, r3, #8
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e022      	b.n	800265a <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69da      	ldr	r2, [r3, #28]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002656:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	080026db 	.word	0x080026db
 8002668:	08002699 	.word	0x08002699
 800266c:	080026f7 	.word	0x080026f7

08002670 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10e      	bne.n	80026cc <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f7fe fc1b 	bl	8000f08 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7fe fbed 	bl	8000ec8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002702:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0203 	bic.w	r2, r2, #3
 8002712:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272c:	f043 0208 	orr.w	r2, r3, #8
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f7ff ffa5 	bl	8002684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	881a      	ldrh	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	1c9a      	adds	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10e      	bne.n	8002796 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002786:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff6d 	bl	8002670 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b0:	b292      	uxth	r2, r2
 80027b2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	1c9a      	adds	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10e      	bne.n	80027f4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fb8a 	bl	8000f08 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b04      	cmp	r3, #4
 8002816:	d13a      	bne.n	800288e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b01      	cmp	r3, #1
 8002820:	d109      	bne.n	8002836 <I2S_IRQHandler+0x3a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282c:	2b40      	cmp	r3, #64	@ 0x40
 800282e:	d102      	bne.n	8002836 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ffb4 	bl	800279e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283c:	2b40      	cmp	r3, #64	@ 0x40
 800283e:	d126      	bne.n	800288e <I2S_IRQHandler+0x92>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b20      	cmp	r3, #32
 800284c:	d11f      	bne.n	800288e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800285c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002880:	f043 0202 	orr.w	r2, r3, #2
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff fefb 	bl	8002684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b03      	cmp	r3, #3
 8002898:	d136      	bne.n	8002908 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d109      	bne.n	80028b8 <I2S_IRQHandler+0xbc>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ae:	2b80      	cmp	r3, #128	@ 0x80
 80028b0:	d102      	bne.n	80028b8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff45 	bl	8002742 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d122      	bne.n	8002908 <I2S_IRQHandler+0x10c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0320 	and.w	r3, r3, #32
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	d11b      	bne.n	8002908 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028de:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	f043 0204 	orr.w	r2, r3, #4
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff febe 	bl	8002684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002908:	bf00      	nop
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a92      	ldr	r2, [pc, #584]	@ (8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800292a:	4b92      	ldr	r3, [pc, #584]	@ (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800292c:	e001      	b.n	8002932 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800292e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a8b      	ldr	r2, [pc, #556]	@ (8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002948:	4b8a      	ldr	r3, [pc, #552]	@ (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800294a:	e001      	b.n	8002950 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800294c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800295c:	d004      	beq.n	8002968 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 8099 	bne.w	8002a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d107      	bne.n	8002982 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f925 	bl	8002bcc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f9c8 	bl	8002d2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a2:	2b40      	cmp	r3, #64	@ 0x40
 80029a4:	d13a      	bne.n	8002a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d035      	beq.n	8002a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a6e      	ldr	r2, [pc, #440]	@ (8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80029ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029bc:	e001      	b.n	80029c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80029be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4969      	ldr	r1, [pc, #420]	@ (8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029ca:	428b      	cmp	r3, r1
 80029cc:	d101      	bne.n	80029d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80029ce:	4b69      	ldr	r3, [pc, #420]	@ (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029d0:	e001      	b.n	80029d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80029d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	f043 0202 	orr.w	r2, r3, #2
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff fe34 	bl	8002684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	f040 80c3 	bne.w	8002bae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80bd 	beq.w	8002bae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a49      	ldr	r2, [pc, #292]	@ (8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a4e:	4b49      	ldr	r3, [pc, #292]	@ (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a50:	e001      	b.n	8002a56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4944      	ldr	r1, [pc, #272]	@ (8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a5e:	428b      	cmp	r3, r1
 8002a60:	d101      	bne.n	8002a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a62:	4b44      	ldr	r3, [pc, #272]	@ (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a64:	e001      	b.n	8002a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f043 0204 	orr.w	r2, r3, #4
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff fdf6 	bl	8002684 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a98:	e089      	b.n	8002bae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d107      	bne.n	8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f8be 	bl	8002c30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f8fd 	bl	8002cc8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad4:	2b40      	cmp	r3, #64	@ 0x40
 8002ad6:	d12f      	bne.n	8002b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02a      	beq.n	8002b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002af0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1e      	ldr	r2, [pc, #120]	@ (8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002afc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002afe:	e001      	b.n	8002b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4919      	ldr	r1, [pc, #100]	@ (8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b0c:	428b      	cmp	r3, r1
 8002b0e:	d101      	bne.n	8002b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b10:	4b18      	ldr	r3, [pc, #96]	@ (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b12:	e001      	b.n	8002b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2a:	f043 0202 	orr.w	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff fda6 	bl	8002684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d136      	bne.n	8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d031      	beq.n	8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a07      	ldr	r2, [pc, #28]	@ (8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b56:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b58:	e001      	b.n	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4902      	ldr	r1, [pc, #8]	@ (8002b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b66:	428b      	cmp	r3, r1
 8002b68:	d106      	bne.n	8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002b6a:	4b02      	ldr	r3, [pc, #8]	@ (8002b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b6c:	e006      	b.n	8002b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002b6e:	bf00      	nop
 8002b70:	40003800 	.word	0x40003800
 8002b74:	40003400 	.word	0x40003400
 8002b78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b80:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002b90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	f043 0204 	orr.w	r2, r3, #4
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fd6c 	bl	8002684 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bac:	e000      	b.n	8002bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bae:	bf00      	nop
}
 8002bb0:	bf00      	nop
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	1c99      	adds	r1, r3, #2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6251      	str	r1, [r2, #36]	@ 0x24
 8002bde:	881a      	ldrh	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d113      	bne.n	8002c26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ffc9 	bl	8002bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	1c99      	adds	r1, r3, #2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6251      	str	r1, [r2, #36]	@ 0x24
 8002c42:	8819      	ldrh	r1, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <I2SEx_TxISR_I2SExt+0x22>
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8002c50:	e001      	b.n	8002c56 <I2SEx_TxISR_I2SExt+0x26>
 8002c52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c56:	460a      	mov	r2, r1
 8002c58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d121      	bne.n	8002cb6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d101      	bne.n	8002c80 <I2SEx_TxISR_I2SExt+0x50>
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8002c7e:	e001      	b.n	8002c84 <I2SEx_TxISR_I2SExt+0x54>
 8002c80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	490d      	ldr	r1, [pc, #52]	@ (8002cc0 <I2SEx_TxISR_I2SExt+0x90>)
 8002c8c:	428b      	cmp	r3, r1
 8002c8e:	d101      	bne.n	8002c94 <I2SEx_TxISR_I2SExt+0x64>
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <I2SEx_TxISR_I2SExt+0x94>)
 8002c92:	e001      	b.n	8002c98 <I2SEx_TxISR_I2SExt+0x68>
 8002c94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002c9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d106      	bne.n	8002cb6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff81 	bl	8002bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40003800 	.word	0x40003800
 8002cc4:	40003400 	.word	0x40003400

08002cc8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68d8      	ldr	r0, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	1c99      	adds	r1, r3, #2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002ce0:	b282      	uxth	r2, r0
 8002ce2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d113      	bne.n	8002d24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ff4a 	bl	8002bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a20      	ldr	r2, [pc, #128]	@ (8002dbc <I2SEx_RxISR_I2SExt+0x90>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d101      	bne.n	8002d42 <I2SEx_RxISR_I2SExt+0x16>
 8002d3e:	4b20      	ldr	r3, [pc, #128]	@ (8002dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8002d40:	e001      	b.n	8002d46 <I2SEx_RxISR_I2SExt+0x1a>
 8002d42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d46:	68d8      	ldr	r0, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4c:	1c99      	adds	r1, r3, #2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002d52:	b282      	uxth	r2, r0
 8002d54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d121      	bne.n	8002db2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <I2SEx_RxISR_I2SExt+0x90>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <I2SEx_RxISR_I2SExt+0x50>
 8002d78:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8002d7a:	e001      	b.n	8002d80 <I2SEx_RxISR_I2SExt+0x54>
 8002d7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	490d      	ldr	r1, [pc, #52]	@ (8002dbc <I2SEx_RxISR_I2SExt+0x90>)
 8002d88:	428b      	cmp	r3, r1
 8002d8a:	d101      	bne.n	8002d90 <I2SEx_RxISR_I2SExt+0x64>
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <I2SEx_RxISR_I2SExt+0x94>)
 8002d8e:	e001      	b.n	8002d94 <I2SEx_RxISR_I2SExt+0x68>
 8002d90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002d94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d106      	bne.n	8002db2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff ff03 	bl	8002bb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40003800 	.word	0x40003800
 8002dc0:	40003400 	.word	0x40003400

08002dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e267      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d075      	beq.n	8002ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002de2:	4b88      	ldr	r3, [pc, #544]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d00c      	beq.n	8002e08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dee:	4b85      	ldr	r3, [pc, #532]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d112      	bne.n	8002e20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfa:	4b82      	ldr	r3, [pc, #520]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e06:	d10b      	bne.n	8002e20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	4b7e      	ldr	r3, [pc, #504]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d05b      	beq.n	8002ecc <HAL_RCC_OscConfig+0x108>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d157      	bne.n	8002ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e242      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e28:	d106      	bne.n	8002e38 <HAL_RCC_OscConfig+0x74>
 8002e2a:	4b76      	ldr	r3, [pc, #472]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a75      	ldr	r2, [pc, #468]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e01d      	b.n	8002e74 <HAL_RCC_OscConfig+0xb0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e40:	d10c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x98>
 8002e42:	4b70      	ldr	r3, [pc, #448]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6f      	ldr	r2, [pc, #444]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6c      	ldr	r2, [pc, #432]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0xb0>
 8002e5c:	4b69      	ldr	r3, [pc, #420]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a68      	ldr	r2, [pc, #416]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b66      	ldr	r3, [pc, #408]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a65      	ldr	r2, [pc, #404]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fb7e 	bl	800157c <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e84:	f7fe fb7a 	bl	800157c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	@ 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e207      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b5b      	ldr	r3, [pc, #364]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0xc0>
 8002ea2:	e014      	b.n	8002ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fb6a 	bl	800157c <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eac:	f7fe fb66 	bl	800157c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b64      	cmp	r3, #100	@ 0x64
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e1f3      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebe:	4b51      	ldr	r3, [pc, #324]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0xe8>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d063      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002eda:	4b4a      	ldr	r3, [pc, #296]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ee6:	4b47      	ldr	r3, [pc, #284]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d11c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef2:	4b44      	ldr	r3, [pc, #272]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002efe:	4b41      	ldr	r3, [pc, #260]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <HAL_RCC_OscConfig+0x152>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e1c7      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f16:	4b3b      	ldr	r3, [pc, #236]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4937      	ldr	r1, [pc, #220]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2a:	e03a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d020      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f34:	4b34      	ldr	r3, [pc, #208]	@ (8003008 <HAL_RCC_OscConfig+0x244>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fb1f 	bl	800157c <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f42:	f7fe fb1b 	bl	800157c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1a8      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f54:	4b2b      	ldr	r3, [pc, #172]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4b28      	ldr	r3, [pc, #160]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4925      	ldr	r1, [pc, #148]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
 8002f74:	e015      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <HAL_RCC_OscConfig+0x244>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fafe 	bl	800157c <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f84:	f7fe fafa 	bl	800157c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e187      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f96:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d036      	beq.n	800301c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d016      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb6:	4b15      	ldr	r3, [pc, #84]	@ (800300c <HAL_RCC_OscConfig+0x248>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbc:	f7fe fade 	bl	800157c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc4:	f7fe fada 	bl	800157c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e167      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x200>
 8002fe2:	e01b      	b.n	800301c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe4:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_RCC_OscConfig+0x248>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7fe fac7 	bl	800157c <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff0:	e00e      	b.n	8003010 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff2:	f7fe fac3 	bl	800157c <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d907      	bls.n	8003010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e150      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
 8003004:	40023800 	.word	0x40023800
 8003008:	42470000 	.word	0x42470000
 800300c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003010:	4b88      	ldr	r3, [pc, #544]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 8003012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ea      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 8097 	beq.w	8003158 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302a:	2300      	movs	r3, #0
 800302c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302e:	4b81      	ldr	r3, [pc, #516]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10f      	bne.n	800305a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	4b7d      	ldr	r3, [pc, #500]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	4a7c      	ldr	r2, [pc, #496]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 8003044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003048:	6413      	str	r3, [r2, #64]	@ 0x40
 800304a:	4b7a      	ldr	r3, [pc, #488]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003056:	2301      	movs	r3, #1
 8003058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305a:	4b77      	ldr	r3, [pc, #476]	@ (8003238 <HAL_RCC_OscConfig+0x474>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d118      	bne.n	8003098 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003066:	4b74      	ldr	r3, [pc, #464]	@ (8003238 <HAL_RCC_OscConfig+0x474>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a73      	ldr	r2, [pc, #460]	@ (8003238 <HAL_RCC_OscConfig+0x474>)
 800306c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003072:	f7fe fa83 	bl	800157c <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307a:	f7fe fa7f 	bl	800157c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e10c      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	4b6a      	ldr	r3, [pc, #424]	@ (8003238 <HAL_RCC_OscConfig+0x474>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d106      	bne.n	80030ae <HAL_RCC_OscConfig+0x2ea>
 80030a0:	4b64      	ldr	r3, [pc, #400]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80030a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a4:	4a63      	ldr	r2, [pc, #396]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ac:	e01c      	b.n	80030e8 <HAL_RCC_OscConfig+0x324>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b05      	cmp	r3, #5
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x30c>
 80030b6:	4b5f      	ldr	r3, [pc, #380]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0x324>
 80030d0:	4b58      	ldr	r3, [pc, #352]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d4:	4a57      	ldr	r2, [pc, #348]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	@ 0x70
 80030dc:	4b55      	ldr	r3, [pc, #340]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e0:	4a54      	ldr	r2, [pc, #336]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80030e2:	f023 0304 	bic.w	r3, r3, #4
 80030e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d015      	beq.n	800311c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fe fa44 	bl	800157c <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	e00a      	b.n	800310e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f8:	f7fe fa40 	bl	800157c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e0cb      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310e:	4b49      	ldr	r3, [pc, #292]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0ee      	beq.n	80030f8 <HAL_RCC_OscConfig+0x334>
 800311a:	e014      	b.n	8003146 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311c:	f7fe fa2e 	bl	800157c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003122:	e00a      	b.n	800313a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003124:	f7fe fa2a 	bl	800157c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0b5      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313a:	4b3e      	ldr	r3, [pc, #248]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ee      	bne.n	8003124 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d105      	bne.n	8003158 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314c:	4b39      	ldr	r3, [pc, #228]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	4a38      	ldr	r2, [pc, #224]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 8003152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003156:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a1 	beq.w	80032a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003162:	4b34      	ldr	r3, [pc, #208]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b08      	cmp	r3, #8
 800316c:	d05c      	beq.n	8003228 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d141      	bne.n	80031fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b31      	ldr	r3, [pc, #196]	@ (800323c <HAL_RCC_OscConfig+0x478>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe f9fe 	bl	800157c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe f9fa 	bl	800157c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e087      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003196:	4b27      	ldr	r3, [pc, #156]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	019b      	lsls	r3, r3, #6
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	085b      	lsrs	r3, r3, #1
 80031ba:	3b01      	subs	r3, #1
 80031bc:	041b      	lsls	r3, r3, #16
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	061b      	lsls	r3, r3, #24
 80031c6:	491b      	ldr	r1, [pc, #108]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_OscConfig+0x478>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d2:	f7fe f9d3 	bl	800157c <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031da:	f7fe f9cf 	bl	800157c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e05c      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ec:	4b11      	ldr	r3, [pc, #68]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x416>
 80031f8:	e054      	b.n	80032a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fa:	4b10      	ldr	r3, [pc, #64]	@ (800323c <HAL_RCC_OscConfig+0x478>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe f9bc 	bl	800157c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe f9b8 	bl	800157c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e045      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_RCC_OscConfig+0x470>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x444>
 8003226:	e03d      	b.n	80032a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e038      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
 8003234:	40023800 	.word	0x40023800
 8003238:	40007000 	.word	0x40007000
 800323c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003240:	4b1b      	ldr	r3, [pc, #108]	@ (80032b0 <HAL_RCC_OscConfig+0x4ec>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d028      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d121      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d11a      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003270:	4013      	ands	r3, r2
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003278:	4293      	cmp	r3, r2
 800327a:	d111      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800

080032b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0cc      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b68      	ldr	r3, [pc, #416]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d90c      	bls.n	80032f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b65      	ldr	r3, [pc, #404]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b63      	ldr	r3, [pc, #396]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0b8      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003308:	4b59      	ldr	r3, [pc, #356]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a58      	ldr	r2, [pc, #352]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003312:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003320:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a52      	ldr	r2, [pc, #328]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800332a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332c:	4b50      	ldr	r3, [pc, #320]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	494d      	ldr	r1, [pc, #308]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	4313      	orrs	r3, r2
 800333c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d044      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d119      	bne.n	8003392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e07f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d003      	beq.n	8003372 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336e:	2b03      	cmp	r3, #3
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	4b3f      	ldr	r3, [pc, #252]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e06f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003382:	4b3b      	ldr	r3, [pc, #236]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e067      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003392:	4b37      	ldr	r3, [pc, #220]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 0203 	bic.w	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4934      	ldr	r1, [pc, #208]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033a4:	f7fe f8ea 	bl	800157c <HAL_GetTick>
 80033a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	e00a      	b.n	80033c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ac:	f7fe f8e6 	bl	800157c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e04f      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	4b2b      	ldr	r3, [pc, #172]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 020c 	and.w	r2, r3, #12
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d1eb      	bne.n	80033ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033d4:	4b25      	ldr	r3, [pc, #148]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d20c      	bcs.n	80033fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b22      	ldr	r3, [pc, #136]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e032      	b.n	8003462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003408:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4916      	ldr	r1, [pc, #88]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d009      	beq.n	800343a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003426:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	490e      	ldr	r1, [pc, #56]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800343a:	f000 f821 	bl	8003480 <HAL_RCC_GetSysClockFreq>
 800343e:	4602      	mov	r2, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	490a      	ldr	r1, [pc, #40]	@ (8003474 <HAL_RCC_ClockConfig+0x1c0>)
 800344c:	5ccb      	ldrb	r3, [r1, r3]
 800344e:	fa22 f303 	lsr.w	r3, r2, r3
 8003452:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fe f84a 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023c00 	.word	0x40023c00
 8003470:	40023800 	.word	0x40023800
 8003474:	0800828c 	.word	0x0800828c
 8003478:	20000000 	.word	0x20000000
 800347c:	20000004 	.word	0x20000004

08003480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b094      	sub	sp, #80	@ 0x50
 8003486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003498:	4b79      	ldr	r3, [pc, #484]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d00d      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x40>
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	f200 80e1 	bhi.w	800366c <HAL_RCC_GetSysClockFreq+0x1ec>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x34>
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0x3a>
 80034b2:	e0db      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034b4:	4b73      	ldr	r3, [pc, #460]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x204>)
 80034b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034b8:	e0db      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ba:	4b73      	ldr	r3, [pc, #460]	@ (8003688 <HAL_RCC_GetSysClockFreq+0x208>)
 80034bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034be:	e0d8      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d063      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	099b      	lsrs	r3, r3, #6
 80034dc:	2200      	movs	r2, #0
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80034ea:	2300      	movs	r3, #0
 80034ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80034ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034f2:	4622      	mov	r2, r4
 80034f4:	462b      	mov	r3, r5
 80034f6:	f04f 0000 	mov.w	r0, #0
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	0159      	lsls	r1, r3, #5
 8003500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003504:	0150      	lsls	r0, r2, #5
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4621      	mov	r1, r4
 800350c:	1a51      	subs	r1, r2, r1
 800350e:	6139      	str	r1, [r7, #16]
 8003510:	4629      	mov	r1, r5
 8003512:	eb63 0301 	sbc.w	r3, r3, r1
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	f04f 0300 	mov.w	r3, #0
 8003520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003524:	4659      	mov	r1, fp
 8003526:	018b      	lsls	r3, r1, #6
 8003528:	4651      	mov	r1, sl
 800352a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800352e:	4651      	mov	r1, sl
 8003530:	018a      	lsls	r2, r1, #6
 8003532:	4651      	mov	r1, sl
 8003534:	ebb2 0801 	subs.w	r8, r2, r1
 8003538:	4659      	mov	r1, fp
 800353a:	eb63 0901 	sbc.w	r9, r3, r1
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800354a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800354e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003552:	4690      	mov	r8, r2
 8003554:	4699      	mov	r9, r3
 8003556:	4623      	mov	r3, r4
 8003558:	eb18 0303 	adds.w	r3, r8, r3
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	462b      	mov	r3, r5
 8003560:	eb49 0303 	adc.w	r3, r9, r3
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003572:	4629      	mov	r1, r5
 8003574:	024b      	lsls	r3, r1, #9
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800357c:	4621      	mov	r1, r4
 800357e:	024a      	lsls	r2, r1, #9
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003586:	2200      	movs	r2, #0
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800358a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800358c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003590:	f7fc fe6e 	bl	8000270 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800359c:	e058      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359e:	4b38      	ldr	r3, [pc, #224]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	099b      	lsrs	r3, r3, #6
 80035a4:	2200      	movs	r2, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	4611      	mov	r1, r2
 80035aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	2300      	movs	r3, #0
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035b8:	4642      	mov	r2, r8
 80035ba:	464b      	mov	r3, r9
 80035bc:	f04f 0000 	mov.w	r0, #0
 80035c0:	f04f 0100 	mov.w	r1, #0
 80035c4:	0159      	lsls	r1, r3, #5
 80035c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ca:	0150      	lsls	r0, r2, #5
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4641      	mov	r1, r8
 80035d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80035d6:	4649      	mov	r1, r9
 80035d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035f0:	ebb2 040a 	subs.w	r4, r2, sl
 80035f4:	eb63 050b 	sbc.w	r5, r3, fp
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	00eb      	lsls	r3, r5, #3
 8003602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003606:	00e2      	lsls	r2, r4, #3
 8003608:	4614      	mov	r4, r2
 800360a:	461d      	mov	r5, r3
 800360c:	4643      	mov	r3, r8
 800360e:	18e3      	adds	r3, r4, r3
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	464b      	mov	r3, r9
 8003614:	eb45 0303 	adc.w	r3, r5, r3
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003626:	4629      	mov	r1, r5
 8003628:	028b      	lsls	r3, r1, #10
 800362a:	4621      	mov	r1, r4
 800362c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003630:	4621      	mov	r1, r4
 8003632:	028a      	lsls	r2, r1, #10
 8003634:	4610      	mov	r0, r2
 8003636:	4619      	mov	r1, r3
 8003638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800363a:	2200      	movs	r2, #0
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	61fa      	str	r2, [r7, #28]
 8003640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003644:	f7fc fe14 	bl	8000270 <__aeabi_uldivmod>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4613      	mov	r3, r2
 800364e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCC_GetSysClockFreq+0x200>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	0c1b      	lsrs	r3, r3, #16
 8003656:	f003 0303 	and.w	r3, r3, #3
 800365a:	3301      	adds	r3, #1
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003660:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800366a:	e002      	b.n	8003672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800366c:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <HAL_RCC_GetSysClockFreq+0x204>)
 800366e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003674:	4618      	mov	r0, r3
 8003676:	3750      	adds	r7, #80	@ 0x50
 8003678:	46bd      	mov	sp, r7
 800367a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800
 8003684:	00f42400 	.word	0x00f42400
 8003688:	007a1200 	.word	0x007a1200

0800368c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d035      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036b4:	4b62      	ldr	r3, [pc, #392]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036ba:	f7fd ff5f 	bl	800157c <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036c2:	f7fd ff5b 	bl	800157c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0b0      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f0      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	019a      	lsls	r2, r3, #6
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	071b      	lsls	r3, r3, #28
 80036ec:	4955      	ldr	r1, [pc, #340]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80036f4:	4b52      	ldr	r3, [pc, #328]	@ (8003840 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80036fa:	f7fd ff3f 	bl	800157c <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003702:	f7fd ff3b 	bl	800157c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e090      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003714:	4b4b      	ldr	r3, [pc, #300]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8083 	beq.w	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	4b44      	ldr	r3, [pc, #272]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	4a43      	ldr	r2, [pc, #268]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373c:	6413      	str	r3, [r2, #64]	@ 0x40
 800373e:	4b41      	ldr	r3, [pc, #260]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800374a:	4b3f      	ldr	r3, [pc, #252]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a3e      	ldr	r2, [pc, #248]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003754:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003756:	f7fd ff11 	bl	800157c <HAL_GetTick>
 800375a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375e:	f7fd ff0d 	bl	800157c <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e062      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003770:	4b35      	ldr	r3, [pc, #212]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800377c:	4b31      	ldr	r3, [pc, #196]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003780:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003784:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	429a      	cmp	r2, r3
 8003798:	d028      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800379a:	4b2a      	ldr	r3, [pc, #168]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a4:	4b29      	ldr	r3, [pc, #164]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037aa:	4b28      	ldr	r3, [pc, #160]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80037b0:	4a24      	ldr	r2, [pc, #144]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037b6:	4b23      	ldr	r3, [pc, #140]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d114      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fd fedb 	bl	800157c <HAL_GetTick>
 80037c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ca:	f7fd fed7 	bl	800157c <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d8:	4293      	cmp	r3, r2
 80037da:	d901      	bls.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e02a      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e0:	4b18      	ldr	r3, [pc, #96]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ee      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037f8:	d10d      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80037fa:	4b12      	ldr	r3, [pc, #72]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800380a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380e:	490d      	ldr	r1, [pc, #52]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]
 8003814:	e005      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003816:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	4a0a      	ldr	r2, [pc, #40]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800381c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003820:	6093      	str	r3, [r2, #8]
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003824:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382e:	4905      	ldr	r1, [pc, #20]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003830:	4313      	orrs	r3, r2
 8003832:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	42470068 	.word	0x42470068
 8003844:	40023800 	.word	0x40023800
 8003848:	40007000 	.word	0x40007000
 800384c:	42470e40 	.word	0x42470e40

08003850 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d13f      	bne.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800386e:	4b24      	ldr	r3, [pc, #144]	@ (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003876:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003884:	d12f      	bne.n	80038e6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003886:	4b1f      	ldr	r3, [pc, #124]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003888:	617b      	str	r3, [r7, #20]
          break;
 800388a:	e02f      	b.n	80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800388c:	4b1c      	ldr	r3, [pc, #112]	@ (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003894:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003898:	d108      	bne.n	80038ac <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800389a:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a2:	4a19      	ldr	r2, [pc, #100]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	e007      	b.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80038ac:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038b4:	4a15      	ldr	r2, [pc, #84]	@ (800390c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80038bc:	4b10      	ldr	r3, [pc, #64]	@ (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80038be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80038d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003900 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80038d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038d6:	0f1b      	lsrs	r3, r3, #28
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e2:	617b      	str	r3, [r7, #20]
          break;
 80038e4:	e002      	b.n	80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
          break;
 80038ea:	bf00      	nop
        }
      }
      break;
 80038ec:	e000      	b.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80038ee:	bf00      	nop
    }
  }
  return frequency;
 80038f0:	697b      	ldr	r3, [r7, #20]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	00bb8000 	.word	0x00bb8000
 8003908:	007a1200 	.word	0x007a1200
 800390c:	00f42400 	.word	0x00f42400

08003910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e041      	b.n	80039a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fc02 	bl	8001140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f000 fd8e 	bl	8004470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e041      	b.n	8003a44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f839 	bl	8003a4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f000 fd3f 	bl	8004470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <HAL_TIM_PWM_Start_DMA+0x2c>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e022      	b.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d109      	bne.n	8003aa6 <HAL_TIM_PWM_Start_DMA+0x46>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e015      	b.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d109      	bne.n	8003ac0 <HAL_TIM_PWM_Start_DMA+0x60>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e008      	b.n	8003ad2 <HAL_TIM_PWM_Start_DMA+0x72>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e171      	b.n	8003dbe <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d109      	bne.n	8003af4 <HAL_TIM_PWM_Start_DMA+0x94>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e022      	b.n	8003b3a <HAL_TIM_PWM_Start_DMA+0xda>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d109      	bne.n	8003b0e <HAL_TIM_PWM_Start_DMA+0xae>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	bf0c      	ite	eq
 8003b06:	2301      	moveq	r3, #1
 8003b08:	2300      	movne	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e015      	b.n	8003b3a <HAL_TIM_PWM_Start_DMA+0xda>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d109      	bne.n	8003b28 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e008      	b.n	8003b3a <HAL_TIM_PWM_Start_DMA+0xda>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d024      	beq.n	8003b88 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_TIM_PWM_Start_DMA+0xea>
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e137      	b.n	8003dbe <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d104      	bne.n	8003b5e <HAL_TIM_PWM_Start_DMA+0xfe>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b5c:	e016      	b.n	8003b8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d104      	bne.n	8003b6e <HAL_TIM_PWM_Start_DMA+0x10e>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b6c:	e00e      	b.n	8003b8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Start_DMA+0x11e>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b7c:	e006      	b.n	8003b8c <HAL_TIM_PWM_Start_DMA+0x12c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b86:	e001      	b.n	8003b8c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e118      	b.n	8003dbe <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b0c      	cmp	r3, #12
 8003b90:	f200 80ae 	bhi.w	8003cf0 <HAL_TIM_PWM_Start_DMA+0x290>
 8003b94:	a201      	add	r2, pc, #4	@ (adr r2, 8003b9c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bd1 	.word	0x08003bd1
 8003ba0:	08003cf1 	.word	0x08003cf1
 8003ba4:	08003cf1 	.word	0x08003cf1
 8003ba8:	08003cf1 	.word	0x08003cf1
 8003bac:	08003c19 	.word	0x08003c19
 8003bb0:	08003cf1 	.word	0x08003cf1
 8003bb4:	08003cf1 	.word	0x08003cf1
 8003bb8:	08003cf1 	.word	0x08003cf1
 8003bbc:	08003c61 	.word	0x08003c61
 8003bc0:	08003cf1 	.word	0x08003cf1
 8003bc4:	08003cf1 	.word	0x08003cf1
 8003bc8:	08003cf1 	.word	0x08003cf1
 8003bcc:	08003ca9 	.word	0x08003ca9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd4:	4a7c      	ldr	r2, [pc, #496]	@ (8003dc8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	4a7b      	ldr	r2, [pc, #492]	@ (8003dcc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be4:	4a7a      	ldr	r2, [pc, #488]	@ (8003dd0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003be6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3334      	adds	r3, #52	@ 0x34
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	f7fd fea8 	bl	800194c <HAL_DMA_Start_IT>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0db      	b.n	8003dbe <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c14:	60da      	str	r2, [r3, #12]
      break;
 8003c16:	e06e      	b.n	8003cf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	4a6a      	ldr	r2, [pc, #424]	@ (8003dc8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	4a69      	ldr	r2, [pc, #420]	@ (8003dcc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003c26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	4a68      	ldr	r2, [pc, #416]	@ (8003dd0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003c2e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3338      	adds	r3, #56	@ 0x38
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	f7fd fe84 	bl	800194c <HAL_DMA_Start_IT>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0b7      	b.n	8003dbe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c5c:	60da      	str	r2, [r3, #12]
      break;
 8003c5e:	e04a      	b.n	8003cf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	4a58      	ldr	r2, [pc, #352]	@ (8003dc8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003c66:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6c:	4a57      	ldr	r2, [pc, #348]	@ (8003dcc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c74:	4a56      	ldr	r2, [pc, #344]	@ (8003dd0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003c76:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	333c      	adds	r3, #60	@ 0x3c
 8003c84:	461a      	mov	r2, r3
 8003c86:	887b      	ldrh	r3, [r7, #2]
 8003c88:	f7fd fe60 	bl	800194c <HAL_DMA_Start_IT>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e093      	b.n	8003dbe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ca4:	60da      	str	r2, [r3, #12]
      break;
 8003ca6:	e026      	b.n	8003cf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cac:	4a46      	ldr	r2, [pc, #280]	@ (8003dc8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8003cae:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	4a45      	ldr	r2, [pc, #276]	@ (8003dcc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8003cb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	4a44      	ldr	r2, [pc, #272]	@ (8003dd0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8003cbe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3340      	adds	r3, #64	@ 0x40
 8003ccc:	461a      	mov	r2, r3
 8003cce:	887b      	ldrh	r3, [r7, #2]
 8003cd0:	f7fd fe3c 	bl	800194c <HAL_DMA_Start_IT>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e06f      	b.n	8003dbe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cec:	60da      	str	r2, [r3, #12]
      break;
 8003cee:	e002      	b.n	8003cf6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d15f      	bne.n	8003dbc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2201      	movs	r2, #1
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fea3 	bl	8004a50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a31      	ldr	r2, [pc, #196]	@ (8003dd4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d004      	beq.n	8003d1e <HAL_TIM_PWM_Start_DMA+0x2be>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d101      	bne.n	8003d22 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d007      	beq.n	8003d38 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a25      	ldr	r2, [pc, #148]	@ (8003dd4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d022      	beq.n	8003d88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4a:	d01d      	beq.n	8003d88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a22      	ldr	r2, [pc, #136]	@ (8003ddc <HAL_TIM_PWM_Start_DMA+0x37c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d018      	beq.n	8003d88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a21      	ldr	r2, [pc, #132]	@ (8003de0 <HAL_TIM_PWM_Start_DMA+0x380>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d013      	beq.n	8003d88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1f      	ldr	r2, [pc, #124]	@ (8003de4 <HAL_TIM_PWM_Start_DMA+0x384>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00e      	beq.n	8003d88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d009      	beq.n	8003d88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1b      	ldr	r2, [pc, #108]	@ (8003de8 <HAL_TIM_PWM_Start_DMA+0x388>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_TIM_PWM_Start_DMA+0x328>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1a      	ldr	r2, [pc, #104]	@ (8003dec <HAL_TIM_PWM_Start_DMA+0x38c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d111      	bne.n	8003dac <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b06      	cmp	r3, #6
 8003d98:	d010      	beq.n	8003dbc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003daa:	e007      	b.n	8003dbc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08004361 	.word	0x08004361
 8003dcc:	08004409 	.word	0x08004409
 8003dd0:	080042cf 	.word	0x080042cf
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40010400 	.word	0x40010400
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40000c00 	.word	0x40000c00
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40001800 	.word	0x40001800

08003df0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b0c      	cmp	r3, #12
 8003e02:	d855      	bhi.n	8003eb0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003e04:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003eb1 	.word	0x08003eb1
 8003e14:	08003eb1 	.word	0x08003eb1
 8003e18:	08003eb1 	.word	0x08003eb1
 8003e1c:	08003e5d 	.word	0x08003e5d
 8003e20:	08003eb1 	.word	0x08003eb1
 8003e24:	08003eb1 	.word	0x08003eb1
 8003e28:	08003eb1 	.word	0x08003eb1
 8003e2c:	08003e79 	.word	0x08003e79
 8003e30:	08003eb1 	.word	0x08003eb1
 8003e34:	08003eb1 	.word	0x08003eb1
 8003e38:	08003eb1 	.word	0x08003eb1
 8003e3c:	08003e95 	.word	0x08003e95
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fd fdd1 	bl	80019fc <HAL_DMA_Abort_IT>
      break;
 8003e5a:	e02c      	b.n	8003eb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fd fdc3 	bl	80019fc <HAL_DMA_Abort_IT>
      break;
 8003e76:	e01e      	b.n	8003eb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd fdb5 	bl	80019fc <HAL_DMA_Abort_IT>
      break;
 8003e92:	e010      	b.n	8003eb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ea2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fd fda7 	bl	80019fc <HAL_DMA_Abort_IT>
      break;
 8003eae:	e002      	b.n	8003eb6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d161      	bne.n	8003f80 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	6839      	ldr	r1, [r7, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fdc3 	bl	8004a50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2f      	ldr	r2, [pc, #188]	@ (8003f8c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIM_PWM_Stop_DMA+0xee>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f90 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d017      	beq.n	8003f18 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10f      	bne.n	8003f18 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6a1a      	ldr	r2, [r3, #32]
 8003efe:	f240 4344 	movw	r3, #1092	@ 0x444
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f16:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10f      	bne.n	8003f48 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d107      	bne.n	8003f48 <HAL_TIM_PWM_Stop_DMA+0x158>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <HAL_TIM_PWM_Stop_DMA+0x168>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f56:	e013      	b.n	8003f80 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d104      	bne.n	8003f68 <HAL_TIM_PWM_Stop_DMA+0x178>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f66:	e00b      	b.n	8003f80 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d104      	bne.n	8003f78 <HAL_TIM_PWM_Stop_DMA+0x188>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f76:	e003      	b.n	8003f80 <HAL_TIM_PWM_Stop_DMA+0x190>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40010000 	.word	0x40010000
 8003f90:	40010400 	.word	0x40010400

08003f94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e0ae      	b.n	8004110 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0c      	cmp	r3, #12
 8003fbe:	f200 809f 	bhi.w	8004100 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	08003ffd 	.word	0x08003ffd
 8003fcc:	08004101 	.word	0x08004101
 8003fd0:	08004101 	.word	0x08004101
 8003fd4:	08004101 	.word	0x08004101
 8003fd8:	0800403d 	.word	0x0800403d
 8003fdc:	08004101 	.word	0x08004101
 8003fe0:	08004101 	.word	0x08004101
 8003fe4:	08004101 	.word	0x08004101
 8003fe8:	0800407f 	.word	0x0800407f
 8003fec:	08004101 	.word	0x08004101
 8003ff0:	08004101 	.word	0x08004101
 8003ff4:	08004101 	.word	0x08004101
 8003ff8:	080040bf 	.word	0x080040bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fada 	bl	80045bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0208 	orr.w	r2, r2, #8
 8004016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0204 	bic.w	r2, r2, #4
 8004026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6999      	ldr	r1, [r3, #24]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	619a      	str	r2, [r3, #24]
      break;
 800403a:	e064      	b.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fb2a 	bl	800469c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6999      	ldr	r1, [r3, #24]
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	021a      	lsls	r2, r3, #8
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	619a      	str	r2, [r3, #24]
      break;
 800407c:	e043      	b.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	4618      	mov	r0, r3
 8004086:	f000 fb7f 	bl	8004788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0208 	orr.w	r2, r2, #8
 8004098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0204 	bic.w	r2, r2, #4
 80040a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69d9      	ldr	r1, [r3, #28]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	61da      	str	r2, [r3, #28]
      break;
 80040bc:	e023      	b.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fbd3 	bl	8004870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69d9      	ldr	r1, [r3, #28]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	021a      	lsls	r2, r3, #8
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	61da      	str	r2, [r3, #28]
      break;
 80040fe:	e002      	b.n	8004106 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	75fb      	strb	r3, [r7, #23]
      break;
 8004104:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_TIM_ConfigClockSource+0x1c>
 8004130:	2302      	movs	r3, #2
 8004132:	e0b4      	b.n	800429e <HAL_TIM_ConfigClockSource+0x186>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800415a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800416c:	d03e      	beq.n	80041ec <HAL_TIM_ConfigClockSource+0xd4>
 800416e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004172:	f200 8087 	bhi.w	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800417a:	f000 8086 	beq.w	800428a <HAL_TIM_ConfigClockSource+0x172>
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004182:	d87f      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 8004184:	2b70      	cmp	r3, #112	@ 0x70
 8004186:	d01a      	beq.n	80041be <HAL_TIM_ConfigClockSource+0xa6>
 8004188:	2b70      	cmp	r3, #112	@ 0x70
 800418a:	d87b      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 800418c:	2b60      	cmp	r3, #96	@ 0x60
 800418e:	d050      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x11a>
 8004190:	2b60      	cmp	r3, #96	@ 0x60
 8004192:	d877      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 8004194:	2b50      	cmp	r3, #80	@ 0x50
 8004196:	d03c      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0xfa>
 8004198:	2b50      	cmp	r3, #80	@ 0x50
 800419a:	d873      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 800419c:	2b40      	cmp	r3, #64	@ 0x40
 800419e:	d058      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x13a>
 80041a0:	2b40      	cmp	r3, #64	@ 0x40
 80041a2:	d86f      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 80041a4:	2b30      	cmp	r3, #48	@ 0x30
 80041a6:	d064      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x15a>
 80041a8:	2b30      	cmp	r3, #48	@ 0x30
 80041aa:	d86b      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d060      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x15a>
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d867      	bhi.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05c      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x15a>
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d05a      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0x15a>
 80041bc:	e062      	b.n	8004284 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041ce:	f000 fc1f 	bl	8004a10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	609a      	str	r2, [r3, #8]
      break;
 80041ea:	e04f      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041fc:	f000 fc08 	bl	8004a10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800420e:	609a      	str	r2, [r3, #8]
      break;
 8004210:	e03c      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800421e:	461a      	mov	r2, r3
 8004220:	f000 fb7c 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2150      	movs	r1, #80	@ 0x50
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fbd5 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8004230:	e02c      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800423e:	461a      	mov	r2, r3
 8004240:	f000 fb9b 	bl	800497a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2160      	movs	r1, #96	@ 0x60
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fbc5 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8004250:	e01c      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800425e:	461a      	mov	r2, r3
 8004260:	f000 fb5c 	bl	800491c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2140      	movs	r1, #64	@ 0x40
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fbb5 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8004270:	e00c      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f000 fbac 	bl	80049da <TIM_ITRx_SetConfig>
      break;
 8004282:	e003      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      break;
 8004288:	e000      	b.n	800428c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800428a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d107      	bne.n	80042f6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f4:	e02a      	b.n	800434c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d107      	bne.n	8004310 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2202      	movs	r2, #2
 8004304:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800430e:	e01d      	b.n	800434c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d107      	bne.n	800432a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2204      	movs	r2, #4
 800431e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004328:	e010      	b.n	800434c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	d107      	bne.n	8004344 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2208      	movs	r2, #8
 8004338:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004342:	e003      	b.n	800434c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7ff ffb4 	bl	80042ba <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
}
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d10b      	bne.n	8004390 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d136      	bne.n	80043f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800438e:	e031      	b.n	80043f4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	429a      	cmp	r2, r3
 8004398:	d10b      	bne.n	80043b2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2202      	movs	r2, #2
 800439e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d125      	bne.n	80043f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043b0:	e020      	b.n	80043f4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d10b      	bne.n	80043d4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2204      	movs	r2, #4
 80043c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d114      	bne.n	80043f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d2:	e00f      	b.n	80043f4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d10a      	bne.n	80043f4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2208      	movs	r2, #8
 80043e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d103      	bne.n	80043f4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7fc f921 	bl	800063c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	771a      	strb	r2, [r3, #28]
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004414:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	429a      	cmp	r2, r3
 800441e:	d103      	bne.n	8004428 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	771a      	strb	r2, [r3, #28]
 8004426:	e019      	b.n	800445c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	d103      	bne.n	800443a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2202      	movs	r2, #2
 8004436:	771a      	strb	r2, [r3, #28]
 8004438:	e010      	b.n	800445c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	d103      	bne.n	800444c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2204      	movs	r2, #4
 8004448:	771a      	strb	r2, [r3, #28]
 800444a:	e007      	b.n	800445c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d102      	bne.n	800445c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2208      	movs	r2, #8
 800445a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff ff22 	bl	80042a6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a43      	ldr	r2, [pc, #268]	@ (8004590 <TIM_Base_SetConfig+0x120>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <TIM_Base_SetConfig+0x40>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800448e:	d00f      	beq.n	80044b0 <TIM_Base_SetConfig+0x40>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a40      	ldr	r2, [pc, #256]	@ (8004594 <TIM_Base_SetConfig+0x124>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00b      	beq.n	80044b0 <TIM_Base_SetConfig+0x40>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a3f      	ldr	r2, [pc, #252]	@ (8004598 <TIM_Base_SetConfig+0x128>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d007      	beq.n	80044b0 <TIM_Base_SetConfig+0x40>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a3e      	ldr	r2, [pc, #248]	@ (800459c <TIM_Base_SetConfig+0x12c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d003      	beq.n	80044b0 <TIM_Base_SetConfig+0x40>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a3d      	ldr	r2, [pc, #244]	@ (80045a0 <TIM_Base_SetConfig+0x130>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d108      	bne.n	80044c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a32      	ldr	r2, [pc, #200]	@ (8004590 <TIM_Base_SetConfig+0x120>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02b      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d0:	d027      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004594 <TIM_Base_SetConfig+0x124>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d023      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004598 <TIM_Base_SetConfig+0x128>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01f      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a2d      	ldr	r2, [pc, #180]	@ (800459c <TIM_Base_SetConfig+0x12c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d01b      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a2c      	ldr	r2, [pc, #176]	@ (80045a0 <TIM_Base_SetConfig+0x130>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d017      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a2b      	ldr	r2, [pc, #172]	@ (80045a4 <TIM_Base_SetConfig+0x134>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2a      	ldr	r2, [pc, #168]	@ (80045a8 <TIM_Base_SetConfig+0x138>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00f      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a29      	ldr	r2, [pc, #164]	@ (80045ac <TIM_Base_SetConfig+0x13c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00b      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a28      	ldr	r2, [pc, #160]	@ (80045b0 <TIM_Base_SetConfig+0x140>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d007      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a27      	ldr	r2, [pc, #156]	@ (80045b4 <TIM_Base_SetConfig+0x144>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d003      	beq.n	8004522 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a26      	ldr	r2, [pc, #152]	@ (80045b8 <TIM_Base_SetConfig+0x148>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d108      	bne.n	8004534 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a0e      	ldr	r2, [pc, #56]	@ (8004590 <TIM_Base_SetConfig+0x120>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0xf2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a10      	ldr	r2, [pc, #64]	@ (80045a0 <TIM_Base_SetConfig+0x130>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d103      	bne.n	800456a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f043 0204 	orr.w	r2, r3, #4
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	601a      	str	r2, [r3, #0]
}
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40010400 	.word	0x40010400
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40014800 	.word	0x40014800
 80045b0:	40001800 	.word	0x40001800
 80045b4:	40001c00 	.word	0x40001c00
 80045b8:	40002000 	.word	0x40002000

080045bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f023 0201 	bic.w	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f023 0302 	bic.w	r3, r3, #2
 8004604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a20      	ldr	r2, [pc, #128]	@ (8004694 <TIM_OC1_SetConfig+0xd8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_OC1_SetConfig+0x64>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a1f      	ldr	r2, [pc, #124]	@ (8004698 <TIM_OC1_SetConfig+0xdc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d10c      	bne.n	800463a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f023 0308 	bic.w	r3, r3, #8
 8004626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a15      	ldr	r2, [pc, #84]	@ (8004694 <TIM_OC1_SetConfig+0xd8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d003      	beq.n	800464a <TIM_OC1_SetConfig+0x8e>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a14      	ldr	r2, [pc, #80]	@ (8004698 <TIM_OC1_SetConfig+0xdc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d111      	bne.n	800466e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	621a      	str	r2, [r3, #32]
}
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	40010000 	.word	0x40010000
 8004698:	40010400 	.word	0x40010400

0800469c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f023 0210 	bic.w	r2, r3, #16
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0320 	bic.w	r3, r3, #32
 80046e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a22      	ldr	r2, [pc, #136]	@ (8004780 <TIM_OC2_SetConfig+0xe4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d003      	beq.n	8004704 <TIM_OC2_SetConfig+0x68>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a21      	ldr	r2, [pc, #132]	@ (8004784 <TIM_OC2_SetConfig+0xe8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d10d      	bne.n	8004720 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800470a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800471e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a17      	ldr	r2, [pc, #92]	@ (8004780 <TIM_OC2_SetConfig+0xe4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_OC2_SetConfig+0x94>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a16      	ldr	r2, [pc, #88]	@ (8004784 <TIM_OC2_SetConfig+0xe8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d113      	bne.n	8004758 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800473e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40010000 	.word	0x40010000
 8004784:	40010400 	.word	0x40010400

08004788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a21      	ldr	r2, [pc, #132]	@ (8004868 <TIM_OC3_SetConfig+0xe0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d003      	beq.n	80047ee <TIM_OC3_SetConfig+0x66>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a20      	ldr	r2, [pc, #128]	@ (800486c <TIM_OC3_SetConfig+0xe4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10d      	bne.n	800480a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a16      	ldr	r2, [pc, #88]	@ (8004868 <TIM_OC3_SetConfig+0xe0>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d003      	beq.n	800481a <TIM_OC3_SetConfig+0x92>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a15      	ldr	r2, [pc, #84]	@ (800486c <TIM_OC3_SetConfig+0xe4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d113      	bne.n	8004842 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	621a      	str	r2, [r3, #32]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	40010000 	.word	0x40010000
 800486c:	40010400 	.word	0x40010400

08004870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800489e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	031b      	lsls	r3, r3, #12
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a12      	ldr	r2, [pc, #72]	@ (8004914 <TIM_OC4_SetConfig+0xa4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_OC4_SetConfig+0x68>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a11      	ldr	r2, [pc, #68]	@ (8004918 <TIM_OC4_SetConfig+0xa8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d109      	bne.n	80048ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	019b      	lsls	r3, r3, #6
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40010000 	.word	0x40010000
 8004918:	40010400 	.word	0x40010400

0800491c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f023 0201 	bic.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 030a 	bic.w	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800497a:	b480      	push	{r7}
 800497c:	b087      	sub	sp, #28
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f023 0210 	bic.w	r2, r3, #16
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	031b      	lsls	r3, r3, #12
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f043 0307 	orr.w	r3, r3, #7
 80049fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	021a      	lsls	r2, r3, #8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2201      	movs	r2, #1
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1a      	ldr	r2, [r3, #32]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	401a      	ands	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1a      	ldr	r2, [r3, #32]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e05a      	b.n	8004b6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a21      	ldr	r2, [pc, #132]	@ (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d022      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b00:	d01d      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1d      	ldr	r2, [pc, #116]	@ (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d018      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1b      	ldr	r2, [pc, #108]	@ (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d013      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00e      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a18      	ldr	r2, [pc, #96]	@ (8004b88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d009      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a17      	ldr	r2, [pc, #92]	@ (8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d004      	beq.n	8004b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a15      	ldr	r2, [pc, #84]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10c      	bne.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40010000 	.word	0x40010000
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40010400 	.word	0x40010400
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40001800 	.word	0x40001800

08004b94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e03d      	b.n	8004c2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8004c3c:	4b10      	ldr	r3, [pc, #64]	@ (8004c80 <MX_PDM2PCM_Init+0x48>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 8004c42:	4b0f      	ldr	r3, [pc, #60]	@ (8004c80 <MX_PDM2PCM_Init+0x48>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8004c48:	4b0d      	ldr	r3, [pc, #52]	@ (8004c80 <MX_PDM2PCM_Init+0x48>)
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c84 <MX_PDM2PCM_Init+0x4c>)
 8004c4c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c80 <MX_PDM2PCM_Init+0x48>)
 8004c50:	2201      	movs	r2, #1
 8004c52:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8004c54:	4b0a      	ldr	r3, [pc, #40]	@ (8004c80 <MX_PDM2PCM_Init+0x48>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8004c5a:	4809      	ldr	r0, [pc, #36]	@ (8004c80 <MX_PDM2PCM_Init+0x48>)
 8004c5c:	f001 fd38 	bl	80066d0 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <MX_PDM2PCM_Init+0x50>)
 8004c62:	2202      	movs	r2, #2
 8004c64:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8004c66:	4b08      	ldr	r3, [pc, #32]	@ (8004c88 <MX_PDM2PCM_Init+0x50>)
 8004c68:	2210      	movs	r2, #16
 8004c6a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 0;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <MX_PDM2PCM_Init+0x50>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8004c72:	4905      	ldr	r1, [pc, #20]	@ (8004c88 <MX_PDM2PCM_Init+0x50>)
 8004c74:	4802      	ldr	r0, [pc, #8]	@ (8004c80 <MX_PDM2PCM_Init+0x48>)
 8004c76:	f001 fdfb 	bl	8006870 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000914 	.word	0x20000914
 8004c84:	7d70a3d6 	.word	0x7d70a3d6
 8004c88:	20000960 	.word	0x20000960

08004c8c <MX_PDM2PCM_Process>:

/* USER CODE BEGIN 4 */

/*  process function */
uint8_t MX_PDM2PCM_Process(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
    PCMBuf : Pointer to PCM buffer data
  Return values:
    AUDIO_OK in case of success, AUDIO_ERROR otherwise
  */
  /* this example return the default status AUDIO_ERROR */
	PDM_Filter((uint8_t *)PDMBuf, PCMBuf, &PDM1_filter_handler);
 8004c96:	4a05      	ldr	r2, [pc, #20]	@ (8004cac <MX_PDM2PCM_Process+0x20>)
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f001 feee 	bl	8006a7c <PDM_Filter>
	return 0; // AUDIO_OK
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000914 	.word	0x20000914

08004cb0 <D16_GENERIC>:
 8004cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb4:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 8004cb8:	b089      	sub	sp, #36	@ 0x24
 8004cba:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004cbc:	6993      	ldr	r3, [r2, #24]
 8004cbe:	9406      	str	r4, [sp, #24]
 8004cc0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8004cc2:	9307      	str	r3, [sp, #28]
 8004cc4:	9402      	str	r4, [sp, #8]
 8004cc6:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 8004cca:	69d3      	ldr	r3, [r2, #28]
 8004ccc:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8004cce:	9103      	str	r1, [sp, #12]
 8004cd0:	2d00      	cmp	r5, #0
 8004cd2:	d066      	beq.n	8004da2 <D16_GENERIC+0xf2>
 8004cd4:	f004 0520 	and.w	r5, r4, #32
 8004cd8:	f004 0410 	and.w	r4, r4, #16
 8004cdc:	9505      	str	r5, [sp, #20]
 8004cde:	4937      	ldr	r1, [pc, #220]	@ (8004dbc <D16_GENERIC+0x10c>)
 8004ce0:	9404      	str	r4, [sp, #16]
 8004ce2:	f04f 0c00 	mov.w	ip, #0
 8004ce6:	4635      	mov	r5, r6
 8004ce8:	e04f      	b.n	8004d8a <D16_GENERIC+0xda>
 8004cea:	5d87      	ldrb	r7, [r0, r6]
 8004cec:	7804      	ldrb	r4, [r0, #0]
 8004cee:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004cf2:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8004cf6:	b2e6      	uxtb	r6, r4
 8004cf8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8004cfc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004d00:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004d04:	4433      	add	r3, r6
 8004d06:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8004d0a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8004d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d12:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8004d16:	0aa3      	lsrs	r3, r4, #10
 8004d18:	4c29      	ldr	r4, [pc, #164]	@ (8004dc0 <D16_GENERIC+0x110>)
 8004d1a:	fb26 5404 	smlad	r4, r6, r4, r5
 8004d1e:	4d29      	ldr	r5, [pc, #164]	@ (8004dc4 <D16_GENERIC+0x114>)
 8004d20:	fb26 f505 	smuad	r5, r6, r5
 8004d24:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8004d28:	eb04 080a 	add.w	r8, r4, sl
 8004d2c:	eba8 080b 	sub.w	r8, r8, fp
 8004d30:	4646      	mov	r6, r8
 8004d32:	17f7      	asrs	r7, r6, #31
 8004d34:	e9cd 6700 	strd	r6, r7, [sp]
 8004d38:	9e04      	ldr	r6, [sp, #16]
 8004d3a:	f10c 0e01 	add.w	lr, ip, #1
 8004d3e:	b16e      	cbz	r6, 8004d5c <D16_GENERIC+0xac>
 8004d40:	6a16      	ldr	r6, [r2, #32]
 8004d42:	9f01      	ldr	r7, [sp, #4]
 8004d44:	fba8 ab06 	umull	sl, fp, r8, r6
 8004d48:	fb06 bb07 	mla	fp, r6, r7, fp
 8004d4c:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 8004d50:	f14b 0900 	adc.w	r9, fp, #0
 8004d54:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8004d58:	46a3      	mov	fp, r4
 8004d5a:	4654      	mov	r4, sl
 8004d5c:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8004d5e:	9f02      	ldr	r7, [sp, #8]
 8004d60:	0424      	lsls	r4, r4, #16
 8004d62:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8004d66:	f04f 0900 	mov.w	r9, #0
 8004d6a:	fb0c fc06 	mul.w	ip, ip, r6
 8004d6e:	fbc7 8904 	smlal	r8, r9, r7, r4
 8004d72:	9e03      	ldr	r6, [sp, #12]
 8004d74:	464f      	mov	r7, r9
 8004d76:	10bc      	asrs	r4, r7, #2
 8004d78:	f304 040f 	ssat	r4, #16, r4
 8004d7c:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 8004d80:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8004d82:	fa1f fc8e 	uxth.w	ip, lr
 8004d86:	4564      	cmp	r4, ip
 8004d88:	d90a      	bls.n	8004da0 <D16_GENERIC+0xf0>
 8004d8a:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8004d8c:	2c01      	cmp	r4, #1
 8004d8e:	b2e6      	uxtb	r6, r4
 8004d90:	d1ab      	bne.n	8004cea <D16_GENERIC+0x3a>
 8004d92:	9e05      	ldr	r6, [sp, #20]
 8004d94:	f850 4b02 	ldr.w	r4, [r0], #2
 8004d98:	2e00      	cmp	r6, #0
 8004d9a:	d0ac      	beq.n	8004cf6 <D16_GENERIC+0x46>
 8004d9c:	ba64      	rev16	r4, r4
 8004d9e:	e7aa      	b.n	8004cf6 <D16_GENERIC+0x46>
 8004da0:	462e      	mov	r6, r5
 8004da2:	9906      	ldr	r1, [sp, #24]
 8004da4:	61d3      	str	r3, [r2, #28]
 8004da6:	9b07      	ldr	r3, [sp, #28]
 8004da8:	6096      	str	r6, [r2, #8]
 8004daa:	2000      	movs	r0, #0
 8004dac:	60d1      	str	r1, [r2, #12]
 8004dae:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 8004db2:	6193      	str	r3, [r2, #24]
 8004db4:	b009      	add	sp, #36	@ 0x24
 8004db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dba:	bf00      	nop
 8004dbc:	2000000c 	.word	0x2000000c
 8004dc0:	00030001 	.word	0x00030001
 8004dc4:	00010003 	.word	0x00010003

08004dc8 <D24_GENERIC>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8004dce:	6993      	ldr	r3, [r2, #24]
 8004dd0:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8004dd2:	b089      	sub	sp, #36	@ 0x24
 8004dd4:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8004dd8:	9307      	str	r3, [sp, #28]
 8004dda:	9503      	str	r5, [sp, #12]
 8004ddc:	69d3      	ldr	r3, [r2, #28]
 8004dde:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8004de0:	9104      	str	r1, [sp, #16]
 8004de2:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 8004de6:	2e00      	cmp	r6, #0
 8004de8:	f000 808f 	beq.w	8004f0a <D24_GENERIC+0x142>
 8004dec:	f005 0620 	and.w	r6, r5, #32
 8004df0:	f005 0510 	and.w	r5, r5, #16
 8004df4:	4953      	ldr	r1, [pc, #332]	@ (8004f44 <D24_GENERIC+0x17c>)
 8004df6:	9606      	str	r6, [sp, #24]
 8004df8:	9505      	str	r5, [sp, #20]
 8004dfa:	f04f 0c00 	mov.w	ip, #0
 8004dfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8004e02:	e068      	b.n	8004ed6 <D24_GENERIC+0x10e>
 8004e04:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8004e08:	f810 8007 	ldrb.w	r8, [r0, r7]
 8004e0c:	042d      	lsls	r5, r5, #16
 8004e0e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8004e12:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8004e16:	44ae      	add	lr, r5
 8004e18:	4438      	add	r0, r7
 8004e1a:	fa5f f68e 	uxtb.w	r6, lr
 8004e1e:	f3ce 2507 	ubfx	r5, lr, #8, #8
 8004e22:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8004e26:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8004e2a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8004e2e:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8004e32:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004e36:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 8004e3a:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8004e3e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004e42:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8004e46:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8004e4a:	4d3f      	ldr	r5, [pc, #252]	@ (8004f48 <D24_GENERIC+0x180>)
 8004e4c:	fb26 b705 	smlad	r7, r6, r5, fp
 8004e50:	4d3e      	ldr	r5, [pc, #248]	@ (8004f4c <D24_GENERIC+0x184>)
 8004e52:	fb26 4b05 	smlad	fp, r6, r5, r4
 8004e56:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8004e5a:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8004e5e:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8004e62:	2401      	movs	r4, #1
 8004e64:	fb26 f604 	smuad	r6, r6, r4
 8004e68:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8004e6c:	9f02      	ldr	r7, [sp, #8]
 8004e6e:	eb0c 0e04 	add.w	lr, ip, r4
 8004e72:	eb08 0406 	add.w	r4, r8, r6
 8004e76:	eb05 060a 	add.w	r6, r5, sl
 8004e7a:	1bf6      	subs	r6, r6, r7
 8004e7c:	4637      	mov	r7, r6
 8004e7e:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8004e82:	e9cd 7800 	strd	r7, r8, [sp]
 8004e86:	9f05      	ldr	r7, [sp, #20]
 8004e88:	b177      	cbz	r7, 8004ea8 <D24_GENERIC+0xe0>
 8004e8a:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8004e8e:	9502      	str	r5, [sp, #8]
 8004e90:	fba6 9a08 	umull	r9, sl, r6, r8
 8004e94:	9e01      	ldr	r6, [sp, #4]
 8004e96:	fb08 aa06 	mla	sl, r8, r6, sl
 8004e9a:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8004e9e:	f14a 0700 	adc.w	r7, sl, #0
 8004ea2:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8004ea6:	4655      	mov	r5, sl
 8004ea8:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8004eaa:	9f03      	ldr	r7, [sp, #12]
 8004eac:	03ad      	lsls	r5, r5, #14
 8004eae:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8004eb2:	f04f 0900 	mov.w	r9, #0
 8004eb6:	fb0c fc06 	mul.w	ip, ip, r6
 8004eba:	fbc7 8905 	smlal	r8, r9, r7, r5
 8004ebe:	9e04      	ldr	r6, [sp, #16]
 8004ec0:	464f      	mov	r7, r9
 8004ec2:	10bd      	asrs	r5, r7, #2
 8004ec4:	f305 050f 	ssat	r5, #16, r5
 8004ec8:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 8004ecc:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004ece:	fa1f fc8e 	uxth.w	ip, lr
 8004ed2:	4565      	cmp	r5, ip
 8004ed4:	d917      	bls.n	8004f06 <D24_GENERIC+0x13e>
 8004ed6:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8004ed8:	f890 e000 	ldrb.w	lr, [r0]
 8004edc:	b2ef      	uxtb	r7, r5
 8004ede:	2d01      	cmp	r5, #1
 8004ee0:	b23e      	sxth	r6, r7
 8004ee2:	d18f      	bne.n	8004e04 <D24_GENERIC+0x3c>
 8004ee4:	9d06      	ldr	r5, [sp, #24]
 8004ee6:	b1dd      	cbz	r5, 8004f20 <D24_GENERIC+0x158>
 8004ee8:	78c5      	ldrb	r5, [r0, #3]
 8004eea:	ea4f 280e 	mov.w	r8, lr, lsl #8
 8004eee:	f01c 0f01 	tst.w	ip, #1
 8004ef2:	ea4f 2605 	mov.w	r6, r5, lsl #8
 8004ef6:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8004efa:	d11b      	bne.n	8004f34 <D24_GENERIC+0x16c>
 8004efc:	f890 e001 	ldrb.w	lr, [r0, #1]
 8004f00:	3002      	adds	r0, #2
 8004f02:	44c6      	add	lr, r8
 8004f04:	e789      	b.n	8004e1a <D24_GENERIC+0x52>
 8004f06:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004f0a:	61d3      	str	r3, [r2, #28]
 8004f0c:	9b07      	ldr	r3, [sp, #28]
 8004f0e:	6193      	str	r3, [r2, #24]
 8004f10:	2000      	movs	r0, #0
 8004f12:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 8004f16:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8004f1a:	b009      	add	sp, #36	@ 0x24
 8004f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f20:	f890 8001 	ldrb.w	r8, [r0, #1]
 8004f24:	7885      	ldrb	r5, [r0, #2]
 8004f26:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8004f2a:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8004f2e:	44c6      	add	lr, r8
 8004f30:	3003      	adds	r0, #3
 8004f32:	e772      	b.n	8004e1a <D24_GENERIC+0x52>
 8004f34:	f890 8002 	ldrb.w	r8, [r0, #2]
 8004f38:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 8004f3c:	44c6      	add	lr, r8
 8004f3e:	3004      	adds	r0, #4
 8004f40:	e76b      	b.n	8004e1a <D24_GENERIC+0x52>
 8004f42:	bf00      	nop
 8004f44:	2000000c 	.word	0x2000000c
 8004f48:	00030001 	.word	0x00030001
 8004f4c:	00060007 	.word	0x00060007

08004f50 <D32_GENERIC>:
 8004f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8004f56:	6993      	ldr	r3, [r2, #24]
 8004f58:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8004f5a:	69d6      	ldr	r6, [r2, #28]
 8004f5c:	b089      	sub	sp, #36	@ 0x24
 8004f5e:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8004f62:	9307      	str	r3, [sp, #28]
 8004f64:	9403      	str	r4, [sp, #12]
 8004f66:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 8004f6a:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8004f6c:	9104      	str	r1, [sp, #16]
 8004f6e:	2d00      	cmp	r5, #0
 8004f70:	f000 809a 	beq.w	80050a8 <D32_GENERIC+0x158>
 8004f74:	f004 0520 	and.w	r5, r4, #32
 8004f78:	f004 0410 	and.w	r4, r4, #16
 8004f7c:	9506      	str	r5, [sp, #24]
 8004f7e:	4951      	ldr	r1, [pc, #324]	@ (80050c4 <D32_GENERIC+0x174>)
 8004f80:	9405      	str	r4, [sp, #20]
 8004f82:	f04f 0e00 	mov.w	lr, #0
 8004f86:	f8cd 9008 	str.w	r9, [sp, #8]
 8004f8a:	461d      	mov	r5, r3
 8004f8c:	4617      	mov	r7, r2
 8004f8e:	e077      	b.n	8005080 <D32_GENERIC+0x130>
 8004f90:	7823      	ldrb	r3, [r4, #0]
 8004f92:	f810 800c 	ldrb.w	r8, [r0, ip]
 8004f96:	f810 c002 	ldrb.w	ip, [r0, r2]
 8004f9a:	7800      	ldrb	r0, [r0, #0]
 8004f9c:	041b      	lsls	r3, r3, #16
 8004f9e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8004fa2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8004fa6:	4403      	add	r3, r0
 8004fa8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8004fac:	b2dc      	uxtb	r4, r3
 8004fae:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004fb2:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8004fb6:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8004fba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004fbe:	0e1b      	lsrs	r3, r3, #24
 8004fc0:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8004fc4:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8004fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fcc:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8004fd0:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 8004fd4:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 8004fd8:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8004fdc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004fe0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004fe4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004fe8:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8004fec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004ff0:	4b35      	ldr	r3, [pc, #212]	@ (80050c8 <D32_GENERIC+0x178>)
 8004ff2:	fb22 b403 	smlad	r4, r2, r3, fp
 8004ff6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ffa:	fb2c 4803 	smlad	r8, ip, r3, r4
 8004ffe:	4b33      	ldr	r3, [pc, #204]	@ (80050cc <D32_GENERIC+0x17c>)
 8005000:	fb22 5503 	smlad	r5, r2, r3, r5
 8005004:	4b32      	ldr	r3, [pc, #200]	@ (80050d0 <D32_GENERIC+0x180>)
 8005006:	fb2c 5b03 	smlad	fp, ip, r3, r5
 800500a:	2301      	movs	r3, #1
 800500c:	fb22 f203 	smuad	r2, r2, r3
 8005010:	4b30      	ldr	r3, [pc, #192]	@ (80050d4 <D32_GENERIC+0x184>)
 8005012:	fb2c 2503 	smlad	r5, ip, r3, r2
 8005016:	9b02      	ldr	r3, [sp, #8]
 8005018:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 800501c:	eb04 080a 	add.w	r8, r4, sl
 8005020:	eba8 0803 	sub.w	r8, r8, r3
 8005024:	4642      	mov	r2, r8
 8005026:	17d3      	asrs	r3, r2, #31
 8005028:	e9cd 2300 	strd	r2, r3, [sp]
 800502c:	9b05      	ldr	r3, [sp, #20]
 800502e:	f10e 0c01 	add.w	ip, lr, #1
 8005032:	b173      	cbz	r3, 8005052 <D32_GENERIC+0x102>
 8005034:	6a3a      	ldr	r2, [r7, #32]
 8005036:	9b01      	ldr	r3, [sp, #4]
 8005038:	9402      	str	r4, [sp, #8]
 800503a:	fba8 8902 	umull	r8, r9, r8, r2
 800503e:	469a      	mov	sl, r3
 8005040:	fb02 930a 	mla	r3, r2, sl, r9
 8005044:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8005048:	f143 0900 	adc.w	r9, r3, #0
 800504c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8005050:	4654      	mov	r4, sl
 8005052:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005054:	9a04      	ldr	r2, [sp, #16]
 8005056:	fb0e fe03 	mul.w	lr, lr, r3
 800505a:	9b03      	ldr	r3, [sp, #12]
 800505c:	0364      	lsls	r4, r4, #13
 800505e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8005062:	f04f 0900 	mov.w	r9, #0
 8005066:	fbc3 8904 	smlal	r8, r9, r3, r4
 800506a:	464b      	mov	r3, r9
 800506c:	109b      	asrs	r3, r3, #2
 800506e:	f303 030f 	ssat	r3, #16, r3
 8005072:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 8005076:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005078:	fa1f fe8c 	uxth.w	lr, ip
 800507c:	4573      	cmp	r3, lr
 800507e:	d90f      	bls.n	80050a0 <D32_GENERIC+0x150>
 8005080:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005082:	b2da      	uxtb	r2, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 800508a:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 800508e:	f47f af7f 	bne.w	8004f90 <D32_GENERIC+0x40>
 8005092:	1d02      	adds	r2, r0, #4
 8005094:	6803      	ldr	r3, [r0, #0]
 8005096:	9806      	ldr	r0, [sp, #24]
 8005098:	b188      	cbz	r0, 80050be <D32_GENERIC+0x16e>
 800509a:	ba5b      	rev16	r3, r3
 800509c:	4610      	mov	r0, r2
 800509e:	e785      	b.n	8004fac <D32_GENERIC+0x5c>
 80050a0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80050a4:	462b      	mov	r3, r5
 80050a6:	463a      	mov	r2, r7
 80050a8:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 80050ac:	9b07      	ldr	r3, [sp, #28]
 80050ae:	61d6      	str	r6, [r2, #28]
 80050b0:	2000      	movs	r0, #0
 80050b2:	e9c2 a904 	strd	sl, r9, [r2, #16]
 80050b6:	6193      	str	r3, [r2, #24]
 80050b8:	b009      	add	sp, #36	@ 0x24
 80050ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050be:	4610      	mov	r0, r2
 80050c0:	e774      	b.n	8004fac <D32_GENERIC+0x5c>
 80050c2:	bf00      	nop
 80050c4:	2000000c 	.word	0x2000000c
 80050c8:	00060003 	.word	0x00060003
 80050cc:	000a000c 	.word	0x000a000c
 80050d0:	000c000a 	.word	0x000c000a
 80050d4:	00030006 	.word	0x00030006

080050d8 <D48_GENERIC>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 80050e0:	b08b      	sub	sp, #44	@ 0x2c
 80050e2:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80050e4:	9304      	str	r3, [sp, #16]
 80050e6:	6993      	ldr	r3, [r2, #24]
 80050e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80050ea:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 80050ee:	9401      	str	r4, [sp, #4]
 80050f0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80050f2:	9405      	str	r4, [sp, #20]
 80050f4:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80050f8:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80050fa:	9106      	str	r1, [sp, #24]
 80050fc:	2d00      	cmp	r5, #0
 80050fe:	f000 80c2 	beq.w	8005286 <D48_GENERIC+0x1ae>
 8005102:	f004 0520 	and.w	r5, r4, #32
 8005106:	f04f 0900 	mov.w	r9, #0
 800510a:	f004 0410 	and.w	r4, r4, #16
 800510e:	9508      	str	r5, [sp, #32]
 8005110:	4964      	ldr	r1, [pc, #400]	@ (80052a4 <D48_GENERIC+0x1cc>)
 8005112:	9407      	str	r4, [sp, #28]
 8005114:	464d      	mov	r5, r9
 8005116:	e09e      	b.n	8005256 <D48_GENERIC+0x17e>
 8005118:	f81b 4007 	ldrb.w	r4, [fp, r7]
 800511c:	f810 b008 	ldrb.w	fp, [r0, r8]
 8005120:	f819 8008 	ldrb.w	r8, [r9, r8]
 8005124:	f810 9006 	ldrb.w	r9, [r0, r6]
 8005128:	7800      	ldrb	r0, [r0, #0]
 800512a:	0424      	lsls	r4, r4, #16
 800512c:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8005130:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8005134:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8005138:	44be      	add	lr, r7
 800513a:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 800513e:	eb0b 0700 	add.w	r7, fp, r0
 8005142:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 8005146:	fa5f fe87 	uxtb.w	lr, r7
 800514a:	f3c7 2607 	ubfx	r6, r7, #8, #8
 800514e:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8005152:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005156:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800515a:	0e3f      	lsrs	r7, r7, #24
 800515c:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 8005160:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 8005164:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8005168:	b2e7      	uxtb	r7, r4
 800516a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800516e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8005172:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8005176:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 800517a:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 800517e:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 8005182:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8005186:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 800518a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800518e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005192:	f3cc 0809 	ubfx	r8, ip, #0, #10
 8005196:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800519a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800519e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80051a2:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80051a6:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80051aa:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80051ae:	4c3e      	ldr	r4, [pc, #248]	@ (80052a8 <D48_GENERIC+0x1d0>)
 80051b0:	9e01      	ldr	r6, [sp, #4]
 80051b2:	fb29 6404 	smlad	r4, r9, r4, r6
 80051b6:	4e3d      	ldr	r6, [pc, #244]	@ (80052ac <D48_GENERIC+0x1d4>)
 80051b8:	fb2e 4406 	smlad	r4, lr, r6, r4
 80051bc:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 80051c0:	fb27 4b06 	smlad	fp, r7, r6, r4
 80051c4:	4c3a      	ldr	r4, [pc, #232]	@ (80052b0 <D48_GENERIC+0x1d8>)
 80051c6:	fb29 3304 	smlad	r3, r9, r4, r3
 80051ca:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 80051ce:	fb2e 3304 	smlad	r3, lr, r4, r3
 80051d2:	4c38      	ldr	r4, [pc, #224]	@ (80052b4 <D48_GENERIC+0x1dc>)
 80051d4:	fb27 3304 	smlad	r3, r7, r4, r3
 80051d8:	2601      	movs	r6, #1
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	fb29 f906 	smuad	r9, r9, r6
 80051e0:	4b35      	ldr	r3, [pc, #212]	@ (80052b8 <D48_GENERIC+0x1e0>)
 80051e2:	fb2e 9e03 	smlad	lr, lr, r3, r9
 80051e6:	4b35      	ldr	r3, [pc, #212]	@ (80052bc <D48_GENERIC+0x1e4>)
 80051e8:	fb27 e303 	smlad	r3, r7, r3, lr
 80051ec:	9f04      	ldr	r7, [sp, #16]
 80051ee:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 80051f2:	eb05 0e06 	add.w	lr, r5, r6
 80051f6:	eb04 060a 	add.w	r6, r4, sl
 80051fa:	1bf6      	subs	r6, r6, r7
 80051fc:	4637      	mov	r7, r6
 80051fe:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8005202:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8005206:	9f07      	ldr	r7, [sp, #28]
 8005208:	b177      	cbz	r7, 8005228 <D48_GENERIC+0x150>
 800520a:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800520e:	9404      	str	r4, [sp, #16]
 8005210:	fba6 9a08 	umull	r9, sl, r6, r8
 8005214:	9e03      	ldr	r6, [sp, #12]
 8005216:	fb08 aa06 	mla	sl, r8, r6, sl
 800521a:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 800521e:	f14a 0700 	adc.w	r7, sl, #0
 8005222:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8005226:	4654      	mov	r4, sl
 8005228:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 800522a:	fb05 f606 	mul.w	r6, r5, r6
 800522e:	9d05      	ldr	r5, [sp, #20]
 8005230:	02e4      	lsls	r4, r4, #11
 8005232:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8005236:	f04f 0800 	mov.w	r8, #0
 800523a:	fbc5 7804 	smlal	r7, r8, r5, r4
 800523e:	4645      	mov	r5, r8
 8005240:	10ac      	asrs	r4, r5, #2
 8005242:	9d06      	ldr	r5, [sp, #24]
 8005244:	f304 040f 	ssat	r4, #16, r4
 8005248:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 800524c:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 800524e:	fa1f f58e 	uxth.w	r5, lr
 8005252:	42ac      	cmp	r4, r5
 8005254:	d917      	bls.n	8005286 <D48_GENERIC+0x1ae>
 8005256:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8005258:	b2e6      	uxtb	r6, r4
 800525a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800525e:	4277      	negs	r7, r6
 8005260:	eb00 0b08 	add.w	fp, r0, r8
 8005264:	eb0b 0907 	add.w	r9, fp, r7
 8005268:	2c01      	cmp	r4, #1
 800526a:	eb09 0e08 	add.w	lr, r9, r8
 800526e:	f47f af53 	bne.w	8005118 <D48_GENERIC+0x40>
 8005272:	9e08      	ldr	r6, [sp, #32]
 8005274:	e9d0 7400 	ldrd	r7, r4, [r0]
 8005278:	3006      	adds	r0, #6
 800527a:	2e00      	cmp	r6, #0
 800527c:	f43f af63 	beq.w	8005146 <D48_GENERIC+0x6e>
 8005280:	ba7f      	rev16	r7, r7
 8005282:	ba64      	rev16	r4, r4
 8005284:	e75f      	b.n	8005146 <D48_GENERIC+0x6e>
 8005286:	6093      	str	r3, [r2, #8]
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	60d3      	str	r3, [r2, #12]
 800528c:	9b04      	ldr	r3, [sp, #16]
 800528e:	6153      	str	r3, [r2, #20]
 8005290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005292:	f8c2 c01c 	str.w	ip, [r2, #28]
 8005296:	2000      	movs	r0, #0
 8005298:	f8c2 a010 	str.w	sl, [r2, #16]
 800529c:	6193      	str	r3, [r2, #24]
 800529e:	b00b      	add	sp, #44	@ 0x2c
 80052a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a4:	2000000c 	.word	0x2000000c
 80052a8:	000f000a 	.word	0x000f000a
 80052ac:	00060003 	.word	0x00060003
 80052b0:	00150019 	.word	0x00150019
 80052b4:	00190015 	.word	0x00190015
 80052b8:	00030006 	.word	0x00030006
 80052bc:	000a000f 	.word	0x000a000f

080052c0 <D64_GENERIC>:
 80052c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c4:	b089      	sub	sp, #36	@ 0x24
 80052c6:	6895      	ldr	r5, [r2, #8]
 80052c8:	6913      	ldr	r3, [r2, #16]
 80052ca:	9501      	str	r5, [sp, #4]
 80052cc:	68d5      	ldr	r5, [r2, #12]
 80052ce:	9302      	str	r3, [sp, #8]
 80052d0:	9500      	str	r5, [sp, #0]
 80052d2:	6953      	ldr	r3, [r2, #20]
 80052d4:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80052d6:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80052d8:	9303      	str	r3, [sp, #12]
 80052da:	6993      	ldr	r3, [r2, #24]
 80052dc:	9307      	str	r3, [sp, #28]
 80052de:	e9cd 5104 	strd	r5, r1, [sp, #16]
 80052e2:	69d3      	ldr	r3, [r2, #28]
 80052e4:	2c00      	cmp	r4, #0
 80052e6:	f000 80d7 	beq.w	8005498 <D64_GENERIC+0x1d8>
 80052ea:	6a11      	ldr	r1, [r2, #32]
 80052ec:	9106      	str	r1, [sp, #24]
 80052ee:	f04f 0e00 	mov.w	lr, #0
 80052f2:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 80054d8 <D64_GENERIC+0x218>
 80052f6:	4681      	mov	r9, r0
 80052f8:	e0bf      	b.n	800547a <D64_GENERIC+0x1ba>
 80052fa:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80052fe:	426c      	negs	r4, r5
 8005300:	eb09 0708 	add.w	r7, r9, r8
 8005304:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8005308:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 800530c:	5d38      	ldrb	r0, [r7, r4]
 800530e:	5d31      	ldrb	r1, [r6, r4]
 8005310:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8005314:	f819 a008 	ldrb.w	sl, [r9, r8]
 8005318:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800531c:	f899 7000 	ldrb.w	r7, [r9]
 8005320:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 8005324:	4426      	add	r6, r4
 8005326:	0409      	lsls	r1, r1, #16
 8005328:	0400      	lsls	r0, r0, #16
 800532a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800532e:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8005332:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 8005336:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800533a:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 800533e:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8005342:	4459      	add	r1, fp
 8005344:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8005348:	4438      	add	r0, r7
 800534a:	b2c5      	uxtb	r5, r0
 800534c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8005350:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8005354:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8005358:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800535c:	0e00      	lsrs	r0, r0, #24
 800535e:	eb03 0806 	add.w	r8, r3, r6
 8005362:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8005366:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 800536a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800536e:	b2c8      	uxtb	r0, r1
 8005370:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8005374:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005378:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 800537c:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8005380:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005384:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005388:	0e09      	lsrs	r1, r1, #24
 800538a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800538e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8005392:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8005396:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800539a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800539e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80053a2:	f3ca 0309 	ubfx	r3, sl, #0, #10
 80053a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80053aa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80053ae:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80053b2:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 80053b6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80053ba:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80053be:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80053c2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80053c6:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80053ca:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80053ce:	0a8b      	lsrs	r3, r1, #10
 80053d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80053d4:	4938      	ldr	r1, [pc, #224]	@ (80054b8 <D64_GENERIC+0x1f8>)
 80053d6:	9c00      	ldr	r4, [sp, #0]
 80053d8:	fb28 4101 	smlad	r1, r8, r1, r4
 80053dc:	4c37      	ldr	r4, [pc, #220]	@ (80054bc <D64_GENERIC+0x1fc>)
 80053de:	fb27 1104 	smlad	r1, r7, r4, r1
 80053e2:	4c37      	ldr	r4, [pc, #220]	@ (80054c0 <D64_GENERIC+0x200>)
 80053e4:	fb20 1104 	smlad	r1, r0, r4, r1
 80053e8:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 80053ec:	fb2a 1106 	smlad	r1, sl, r6, r1
 80053f0:	4d34      	ldr	r5, [pc, #208]	@ (80054c4 <D64_GENERIC+0x204>)
 80053f2:	9c01      	ldr	r4, [sp, #4]
 80053f4:	fb28 4405 	smlad	r4, r8, r5, r4
 80053f8:	fb2a 4415 	smladx	r4, sl, r5, r4
 80053fc:	4d32      	ldr	r5, [pc, #200]	@ (80054c8 <D64_GENERIC+0x208>)
 80053fe:	fb27 4405 	smlad	r4, r7, r5, r4
 8005402:	fb20 4415 	smladx	r4, r0, r5, r4
 8005406:	2501      	movs	r5, #1
 8005408:	9400      	str	r4, [sp, #0]
 800540a:	fb28 f805 	smuad	r8, r8, r5
 800540e:	4c2f      	ldr	r4, [pc, #188]	@ (80054cc <D64_GENERIC+0x20c>)
 8005410:	fb27 8704 	smlad	r7, r7, r4, r8
 8005414:	4c2e      	ldr	r4, [pc, #184]	@ (80054d0 <D64_GENERIC+0x210>)
 8005416:	fb20 7004 	smlad	r0, r0, r4, r7
 800541a:	4c2e      	ldr	r4, [pc, #184]	@ (80054d4 <D64_GENERIC+0x214>)
 800541c:	fb2a 0004 	smlad	r0, sl, r4, r0
 8005420:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 8005424:	9906      	ldr	r1, [sp, #24]
 8005426:	9001      	str	r0, [sp, #4]
 8005428:	b181      	cbz	r1, 800544c <D64_GENERIC+0x18c>
 800542a:	9802      	ldr	r0, [sp, #8]
 800542c:	9c03      	ldr	r4, [sp, #12]
 800542e:	4430      	add	r0, r6
 8005430:	1b00      	subs	r0, r0, r4
 8005432:	fba0 7801 	umull	r7, r8, r0, r1
 8005436:	17c5      	asrs	r5, r0, #31
 8005438:	fb01 8805 	mla	r8, r1, r5, r8
 800543c:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 8005440:	f148 0100 	adc.w	r1, r8, #0
 8005444:	0049      	lsls	r1, r1, #1
 8005446:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800544a:	460e      	mov	r6, r1
 800544c:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 800544e:	9904      	ldr	r1, [sp, #16]
 8005450:	9805      	ldr	r0, [sp, #20]
 8005452:	02b6      	lsls	r6, r6, #10
 8005454:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8005458:	f04f 0800 	mov.w	r8, #0
 800545c:	fb0e f404 	mul.w	r4, lr, r4
 8005460:	fbc1 7806 	smlal	r7, r8, r1, r6
 8005464:	4641      	mov	r1, r8
 8005466:	1089      	asrs	r1, r1, #2
 8005468:	f301 010f 	ssat	r1, #16, r1
 800546c:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8005470:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8005472:	f10e 0e01 	add.w	lr, lr, #1
 8005476:	4571      	cmp	r1, lr
 8005478:	dd0e      	ble.n	8005498 <D64_GENERIC+0x1d8>
 800547a:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 800547c:	2d01      	cmp	r5, #1
 800547e:	f47f af3c 	bne.w	80052fa <D64_GENERIC+0x3a>
 8005482:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8005484:	06ac      	lsls	r4, r5, #26
 8005486:	e9d9 0100 	ldrd	r0, r1, [r9]
 800548a:	f109 0908 	add.w	r9, r9, #8
 800548e:	f57f af5c 	bpl.w	800534a <D64_GENERIC+0x8a>
 8005492:	ba40      	rev16	r0, r0
 8005494:	ba49      	rev16	r1, r1
 8005496:	e758      	b.n	800534a <D64_GENERIC+0x8a>
 8005498:	61d3      	str	r3, [r2, #28]
 800549a:	9b02      	ldr	r3, [sp, #8]
 800549c:	9901      	ldr	r1, [sp, #4]
 800549e:	6113      	str	r3, [r2, #16]
 80054a0:	9b03      	ldr	r3, [sp, #12]
 80054a2:	6091      	str	r1, [r2, #8]
 80054a4:	6153      	str	r3, [r2, #20]
 80054a6:	9900      	ldr	r1, [sp, #0]
 80054a8:	9b07      	ldr	r3, [sp, #28]
 80054aa:	60d1      	str	r1, [r2, #12]
 80054ac:	2000      	movs	r0, #0
 80054ae:	6193      	str	r3, [r2, #24]
 80054b0:	b009      	add	sp, #36	@ 0x24
 80054b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b6:	bf00      	nop
 80054b8:	001c0015 	.word	0x001c0015
 80054bc:	000f000a 	.word	0x000f000a
 80054c0:	00060003 	.word	0x00060003
 80054c4:	0024002a 	.word	0x0024002a
 80054c8:	002e0030 	.word	0x002e0030
 80054cc:	00030006 	.word	0x00030006
 80054d0:	000a000f 	.word	0x000a000f
 80054d4:	0015001c 	.word	0x0015001c
 80054d8:	2000000c 	.word	0x2000000c

080054dc <D80_GENERIC>:
 80054dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	b08b      	sub	sp, #44	@ 0x2c
 80054e2:	6914      	ldr	r4, [r2, #16]
 80054e4:	9405      	str	r4, [sp, #20]
 80054e6:	6954      	ldr	r4, [r2, #20]
 80054e8:	9406      	str	r4, [sp, #24]
 80054ea:	6994      	ldr	r4, [r2, #24]
 80054ec:	9409      	str	r4, [sp, #36]	@ 0x24
 80054ee:	6894      	ldr	r4, [r2, #8]
 80054f0:	9402      	str	r4, [sp, #8]
 80054f2:	68d4      	ldr	r4, [r2, #12]
 80054f4:	9401      	str	r4, [sp, #4]
 80054f6:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80054f8:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80054fa:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80054fe:	e9cd 4107 	strd	r4, r1, [sp, #28]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 810a 	beq.w	800571c <D80_GENERIC+0x240>
 8005508:	2300      	movs	r3, #0
 800550a:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 800576c <D80_GENERIC+0x290>
 800550e:	e9cd b303 	strd	fp, r3, [sp, #12]
 8005512:	e0ee      	b.n	80056f2 <D80_GENERIC+0x216>
 8005514:	fa5f fe8e 	uxtb.w	lr, lr
 8005518:	fa0f f48e 	sxth.w	r4, lr
 800551c:	0066      	lsls	r6, r4, #1
 800551e:	eb06 0804 	add.w	r8, r6, r4
 8005522:	f1ce 0500 	rsb	r5, lr, #0
 8005526:	eb00 0108 	add.w	r1, r0, r8
 800552a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800552e:	194b      	adds	r3, r1, r5
 8005530:	5d49      	ldrb	r1, [r1, r5]
 8005532:	f810 a008 	ldrb.w	sl, [r0, r8]
 8005536:	f813 b004 	ldrb.w	fp, [r3, r4]
 800553a:	f810 e00e 	ldrb.w	lr, [r0, lr]
 800553e:	f890 8000 	ldrb.w	r8, [r0]
 8005542:	eb03 0c04 	add.w	ip, r3, r4
 8005546:	eb0c 0705 	add.w	r7, ip, r5
 800554a:	0409      	lsls	r1, r1, #16
 800554c:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8005550:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8005554:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8005558:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800555c:	eb0a 0004 	add.w	r0, sl, r4
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	f81a a004 	ldrb.w	sl, [sl, r4]
 8005566:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800556a:	5d44      	ldrb	r4, [r0, r5]
 800556c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8005570:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8005574:	4428      	add	r0, r5
 8005576:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 800557a:	4441      	add	r1, r8
 800557c:	4430      	add	r0, r6
 800557e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8005582:	441f      	add	r7, r3
 8005584:	b2cd      	uxtb	r5, r1
 8005586:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800558a:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800558e:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 8005592:	9b03      	ldr	r3, [sp, #12]
 8005594:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8005598:	0e09      	lsrs	r1, r1, #24
 800559a:	4433      	add	r3, r6
 800559c:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 80055a0:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 80055a4:	b2fd      	uxtb	r5, r7
 80055a6:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 80055aa:	469b      	mov	fp, r3
 80055ac:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80055b0:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 80055b4:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 80055b8:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80055bc:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80055c0:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80055c4:	0e3b      	lsrs	r3, r7, #24
 80055c6:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80055ca:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 80055ce:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80055d2:	fa5f fc84 	uxtb.w	ip, r4
 80055d6:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 80055da:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80055de:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80055e2:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 80055e6:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80055ea:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80055ee:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 80055f2:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80055f6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80055fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055fe:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005602:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005606:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800560a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800560e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8005612:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8005616:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800561a:	0aa3      	lsrs	r3, r4, #10
 800561c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005620:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005624:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8005628:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 800562c:	9303      	str	r3, [sp, #12]
 800562e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8005632:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 8005636:	4b41      	ldr	r3, [pc, #260]	@ (800573c <D80_GENERIC+0x260>)
 8005638:	9901      	ldr	r1, [sp, #4]
 800563a:	fb2b 1303 	smlad	r3, fp, r3, r1
 800563e:	4940      	ldr	r1, [pc, #256]	@ (8005740 <D80_GENERIC+0x264>)
 8005640:	fb28 3301 	smlad	r3, r8, r1, r3
 8005644:	493f      	ldr	r1, [pc, #252]	@ (8005744 <D80_GENERIC+0x268>)
 8005646:	fb2e 3301 	smlad	r3, lr, r1, r3
 800564a:	493f      	ldr	r1, [pc, #252]	@ (8005748 <D80_GENERIC+0x26c>)
 800564c:	fb27 3301 	smlad	r3, r7, r1, r3
 8005650:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8005654:	fb2c 3404 	smlad	r4, ip, r4, r3
 8005658:	4b3c      	ldr	r3, [pc, #240]	@ (800574c <D80_GENERIC+0x270>)
 800565a:	9902      	ldr	r1, [sp, #8]
 800565c:	fb2b 1303 	smlad	r3, fp, r3, r1
 8005660:	493b      	ldr	r1, [pc, #236]	@ (8005750 <D80_GENERIC+0x274>)
 8005662:	fb28 3301 	smlad	r3, r8, r1, r3
 8005666:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 800566a:	fb2e 3101 	smlad	r1, lr, r1, r3
 800566e:	4b39      	ldr	r3, [pc, #228]	@ (8005754 <D80_GENERIC+0x278>)
 8005670:	fb27 1103 	smlad	r1, r7, r3, r1
 8005674:	4b38      	ldr	r3, [pc, #224]	@ (8005758 <D80_GENERIC+0x27c>)
 8005676:	fb2c 1303 	smlad	r3, ip, r3, r1
 800567a:	2101      	movs	r1, #1
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	fb2b fb01 	smuad	fp, fp, r1
 8005682:	4b36      	ldr	r3, [pc, #216]	@ (800575c <D80_GENERIC+0x280>)
 8005684:	fb28 b803 	smlad	r8, r8, r3, fp
 8005688:	4d35      	ldr	r5, [pc, #212]	@ (8005760 <D80_GENERIC+0x284>)
 800568a:	fb2e 8e05 	smlad	lr, lr, r5, r8
 800568e:	4d35      	ldr	r5, [pc, #212]	@ (8005764 <D80_GENERIC+0x288>)
 8005690:	fb27 e705 	smlad	r7, r7, r5, lr
 8005694:	4b34      	ldr	r3, [pc, #208]	@ (8005768 <D80_GENERIC+0x28c>)
 8005696:	fb2c 7303 	smlad	r3, ip, r3, r7
 800569a:	6a11      	ldr	r1, [r2, #32]
 800569c:	9302      	str	r3, [sp, #8]
 800569e:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 80056a2:	b181      	cbz	r1, 80056c6 <D80_GENERIC+0x1ea>
 80056a4:	9c05      	ldr	r4, [sp, #20]
 80056a6:	9d06      	ldr	r5, [sp, #24]
 80056a8:	441c      	add	r4, r3
 80056aa:	1b64      	subs	r4, r4, r5
 80056ac:	fba4 ab01 	umull	sl, fp, r4, r1
 80056b0:	17e7      	asrs	r7, r4, #31
 80056b2:	fb01 bb07 	mla	fp, r1, r7, fp
 80056b6:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 80056ba:	f14b 0500 	adc.w	r5, fp, #0
 80056be:	0069      	lsls	r1, r5, #1
 80056c0:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80056c4:	460b      	mov	r3, r1
 80056c6:	9e04      	ldr	r6, [sp, #16]
 80056c8:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 80056ca:	9f07      	ldr	r7, [sp, #28]
 80056cc:	025b      	lsls	r3, r3, #9
 80056ce:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80056d2:	2500      	movs	r5, #0
 80056d4:	fb06 f101 	mul.w	r1, r6, r1
 80056d8:	fbc7 4503 	smlal	r4, r5, r7, r3
 80056dc:	9c08      	ldr	r4, [sp, #32]
 80056de:	10ab      	asrs	r3, r5, #2
 80056e0:	f303 030f 	ssat	r3, #16, r3
 80056e4:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80056e8:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80056ea:	1c71      	adds	r1, r6, #1
 80056ec:	428b      	cmp	r3, r1
 80056ee:	9104      	str	r1, [sp, #16]
 80056f0:	dd12      	ble.n	8005718 <D80_GENERIC+0x23c>
 80056f2:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 80056f6:	f1be 0f01 	cmp.w	lr, #1
 80056fa:	f47f af0b 	bne.w	8005514 <D80_GENERIC+0x38>
 80056fe:	6801      	ldr	r1, [r0, #0]
 8005700:	6847      	ldr	r7, [r0, #4]
 8005702:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8005704:	6884      	ldr	r4, [r0, #8]
 8005706:	069b      	lsls	r3, r3, #26
 8005708:	f100 000a 	add.w	r0, r0, #10
 800570c:	f57f af3a 	bpl.w	8005584 <D80_GENERIC+0xa8>
 8005710:	ba49      	rev16	r1, r1
 8005712:	ba7f      	rev16	r7, r7
 8005714:	ba64      	rev16	r4, r4
 8005716:	e735      	b.n	8005584 <D80_GENERIC+0xa8>
 8005718:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800571c:	9b02      	ldr	r3, [sp, #8]
 800571e:	6093      	str	r3, [r2, #8]
 8005720:	9b01      	ldr	r3, [sp, #4]
 8005722:	60d3      	str	r3, [r2, #12]
 8005724:	9b05      	ldr	r3, [sp, #20]
 8005726:	6113      	str	r3, [r2, #16]
 8005728:	9b06      	ldr	r3, [sp, #24]
 800572a:	6153      	str	r3, [r2, #20]
 800572c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800572e:	f8c2 b01c 	str.w	fp, [r2, #28]
 8005732:	2000      	movs	r0, #0
 8005734:	6193      	str	r3, [r2, #24]
 8005736:	b00b      	add	sp, #44	@ 0x2c
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	002d0024 	.word	0x002d0024
 8005740:	001c0015 	.word	0x001c0015
 8005744:	000f000a 	.word	0x000f000a
 8005748:	00060003 	.word	0x00060003
 800574c:	0037003f 	.word	0x0037003f
 8005750:	00450049 	.word	0x00450049
 8005754:	00490045 	.word	0x00490045
 8005758:	003f0037 	.word	0x003f0037
 800575c:	00030006 	.word	0x00030006
 8005760:	000a000f 	.word	0x000a000f
 8005764:	0015001c 	.word	0x0015001c
 8005768:	0024002d 	.word	0x0024002d
 800576c:	2000000c 	.word	0x2000000c

08005770 <D128_GENERIC>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	b091      	sub	sp, #68	@ 0x44
 8005776:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8005778:	9004      	str	r0, [sp, #16]
 800577a:	6910      	ldr	r0, [r2, #16]
 800577c:	900a      	str	r0, [sp, #40]	@ 0x28
 800577e:	6950      	ldr	r0, [r2, #20]
 8005780:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005782:	6990      	ldr	r0, [r2, #24]
 8005784:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005786:	69d0      	ldr	r0, [r2, #28]
 8005788:	9002      	str	r0, [sp, #8]
 800578a:	6890      	ldr	r0, [r2, #8]
 800578c:	9003      	str	r0, [sp, #12]
 800578e:	68d0      	ldr	r0, [r2, #12]
 8005790:	9001      	str	r0, [sp, #4]
 8005792:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8005794:	9200      	str	r2, [sp, #0]
 8005796:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800579a:	2b00      	cmp	r3, #0
 800579c:	f000 8196 	beq.w	8005acc <D128_GENERIC+0x35c>
 80057a0:	2300      	movs	r3, #0
 80057a2:	6a12      	ldr	r2, [r2, #32]
 80057a4:	920e      	str	r2, [sp, #56]	@ 0x38
 80057a6:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 8005b48 <D128_GENERIC+0x3d8>
 80057aa:	9305      	str	r3, [sp, #20]
 80057ac:	e177      	b.n	8005a9e <D128_GENERIC+0x32e>
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	9d04      	ldr	r5, [sp, #16]
 80057b2:	b214      	sxth	r4, r2
 80057b4:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80057b8:	4250      	negs	r0, r2
 80057ba:	eb05 010a 	add.w	r1, r5, sl
 80057be:	00a6      	lsls	r6, r4, #2
 80057c0:	eb01 0800 	add.w	r8, r1, r0
 80057c4:	eb06 0e04 	add.w	lr, r6, r4
 80057c8:	eb08 070e 	add.w	r7, r8, lr
 80057cc:	183b      	adds	r3, r7, r0
 80057ce:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80057d2:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 80057d6:	9608      	str	r6, [sp, #32]
 80057d8:	eb0c 0604 	add.w	r6, ip, r4
 80057dc:	9304      	str	r3, [sp, #16]
 80057de:	1833      	adds	r3, r6, r0
 80057e0:	f815 b00a 	ldrb.w	fp, [r5, sl]
 80057e4:	9306      	str	r3, [sp, #24]
 80057e6:	f818 a00e 	ldrb.w	sl, [r8, lr]
 80057ea:	9b04      	ldr	r3, [sp, #16]
 80057ec:	f815 e002 	ldrb.w	lr, [r5, r2]
 80057f0:	782d      	ldrb	r5, [r5, #0]
 80057f2:	5c3a      	ldrb	r2, [r7, r0]
 80057f4:	9507      	str	r5, [sp, #28]
 80057f6:	9d06      	ldr	r5, [sp, #24]
 80057f8:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80057fc:	f81c 8004 	ldrb.w	r8, [ip, r4]
 8005800:	9304      	str	r3, [sp, #16]
 8005802:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 8005806:	5c33      	ldrb	r3, [r6, r0]
 8005808:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800580c:	5c09      	ldrb	r1, [r1, r0]
 800580e:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8005812:	0412      	lsls	r2, r2, #16
 8005814:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8005818:	eb06 0a04 	add.w	sl, r6, r4
 800581c:	5d36      	ldrb	r6, [r6, r4]
 800581e:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 8005822:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8005826:	042d      	lsls	r5, r5, #16
 8005828:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800582c:	0409      	lsls	r1, r1, #16
 800582e:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8005832:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8005836:	041b      	lsls	r3, r3, #16
 8005838:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 800583c:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8005840:	eb0a 0e00 	add.w	lr, sl, r0
 8005844:	9d07      	ldr	r5, [sp, #28]
 8005846:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 800584a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800584e:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8005852:	9f08      	ldr	r7, [sp, #32]
 8005854:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8005858:	4429      	add	r1, r5
 800585a:	9d04      	ldr	r5, [sp, #16]
 800585c:	4438      	add	r0, r7
 800585e:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 8005862:	9004      	str	r0, [sp, #16]
 8005864:	442a      	add	r2, r5
 8005866:	eb06 0a0b 	add.w	sl, r6, fp
 800586a:	1918      	adds	r0, r3, r4
 800586c:	b2cb      	uxtb	r3, r1
 800586e:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8005872:	9e02      	ldr	r6, [sp, #8]
 8005874:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005878:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800587c:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8005880:	441e      	add	r6, r3
 8005882:	0e09      	lsrs	r1, r1, #24
 8005884:	4633      	mov	r3, r6
 8005886:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800588a:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800588e:	b2d4      	uxtb	r4, r2
 8005890:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005894:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005898:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800589c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80058a0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80058a4:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80058a8:	0e12      	lsrs	r2, r2, #24
 80058aa:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80058ae:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80058b2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80058b6:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80058ba:	9702      	str	r7, [sp, #8]
 80058bc:	b2c2      	uxtb	r2, r0
 80058be:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80058c2:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 80058c6:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80058ca:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80058ce:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80058d2:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 80058d6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80058da:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80058de:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80058e2:	0e00      	lsrs	r0, r0, #24
 80058e4:	fa5f f68a 	uxtb.w	r6, sl
 80058e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ec:	9308      	str	r3, [sp, #32]
 80058ee:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80058f2:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80058f6:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 80058fa:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80058fe:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005902:	9509      	str	r5, [sp, #36]	@ 0x24
 8005904:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005908:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800590c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005910:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005914:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8005918:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800591c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8005920:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8005924:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8005928:	9306      	str	r3, [sp, #24]
 800592a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800592e:	9b02      	ldr	r3, [sp, #8]
 8005930:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8005934:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005938:	f8cd a01c 	str.w	sl, [sp, #28]
 800593c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8005940:	9b06      	ldr	r3, [sp, #24]
 8005942:	9506      	str	r5, [sp, #24]
 8005944:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005946:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800594a:	f8cd e008 	str.w	lr, [sp, #8]
 800594e:	46ae      	mov	lr, r5
 8005950:	9d08      	ldr	r5, [sp, #32]
 8005952:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005956:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800595a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800595e:	9d02      	ldr	r5, [sp, #8]
 8005960:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005964:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005968:	9f07      	ldr	r7, [sp, #28]
 800596a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800596e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005972:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8005976:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800597a:	9d06      	ldr	r5, [sp, #24]
 800597c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005980:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8005984:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005988:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800598c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005990:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 8005994:	0abe      	lsrs	r6, r7, #10
 8005996:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800599a:	9602      	str	r6, [sp, #8]
 800599c:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80059a0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80059a4:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 80059a8:	4e52      	ldr	r6, [pc, #328]	@ (8005af4 <D128_GENERIC+0x384>)
 80059aa:	9f01      	ldr	r7, [sp, #4]
 80059ac:	fb2e 7606 	smlad	r6, lr, r6, r7
 80059b0:	4f51      	ldr	r7, [pc, #324]	@ (8005af8 <D128_GENERIC+0x388>)
 80059b2:	fb2a 6607 	smlad	r6, sl, r7, r6
 80059b6:	4f51      	ldr	r7, [pc, #324]	@ (8005afc <D128_GENERIC+0x38c>)
 80059b8:	fb21 6607 	smlad	r6, r1, r7, r6
 80059bc:	4f50      	ldr	r7, [pc, #320]	@ (8005b00 <D128_GENERIC+0x390>)
 80059be:	fb24 6607 	smlad	r6, r4, r7, r6
 80059c2:	4f50      	ldr	r7, [pc, #320]	@ (8005b04 <D128_GENERIC+0x394>)
 80059c4:	fb22 6607 	smlad	r6, r2, r7, r6
 80059c8:	4f4f      	ldr	r7, [pc, #316]	@ (8005b08 <D128_GENERIC+0x398>)
 80059ca:	fb20 6607 	smlad	r6, r0, r7, r6
 80059ce:	4f4f      	ldr	r7, [pc, #316]	@ (8005b0c <D128_GENERIC+0x39c>)
 80059d0:	fb23 6607 	smlad	r6, r3, r7, r6
 80059d4:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 80059d8:	fb25 6807 	smlad	r8, r5, r7, r6
 80059dc:	4f4c      	ldr	r7, [pc, #304]	@ (8005b10 <D128_GENERIC+0x3a0>)
 80059de:	9e03      	ldr	r6, [sp, #12]
 80059e0:	fb2e 6c07 	smlad	ip, lr, r7, r6
 80059e4:	4e4b      	ldr	r6, [pc, #300]	@ (8005b14 <D128_GENERIC+0x3a4>)
 80059e6:	fb2a cc06 	smlad	ip, sl, r6, ip
 80059ea:	4f4b      	ldr	r7, [pc, #300]	@ (8005b18 <D128_GENERIC+0x3a8>)
 80059ec:	fb21 cc07 	smlad	ip, r1, r7, ip
 80059f0:	4f4a      	ldr	r7, [pc, #296]	@ (8005b1c <D128_GENERIC+0x3ac>)
 80059f2:	fb24 cc07 	smlad	ip, r4, r7, ip
 80059f6:	4f4a      	ldr	r7, [pc, #296]	@ (8005b20 <D128_GENERIC+0x3b0>)
 80059f8:	fb22 cc07 	smlad	ip, r2, r7, ip
 80059fc:	4f49      	ldr	r7, [pc, #292]	@ (8005b24 <D128_GENERIC+0x3b4>)
 80059fe:	fb20 cc07 	smlad	ip, r0, r7, ip
 8005a02:	4f49      	ldr	r7, [pc, #292]	@ (8005b28 <D128_GENERIC+0x3b8>)
 8005a04:	fb23 c707 	smlad	r7, r3, r7, ip
 8005a08:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8005b4c <D128_GENERIC+0x3dc>
 8005a0c:	fb25 760c 	smlad	r6, r5, ip, r7
 8005a10:	f04f 0b01 	mov.w	fp, #1
 8005a14:	9601      	str	r6, [sp, #4]
 8005a16:	fb2e fb0b 	smuad	fp, lr, fp
 8005a1a:	4f44      	ldr	r7, [pc, #272]	@ (8005b2c <D128_GENERIC+0x3bc>)
 8005a1c:	fb2a ba07 	smlad	sl, sl, r7, fp
 8005a20:	4f43      	ldr	r7, [pc, #268]	@ (8005b30 <D128_GENERIC+0x3c0>)
 8005a22:	fb21 aa07 	smlad	sl, r1, r7, sl
 8005a26:	4f43      	ldr	r7, [pc, #268]	@ (8005b34 <D128_GENERIC+0x3c4>)
 8005a28:	fb24 aa07 	smlad	sl, r4, r7, sl
 8005a2c:	4f42      	ldr	r7, [pc, #264]	@ (8005b38 <D128_GENERIC+0x3c8>)
 8005a2e:	fb22 a707 	smlad	r7, r2, r7, sl
 8005a32:	4a42      	ldr	r2, [pc, #264]	@ (8005b3c <D128_GENERIC+0x3cc>)
 8005a34:	fb20 7702 	smlad	r7, r0, r2, r7
 8005a38:	4a41      	ldr	r2, [pc, #260]	@ (8005b40 <D128_GENERIC+0x3d0>)
 8005a3a:	fb23 7702 	smlad	r7, r3, r2, r7
 8005a3e:	4b41      	ldr	r3, [pc, #260]	@ (8005b44 <D128_GENERIC+0x3d4>)
 8005a40:	fb25 7303 	smlad	r3, r5, r3, r7
 8005a44:	9303      	str	r3, [sp, #12]
 8005a46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a48:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 8005a4c:	b183      	cbz	r3, 8005a70 <D128_GENERIC+0x300>
 8005a4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a52:	4432      	add	r2, r6
 8005a54:	1a52      	subs	r2, r2, r1
 8005a56:	fba2 4503 	umull	r4, r5, r2, r3
 8005a5a:	17d1      	asrs	r1, r2, #31
 8005a5c:	fb03 5501 	mla	r5, r3, r1, r5
 8005a60:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 8005a64:	f145 0300 	adc.w	r3, r5, #0
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 8005a6e:	461e      	mov	r6, r3
 8005a70:	9800      	ldr	r0, [sp, #0]
 8005a72:	9c05      	ldr	r4, [sp, #20]
 8005a74:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8005a76:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005a78:	01f6      	lsls	r6, r6, #7
 8005a7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005a7e:	2300      	movs	r3, #0
 8005a80:	fbc5 2306 	smlal	r2, r3, r5, r6
 8005a84:	fb04 f101 	mul.w	r1, r4, r1
 8005a88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005a8a:	109b      	asrs	r3, r3, #2
 8005a8c:	f303 030f 	ssat	r3, #16, r3
 8005a90:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8005a94:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8005a96:	1c62      	adds	r2, r4, #1
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	9205      	str	r2, [sp, #20]
 8005a9c:	dd16      	ble.n	8005acc <D128_GENERIC+0x35c>
 8005a9e:	9b00      	ldr	r3, [sp, #0]
 8005aa0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8005aa2:	2a01      	cmp	r2, #1
 8005aa4:	f47f ae83 	bne.w	80057ae <D128_GENERIC+0x3e>
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aaa:	9c04      	ldr	r4, [sp, #16]
 8005aac:	069b      	lsls	r3, r3, #26
 8005aae:	e9d4 1200 	ldrd	r1, r2, [r4]
 8005ab2:	68a0      	ldr	r0, [r4, #8]
 8005ab4:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8005ab8:	f104 0410 	add.w	r4, r4, #16
 8005abc:	d517      	bpl.n	8005aee <D128_GENERIC+0x37e>
 8005abe:	ba49      	rev16	r1, r1
 8005ac0:	ba52      	rev16	r2, r2
 8005ac2:	ba40      	rev16	r0, r0
 8005ac4:	fa9a fa9a 	rev16.w	sl, sl
 8005ac8:	9404      	str	r4, [sp, #16]
 8005aca:	e6cf      	b.n	800586c <D128_GENERIC+0xfc>
 8005acc:	9b00      	ldr	r3, [sp, #0]
 8005ace:	9903      	ldr	r1, [sp, #12]
 8005ad0:	6099      	str	r1, [r3, #8]
 8005ad2:	9901      	ldr	r1, [sp, #4]
 8005ad4:	60d9      	str	r1, [r3, #12]
 8005ad6:	9902      	ldr	r1, [sp, #8]
 8005ad8:	61d9      	str	r1, [r3, #28]
 8005ada:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005adc:	6119      	str	r1, [r3, #16]
 8005ade:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005ae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ae2:	6159      	str	r1, [r3, #20]
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	619a      	str	r2, [r3, #24]
 8005ae8:	b011      	add	sp, #68	@ 0x44
 8005aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aee:	9404      	str	r4, [sp, #16]
 8005af0:	e6bc      	b.n	800586c <D128_GENERIC+0xfc>
 8005af2:	bf00      	nop
 8005af4:	00780069 	.word	0x00780069
 8005af8:	005b004e 	.word	0x005b004e
 8005afc:	00420037 	.word	0x00420037
 8005b00:	002d0024 	.word	0x002d0024
 8005b04:	001c0015 	.word	0x001c0015
 8005b08:	000f000a 	.word	0x000f000a
 8005b0c:	00060003 	.word	0x00060003
 8005b10:	00880096 	.word	0x00880096
 8005b14:	00a200ac 	.word	0x00a200ac
 8005b18:	00b400ba 	.word	0x00b400ba
 8005b1c:	00be00c0 	.word	0x00be00c0
 8005b20:	00c000be 	.word	0x00c000be
 8005b24:	00ba00b4 	.word	0x00ba00b4
 8005b28:	00ac00a2 	.word	0x00ac00a2
 8005b2c:	00030006 	.word	0x00030006
 8005b30:	000a000f 	.word	0x000a000f
 8005b34:	0015001c 	.word	0x0015001c
 8005b38:	0024002d 	.word	0x0024002d
 8005b3c:	00370042 	.word	0x00370042
 8005b40:	004e005b 	.word	0x004e005b
 8005b44:	00690078 	.word	0x00690078
 8005b48:	2000000c 	.word	0x2000000c
 8005b4c:	00960088 	.word	0x00960088

08005b50 <D16_1CH_HTONS_VOL_HP>:
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8005b58:	b085      	sub	sp, #20
 8005b5a:	4681      	mov	r9, r0
 8005b5c:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8005b5e:	6993      	ldr	r3, [r2, #24]
 8005b60:	9303      	str	r3, [sp, #12]
 8005b62:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8005b66:	69d3      	ldr	r3, [r2, #28]
 8005b68:	9402      	str	r4, [sp, #8]
 8005b6a:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 8005b6e:	f8d2 c020 	ldr.w	ip, [r2, #32]
 8005b72:	2800      	cmp	r0, #0
 8005b74:	d057      	beq.n	8005c26 <D16_1CH_HTONS_VOL_HP+0xd6>
 8005b76:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 8005b7a:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8005c34 <D16_1CH_HTONS_VOL_HP+0xe4>
 8005b7e:	f1a1 0802 	sub.w	r8, r1, #2
 8005b82:	4639      	mov	r1, r7
 8005b84:	465f      	mov	r7, fp
 8005b86:	46d3      	mov	fp, sl
 8005b88:	46ca      	mov	sl, r9
 8005b8a:	4699      	mov	r9, r3
 8005b8c:	4633      	mov	r3, r6
 8005b8e:	4616      	mov	r6, r2
 8005b90:	f85a 2b02 	ldr.w	r2, [sl], #2
 8005b94:	ba52      	rev16	r2, r2
 8005b96:	b2d4      	uxtb	r4, r2
 8005b98:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8005b9c:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 8005ba0:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8005ba4:	4491      	add	r9, r2
 8005ba6:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 8005baa:	f3c0 0209 	ubfx	r2, r0, #0, #10
 8005bae:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8005bb2:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8005bb6:	ea4f 2990 	mov.w	r9, r0, lsr #10
 8005bba:	481c      	ldr	r0, [pc, #112]	@ (8005c2c <D16_1CH_HTONS_VOL_HP+0xdc>)
 8005bbc:	fb22 5400 	smlad	r4, r2, r0, r5
 8005bc0:	481b      	ldr	r0, [pc, #108]	@ (8005c30 <D16_1CH_HTONS_VOL_HP+0xe0>)
 8005bc2:	fb22 f500 	smuad	r5, r2, r0
 8005bc6:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8005bca:	18e2      	adds	r2, r4, r3
 8005bcc:	1a52      	subs	r2, r2, r1
 8005bce:	17d1      	asrs	r1, r2, #31
 8005bd0:	fba2 230c 	umull	r2, r3, r2, ip
 8005bd4:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8005bd8:	fb0c 3301 	mla	r3, ip, r1, r3
 8005bdc:	f143 0100 	adc.w	r1, r3, #0
 8005be0:	e9cd 0100 	strd	r0, r1, [sp]
 8005be4:	044a      	lsls	r2, r1, #17
 8005be6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005bea:	2100      	movs	r1, #0
 8005bec:	9b01      	ldr	r3, [sp, #4]
 8005bee:	fbcb 0102 	smlal	r0, r1, fp, r2
 8005bf2:	45ba      	cmp	sl, r7
 8005bf4:	ea4f 02a1 	mov.w	r2, r1, asr #2
 8005bf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005bfc:	f302 020f 	ssat	r2, #16, r2
 8005c00:	4621      	mov	r1, r4
 8005c02:	f828 2f02 	strh.w	r2, [r8, #2]!
 8005c06:	d1c3      	bne.n	8005b90 <D16_1CH_HTONS_VOL_HP+0x40>
 8005c08:	4632      	mov	r2, r6
 8005c0a:	461e      	mov	r6, r3
 8005c0c:	464b      	mov	r3, r9
 8005c0e:	9902      	ldr	r1, [sp, #8]
 8005c10:	61d3      	str	r3, [r2, #28]
 8005c12:	9b03      	ldr	r3, [sp, #12]
 8005c14:	6095      	str	r5, [r2, #8]
 8005c16:	2000      	movs	r0, #0
 8005c18:	60d1      	str	r1, [r2, #12]
 8005c1a:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8005c1e:	6193      	str	r3, [r2, #24]
 8005c20:	b005      	add	sp, #20
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	463c      	mov	r4, r7
 8005c28:	e7f1      	b.n	8005c0e <D16_1CH_HTONS_VOL_HP+0xbe>
 8005c2a:	bf00      	nop
 8005c2c:	00030001 	.word	0x00030001
 8005c30:	00010003 	.word	0x00010003
 8005c34:	2000000c 	.word	0x2000000c

08005c38 <D24_1CH_HTONS_VOL_HP>:
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	4696      	mov	lr, r2
 8005c3e:	b089      	sub	sp, #36	@ 0x24
 8005c40:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 8005c44:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8005c46:	f8de 3018 	ldr.w	r3, [lr, #24]
 8005c4a:	9703      	str	r7, [sp, #12]
 8005c4c:	f8de 7020 	ldr.w	r7, [lr, #32]
 8005c50:	9306      	str	r3, [sp, #24]
 8005c52:	9205      	str	r2, [sp, #20]
 8005c54:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 8005c58:	f8de 601c 	ldr.w	r6, [lr, #28]
 8005c5c:	9704      	str	r7, [sp, #16]
 8005c5e:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 8005c62:	2a00      	cmp	r2, #0
 8005c64:	f000 8081 	beq.w	8005d6a <D24_1CH_HTONS_VOL_HP+0x132>
 8005c68:	f1a1 0b02 	sub.w	fp, r1, #2
 8005c6c:	2700      	movs	r7, #0
 8005c6e:	46d9      	mov	r9, fp
 8005c70:	f8cd e01c 	str.w	lr, [sp, #28]
 8005c74:	46d3      	mov	fp, sl
 8005c76:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8005d78 <D24_1CH_HTONS_VOL_HP+0x140>
 8005c7a:	46a8      	mov	r8, r5
 8005c7c:	46ba      	mov	sl, r7
 8005c7e:	469e      	mov	lr, r3
 8005c80:	e052      	b.n	8005d28 <D24_1CH_HTONS_VOL_HP+0xf0>
 8005c82:	7842      	ldrb	r2, [r0, #1]
 8005c84:	3002      	adds	r0, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	b2d9      	uxtb	r1, r3
 8005c8a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005c8e:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8005c92:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8005c96:	0c1b      	lsrs	r3, r3, #16
 8005c98:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005c9c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8005ca0:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 8005ca4:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8005ca8:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8005cac:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8005cb0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8005cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8005d70 <D24_1CH_HTONS_VOL_HP+0x138>)
 8005cb6:	fb23 b102 	smlad	r1, r3, r2, fp
 8005cba:	4a2e      	ldr	r2, [pc, #184]	@ (8005d74 <D24_1CH_HTONS_VOL_HP+0x13c>)
 8005cbc:	fb23 eb02 	smlad	fp, r3, r2, lr
 8005cc0:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 8005cc4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8005cc8:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 8005ccc:	2201      	movs	r2, #1
 8005cce:	fb23 f702 	smuad	r7, r3, r2
 8005cd2:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 8005cd6:	eb01 0208 	add.w	r2, r1, r8
 8005cda:	1b12      	subs	r2, r2, r4
 8005cdc:	17d4      	asrs	r4, r2, #31
 8005cde:	4613      	mov	r3, r2
 8005ce0:	e9cd 3400 	strd	r3, r4, [sp]
 8005ce4:	9c04      	ldr	r4, [sp, #16]
 8005ce6:	9d01      	ldr	r5, [sp, #4]
 8005ce8:	fba2 2304 	umull	r2, r3, r2, r4
 8005cec:	fb04 3305 	mla	r3, r4, r5, r3
 8005cf0:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8005cf4:	f143 0500 	adc.w	r5, r3, #0
 8005cf8:	9b03      	ldr	r3, [sp, #12]
 8005cfa:	e9cd 4500 	strd	r4, r5, [sp]
 8005cfe:	03ea      	lsls	r2, r5, #15
 8005d00:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8005d04:	2500      	movs	r5, #0
 8005d06:	fbc3 4502 	smlal	r4, r5, r3, r2
 8005d0a:	9b01      	ldr	r3, [sp, #4]
 8005d0c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005d10:	10ab      	asrs	r3, r5, #2
 8005d12:	f303 030f 	ssat	r3, #16, r3
 8005d16:	f829 3f02 	strh.w	r3, [r9, #2]!
 8005d1a:	9b05      	ldr	r3, [sp, #20]
 8005d1c:	f10a 0a01 	add.w	sl, sl, #1
 8005d20:	459a      	cmp	sl, r3
 8005d22:	44be      	add	lr, r7
 8005d24:	460c      	mov	r4, r1
 8005d26:	d00e      	beq.n	8005d46 <D24_1CH_HTONS_VOL_HP+0x10e>
 8005d28:	7801      	ldrb	r1, [r0, #0]
 8005d2a:	78c2      	ldrb	r2, [r0, #3]
 8005d2c:	020b      	lsls	r3, r1, #8
 8005d2e:	f01a 0f01 	tst.w	sl, #1
 8005d32:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8005d36:	d0a4      	beq.n	8005c82 <D24_1CH_HTONS_VOL_HP+0x4a>
 8005d38:	7885      	ldrb	r5, [r0, #2]
 8005d3a:	0212      	lsls	r2, r2, #8
 8005d3c:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 8005d40:	440b      	add	r3, r1
 8005d42:	3004      	adds	r0, #4
 8005d44:	e7a0      	b.n	8005c88 <D24_1CH_HTONS_VOL_HP+0x50>
 8005d46:	4673      	mov	r3, lr
 8005d48:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8005d4c:	46da      	mov	sl, fp
 8005d4e:	4645      	mov	r5, r8
 8005d50:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 8005d54:	9b06      	ldr	r3, [sp, #24]
 8005d56:	f8ce 601c 	str.w	r6, [lr, #28]
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e9ce 5104 	strd	r5, r1, [lr, #16]
 8005d60:	f8ce 3018 	str.w	r3, [lr, #24]
 8005d64:	b009      	add	sp, #36	@ 0x24
 8005d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	e7f0      	b.n	8005d50 <D24_1CH_HTONS_VOL_HP+0x118>
 8005d6e:	bf00      	nop
 8005d70:	00030001 	.word	0x00030001
 8005d74:	00060007 	.word	0x00060007
 8005d78:	2000000c 	.word	0x2000000c

08005d7c <D32_1CH_HTONS_VOL_HP>:
 8005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d80:	4682      	mov	sl, r0
 8005d82:	b087      	sub	sp, #28
 8005d84:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8005d86:	6993      	ldr	r3, [r2, #24]
 8005d88:	9304      	str	r3, [sp, #16]
 8005d8a:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8005d8e:	69d5      	ldr	r5, [r2, #28]
 8005d90:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8005d92:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8005d96:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d070      	beq.n	8005e80 <D32_1CH_HTONS_VOL_HP+0x104>
 8005d9e:	468e      	mov	lr, r1
 8005da0:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8005e94 <D32_1CH_HTONS_VOL_HP+0x118>
 8005da4:	9205      	str	r2, [sp, #20]
 8005da6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8005daa:	46d3      	mov	fp, sl
 8005dac:	4638      	mov	r0, r7
 8005dae:	46ca      	mov	sl, r9
 8005db0:	9103      	str	r1, [sp, #12]
 8005db2:	4627      	mov	r7, r4
 8005db4:	4699      	mov	r9, r3
 8005db6:	f85b 1b04 	ldr.w	r1, [fp], #4
 8005dba:	ba49      	rev16	r1, r1
 8005dbc:	b2ca      	uxtb	r2, r1
 8005dbe:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005dc2:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8005dc6:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8005dca:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8005dce:	0e09      	lsrs	r1, r1, #24
 8005dd0:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8005dd4:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8005dd8:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 8005ddc:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8005de0:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8005de4:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 8005de8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005dec:	f3c5 0109 	ubfx	r1, r5, #0, #10
 8005df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005df8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dfc:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8005e00:	4a20      	ldr	r2, [pc, #128]	@ (8005e84 <D32_1CH_HTONS_VOL_HP+0x108>)
 8005e02:	fb23 8802 	smlad	r8, r3, r2, r8
 8005e06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005e0a:	fb24 8102 	smlad	r1, r4, r2, r8
 8005e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005e88 <D32_1CH_HTONS_VOL_HP+0x10c>)
 8005e10:	fb23 9802 	smlad	r8, r3, r2, r9
 8005e14:	4a1d      	ldr	r2, [pc, #116]	@ (8005e8c <D32_1CH_HTONS_VOL_HP+0x110>)
 8005e16:	fb24 8802 	smlad	r8, r4, r2, r8
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	fb23 f302 	smuad	r3, r3, r2
 8005e20:	4a1b      	ldr	r2, [pc, #108]	@ (8005e90 <D32_1CH_HTONS_VOL_HP+0x114>)
 8005e22:	fb24 3902 	smlad	r9, r4, r2, r3
 8005e26:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 8005e2a:	19a2      	adds	r2, r4, r6
 8005e2c:	1a12      	subs	r2, r2, r0
 8005e2e:	17d1      	asrs	r1, r2, #31
 8005e30:	fba2 230a 	umull	r2, r3, r2, sl
 8005e34:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8005e38:	fb0a 3301 	mla	r3, sl, r1, r3
 8005e3c:	f143 0100 	adc.w	r1, r3, #0
 8005e40:	e9cd 0100 	strd	r0, r1, [sp]
 8005e44:	038a      	lsls	r2, r1, #14
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	fbc7 0102 	smlal	r0, r1, r7, r2
 8005e52:	108a      	asrs	r2, r1, #2
 8005e54:	005e      	lsls	r6, r3, #1
 8005e56:	f302 020f 	ssat	r2, #16, r2
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	f82e 2b02 	strh.w	r2, [lr], #2
 8005e60:	459e      	cmp	lr, r3
 8005e62:	4620      	mov	r0, r4
 8005e64:	d1a7      	bne.n	8005db6 <D32_1CH_HTONS_VOL_HP+0x3a>
 8005e66:	9a05      	ldr	r2, [sp, #20]
 8005e68:	464b      	mov	r3, r9
 8005e6a:	e9c2 3802 	strd	r3, r8, [r2, #8]
 8005e6e:	9b04      	ldr	r3, [sp, #16]
 8005e70:	61d5      	str	r5, [r2, #28]
 8005e72:	2000      	movs	r0, #0
 8005e74:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8005e78:	6193      	str	r3, [r2, #24]
 8005e7a:	b007      	add	sp, #28
 8005e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e80:	463c      	mov	r4, r7
 8005e82:	e7f2      	b.n	8005e6a <D32_1CH_HTONS_VOL_HP+0xee>
 8005e84:	00060003 	.word	0x00060003
 8005e88:	000a000c 	.word	0x000a000c
 8005e8c:	000c000a 	.word	0x000c000a
 8005e90:	00030006 	.word	0x00030006
 8005e94:	2000000c 	.word	0x2000000c

08005e98 <D48_1CH_HTONS_VOL_HP>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	b087      	sub	sp, #28
 8005e9e:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 8005ea0:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8005ea2:	6993      	ldr	r3, [r2, #24]
 8005ea4:	9702      	str	r7, [sp, #8]
 8005ea6:	6a17      	ldr	r7, [r2, #32]
 8005ea8:	9304      	str	r3, [sp, #16]
 8005eaa:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 8005eae:	69d6      	ldr	r6, [r2, #28]
 8005eb0:	9705      	str	r7, [sp, #20]
 8005eb2:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	f000 8093 	beq.w	8005fe2 <D48_1CH_HTONS_VOL_HP+0x14a>
 8005ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ec0:	46ba      	mov	sl, r7
 8005ec2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8005ec6:	3902      	subs	r1, #2
 8005ec8:	4f47      	ldr	r7, [pc, #284]	@ (8005fe8 <D48_1CH_HTONS_VOL_HP+0x150>)
 8005eca:	9503      	str	r5, [sp, #12]
 8005ecc:	9101      	str	r1, [sp, #4]
 8005ece:	469e      	mov	lr, r3
 8005ed0:	9205      	str	r2, [sp, #20]
 8005ed2:	e9d0 3500 	ldrd	r3, r5, [r0]
 8005ed6:	3006      	adds	r0, #6
 8005ed8:	ba5b      	rev16	r3, r3
 8005eda:	ba6d      	rev16	r5, r5
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005ee2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8005ee6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8005eea:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8005eee:	0e1b      	lsrs	r3, r3, #24
 8005ef0:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8005ef4:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8005ef8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8005efc:	fa5f fb85 	uxtb.w	fp, r5
 8005f00:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 8005f04:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8005f08:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8005f0c:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 8005f10:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8005f14:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8005f18:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005f1c:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8005f20:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f28:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 8005f2c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005f30:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005f34:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005f38:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 8005f3c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005f40:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 8005f44:	4b29      	ldr	r3, [pc, #164]	@ (8005fec <D48_1CH_HTONS_VOL_HP+0x154>)
 8005f46:	fb22 c103 	smlad	r1, r2, r3, ip
 8005f4a:	4b29      	ldr	r3, [pc, #164]	@ (8005ff0 <D48_1CH_HTONS_VOL_HP+0x158>)
 8005f4c:	fb28 1103 	smlad	r1, r8, r3, r1
 8005f50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005f54:	fb25 1103 	smlad	r1, r5, r3, r1
 8005f58:	4b26      	ldr	r3, [pc, #152]	@ (8005ff4 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8005f5a:	fb22 ec03 	smlad	ip, r2, r3, lr
 8005f5e:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8005f62:	fb28 cc03 	smlad	ip, r8, r3, ip
 8005f66:	4b24      	ldr	r3, [pc, #144]	@ (8005ff8 <D48_1CH_HTONS_VOL_HP+0x160>)
 8005f68:	fb25 cc03 	smlad	ip, r5, r3, ip
 8005f6c:	f04f 0e01 	mov.w	lr, #1
 8005f70:	fb22 f20e 	smuad	r2, r2, lr
 8005f74:	4b21      	ldr	r3, [pc, #132]	@ (8005ffc <D48_1CH_HTONS_VOL_HP+0x164>)
 8005f76:	fb28 2803 	smlad	r8, r8, r3, r2
 8005f7a:	4b21      	ldr	r3, [pc, #132]	@ (8006000 <D48_1CH_HTONS_VOL_HP+0x168>)
 8005f7c:	fb25 8e03 	smlad	lr, r5, r3, r8
 8005f80:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 8005f84:	190a      	adds	r2, r1, r4
 8005f86:	eba2 0209 	sub.w	r2, r2, r9
 8005f8a:	17d5      	asrs	r5, r2, #31
 8005f8c:	fba2 230a 	umull	r2, r3, r2, sl
 8005f90:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8005f94:	fb0a 3305 	mla	r3, sl, r5, r3
 8005f98:	f143 0500 	adc.w	r5, r3, #0
 8005f9c:	9b02      	ldr	r3, [sp, #8]
 8005f9e:	032a      	lsls	r2, r5, #12
 8005fa0:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8005fa4:	f04f 0900 	mov.w	r9, #0
 8005fa8:	fbc3 8902 	smlal	r8, r9, r3, r2
 8005fac:	9a01      	ldr	r2, [sp, #4]
 8005fae:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8005fb2:	f303 030f 	ssat	r3, #16, r3
 8005fb6:	f822 3f02 	strh.w	r3, [r2, #2]!
 8005fba:	9b03      	ldr	r3, [sp, #12]
 8005fbc:	9201      	str	r2, [sp, #4]
 8005fbe:	4283      	cmp	r3, r0
 8005fc0:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8005fc4:	4689      	mov	r9, r1
 8005fc6:	d184      	bne.n	8005ed2 <D48_1CH_HTONS_VOL_HP+0x3a>
 8005fc8:	9a05      	ldr	r2, [sp, #20]
 8005fca:	4673      	mov	r3, lr
 8005fcc:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 8005fd0:	9b04      	ldr	r3, [sp, #16]
 8005fd2:	61d6      	str	r6, [r2, #28]
 8005fd4:	2000      	movs	r0, #0
 8005fd6:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8005fda:	6193      	str	r3, [r2, #24]
 8005fdc:	b007      	add	sp, #28
 8005fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	e7f2      	b.n	8005fcc <D48_1CH_HTONS_VOL_HP+0x134>
 8005fe6:	bf00      	nop
 8005fe8:	2000000c 	.word	0x2000000c
 8005fec:	000f000a 	.word	0x000f000a
 8005ff0:	00060003 	.word	0x00060003
 8005ff4:	00150019 	.word	0x00150019
 8005ff8:	00190015 	.word	0x00190015
 8005ffc:	00030006 	.word	0x00030006
 8006000:	000a000f 	.word	0x000a000f

08006004 <D64_1CH_HTONS_VOL_HP>:
 8006004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006008:	b087      	sub	sp, #28
 800600a:	6913      	ldr	r3, [r2, #16]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 8006012:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8006014:	9601      	str	r6, [sp, #4]
 8006016:	4681      	mov	r9, r0
 8006018:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 800601a:	6a16      	ldr	r6, [r2, #32]
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 8006022:	69d3      	ldr	r3, [r2, #28]
 8006024:	9602      	str	r6, [sp, #8]
 8006026:	2800      	cmp	r0, #0
 8006028:	f000 809d 	beq.w	8006166 <D64_1CH_HTONS_VOL_HP+0x162>
 800602c:	468e      	mov	lr, r1
 800602e:	f8df c170 	ldr.w	ip, [pc, #368]	@ 80061a0 <D64_1CH_HTONS_VOL_HP+0x19c>
 8006032:	9205      	str	r2, [sp, #20]
 8006034:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8006038:	9103      	str	r1, [sp, #12]
 800603a:	4622      	mov	r2, r4
 800603c:	4619      	mov	r1, r3
 800603e:	f859 3b08 	ldr.w	r3, [r9], #8
 8006042:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8006046:	ba5b      	rev16	r3, r3
 8006048:	ba76      	rev16	r6, r6
 800604a:	b2dc      	uxtb	r4, r3
 800604c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8006050:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8006054:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8006058:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800605c:	0e1b      	lsrs	r3, r3, #24
 800605e:	eb01 0b07 	add.w	fp, r1, r7
 8006062:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 8006066:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 800606a:	b2f1      	uxtb	r1, r6
 800606c:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 8006070:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006074:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 8006078:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 800607c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8006080:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8006084:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 8006088:	0e36      	lsrs	r6, r6, #24
 800608a:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 800608e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8006092:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8006096:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800609a:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800609e:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80060a2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80060a6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80060aa:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80060ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80060b6:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 80060ba:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80060be:	f3c6 0409 	ubfx	r4, r6, #0, #10
 80060c2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80060c6:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 80060ca:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80060ce:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 80060d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006180 <D64_1CH_HTONS_VOL_HP+0x17c>)
 80060d4:	0ab1      	lsrs	r1, r6, #10
 80060d6:	fb2b 8803 	smlad	r8, fp, r3, r8
 80060da:	4b2a      	ldr	r3, [pc, #168]	@ (8006184 <D64_1CH_HTONS_VOL_HP+0x180>)
 80060dc:	fb2a 8803 	smlad	r8, sl, r3, r8
 80060e0:	4b29      	ldr	r3, [pc, #164]	@ (8006188 <D64_1CH_HTONS_VOL_HP+0x184>)
 80060e2:	fb27 8803 	smlad	r8, r7, r3, r8
 80060e6:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80060ea:	fb20 8604 	smlad	r6, r0, r4, r8
 80060ee:	4b27      	ldr	r3, [pc, #156]	@ (800618c <D64_1CH_HTONS_VOL_HP+0x188>)
 80060f0:	fb2b 5803 	smlad	r8, fp, r3, r5
 80060f4:	fb20 8813 	smladx	r8, r0, r3, r8
 80060f8:	4b25      	ldr	r3, [pc, #148]	@ (8006190 <D64_1CH_HTONS_VOL_HP+0x18c>)
 80060fa:	fb2a 8803 	smlad	r8, sl, r3, r8
 80060fe:	fb27 8813 	smladx	r8, r7, r3, r8
 8006102:	2401      	movs	r4, #1
 8006104:	fb2b fb04 	smuad	fp, fp, r4
 8006108:	4b22      	ldr	r3, [pc, #136]	@ (8006194 <D64_1CH_HTONS_VOL_HP+0x190>)
 800610a:	fb2a ba03 	smlad	sl, sl, r3, fp
 800610e:	4b22      	ldr	r3, [pc, #136]	@ (8006198 <D64_1CH_HTONS_VOL_HP+0x194>)
 8006110:	fb27 a703 	smlad	r7, r7, r3, sl
 8006114:	4b21      	ldr	r3, [pc, #132]	@ (800619c <D64_1CH_HTONS_VOL_HP+0x198>)
 8006116:	fb20 7503 	smlad	r5, r0, r3, r7
 800611a:	9b00      	ldr	r3, [sp, #0]
 800611c:	9802      	ldr	r0, [sp, #8]
 800611e:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 8006122:	4423      	add	r3, r4
 8006124:	1a9a      	subs	r2, r3, r2
 8006126:	17d7      	asrs	r7, r2, #31
 8006128:	fba2 2300 	umull	r2, r3, r2, r0
 800612c:	fb00 3307 	mla	r3, r0, r7, r3
 8006130:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 8006134:	f143 0b00 	adc.w	fp, r3, #0
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 800613e:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8006142:	2700      	movs	r7, #0
 8006144:	fbc3 6702 	smlal	r6, r7, r3, r2
 8006148:	ea4f 034b 	mov.w	r3, fp, lsl #1
 800614c:	10ba      	asrs	r2, r7, #2
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	f302 020f 	ssat	r2, #16, r2
 8006154:	9b03      	ldr	r3, [sp, #12]
 8006156:	f82e 2b02 	strh.w	r2, [lr], #2
 800615a:	459e      	cmp	lr, r3
 800615c:	4622      	mov	r2, r4
 800615e:	f47f af6e 	bne.w	800603e <D64_1CH_HTONS_VOL_HP+0x3a>
 8006162:	9a05      	ldr	r2, [sp, #20]
 8006164:	460b      	mov	r3, r1
 8006166:	61d3      	str	r3, [r2, #28]
 8006168:	9b00      	ldr	r3, [sp, #0]
 800616a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800616e:	9b04      	ldr	r3, [sp, #16]
 8006170:	6193      	str	r3, [r2, #24]
 8006172:	2000      	movs	r0, #0
 8006174:	e9c2 5802 	strd	r5, r8, [r2, #8]
 8006178:	b007      	add	sp, #28
 800617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617e:	bf00      	nop
 8006180:	001c0015 	.word	0x001c0015
 8006184:	000f000a 	.word	0x000f000a
 8006188:	00060003 	.word	0x00060003
 800618c:	0024002a 	.word	0x0024002a
 8006190:	002e0030 	.word	0x002e0030
 8006194:	00030006 	.word	0x00030006
 8006198:	000a000f 	.word	0x000a000f
 800619c:	0015001c 	.word	0x0015001c
 80061a0:	2000000c 	.word	0x2000000c

080061a4 <D80_1CH_HTONS_VOL_HP>:
 80061a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	4615      	mov	r5, r2
 80061aa:	b089      	sub	sp, #36	@ 0x24
 80061ac:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 80061b0:	692b      	ldr	r3, [r5, #16]
 80061b2:	9301      	str	r3, [sp, #4]
 80061b4:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 80061b8:	9400      	str	r4, [sp, #0]
 80061ba:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80061bc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80061be:	9403      	str	r4, [sp, #12]
 80061c0:	6a2c      	ldr	r4, [r5, #32]
 80061c2:	9306      	str	r3, [sp, #24]
 80061c4:	9404      	str	r4, [sp, #16]
 80061c6:	69eb      	ldr	r3, [r5, #28]
 80061c8:	2a00      	cmp	r2, #0
 80061ca:	f000 80d3 	beq.w	8006374 <D80_1CH_HTONS_VOL_HP+0x1d0>
 80061ce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80061d2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80061d6:	9205      	str	r2, [sp, #20]
 80061d8:	4c67      	ldr	r4, [pc, #412]	@ (8006378 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 80061da:	9507      	str	r5, [sp, #28]
 80061dc:	1e8a      	subs	r2, r1, #2
 80061de:	9202      	str	r2, [sp, #8]
 80061e0:	469b      	mov	fp, r3
 80061e2:	6807      	ldr	r7, [r0, #0]
 80061e4:	6842      	ldr	r2, [r0, #4]
 80061e6:	6883      	ldr	r3, [r0, #8]
 80061e8:	300a      	adds	r0, #10
 80061ea:	ba7f      	rev16	r7, r7
 80061ec:	ba52      	rev16	r2, r2
 80061ee:	ba5b      	rev16	r3, r3
 80061f0:	b2fd      	uxtb	r5, r7
 80061f2:	f3c7 2107 	ubfx	r1, r7, #8, #8
 80061f6:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 80061fa:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80061fe:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8006202:	44f3      	add	fp, lr
 8006204:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8006208:	0e3f      	lsrs	r7, r7, #24
 800620a:	fa5f fe82 	uxtb.w	lr, r2
 800620e:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8006212:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 8006216:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800621a:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 800621e:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8006222:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8006226:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 800622a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 800622e:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 8006232:	0e12      	lsrs	r2, r2, #24
 8006234:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8006238:	fa5f fe83 	uxtb.w	lr, r3
 800623c:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 8006240:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006244:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8006248:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800624c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8006250:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8006254:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8006258:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 800625c:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8006260:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006264:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006268:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800626c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8006270:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006274:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8006278:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800627c:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 8006280:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006284:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006288:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800628c:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8006290:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8006294:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8006298:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 800629c:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80062a0:	4b36      	ldr	r3, [pc, #216]	@ (800637c <D80_1CH_HTONS_VOL_HP+0x1d8>)
 80062a2:	9a00      	ldr	r2, [sp, #0]
 80062a4:	fb21 2303 	smlad	r3, r1, r3, r2
 80062a8:	4a35      	ldr	r2, [pc, #212]	@ (8006380 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 80062aa:	fb27 3302 	smlad	r3, r7, r2, r3
 80062ae:	4a35      	ldr	r2, [pc, #212]	@ (8006384 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80062b0:	fb25 3302 	smlad	r3, r5, r2, r3
 80062b4:	4a34      	ldr	r2, [pc, #208]	@ (8006388 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80062b6:	fb28 3302 	smlad	r3, r8, r2, r3
 80062ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80062be:	fb2e 3302 	smlad	r3, lr, r2, r3
 80062c2:	4a32      	ldr	r2, [pc, #200]	@ (800638c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80062c4:	fb21 cc02 	smlad	ip, r1, r2, ip
 80062c8:	4a31      	ldr	r2, [pc, #196]	@ (8006390 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80062ca:	fb27 cc02 	smlad	ip, r7, r2, ip
 80062ce:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 80062d2:	fb25 c909 	smlad	r9, r5, r9, ip
 80062d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006394 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80062d8:	fb28 9902 	smlad	r9, r8, r2, r9
 80062dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006398 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80062de:	fb2e 9202 	smlad	r2, lr, r2, r9
 80062e2:	f04f 0a01 	mov.w	sl, #1
 80062e6:	9200      	str	r2, [sp, #0]
 80062e8:	fb21 fa0a 	smuad	sl, r1, sl
 80062ec:	4a2b      	ldr	r2, [pc, #172]	@ (800639c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80062ee:	fb27 a702 	smlad	r7, r7, r2, sl
 80062f2:	4a2b      	ldr	r2, [pc, #172]	@ (80063a0 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80062f4:	fb25 7702 	smlad	r7, r5, r2, r7
 80062f8:	4a2a      	ldr	r2, [pc, #168]	@ (80063a4 <D80_1CH_HTONS_VOL_HP+0x200>)
 80062fa:	fb28 7202 	smlad	r2, r8, r2, r7
 80062fe:	4d2a      	ldr	r5, [pc, #168]	@ (80063a8 <D80_1CH_HTONS_VOL_HP+0x204>)
 8006300:	fb2e 2c05 	smlad	ip, lr, r5, r2
 8006304:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	9903      	ldr	r1, [sp, #12]
 800630c:	4413      	add	r3, r2
 800630e:	1b9e      	subs	r6, r3, r6
 8006310:	9b04      	ldr	r3, [sp, #16]
 8006312:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8006316:	fba6 5603 	umull	r5, r6, r6, r3
 800631a:	fb03 6309 	mla	r3, r3, r9, r6
 800631e:	462e      	mov	r6, r5
 8006320:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8006324:	f143 0700 	adc.w	r7, r3, #0
 8006328:	02bb      	lsls	r3, r7, #10
 800632a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800632e:	f04f 0900 	mov.w	r9, #0
 8006332:	fbc1 8903 	smlal	r8, r9, r1, r3
 8006336:	9902      	ldr	r1, [sp, #8]
 8006338:	007b      	lsls	r3, r7, #1
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8006340:	f303 030f 	ssat	r3, #16, r3
 8006344:	f821 3f02 	strh.w	r3, [r1, #2]!
 8006348:	9b05      	ldr	r3, [sp, #20]
 800634a:	9102      	str	r1, [sp, #8]
 800634c:	4283      	cmp	r3, r0
 800634e:	4616      	mov	r6, r2
 8006350:	f47f af47 	bne.w	80061e2 <D80_1CH_HTONS_VOL_HP+0x3e>
 8006354:	9d07      	ldr	r5, [sp, #28]
 8006356:	465b      	mov	r3, fp
 8006358:	61eb      	str	r3, [r5, #28]
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	9900      	ldr	r1, [sp, #0]
 800635e:	f8c5 c008 	str.w	ip, [r5, #8]
 8006362:	e9c5 3204 	strd	r3, r2, [r5, #16]
 8006366:	9b06      	ldr	r3, [sp, #24]
 8006368:	60e9      	str	r1, [r5, #12]
 800636a:	2000      	movs	r0, #0
 800636c:	61ab      	str	r3, [r5, #24]
 800636e:	b009      	add	sp, #36	@ 0x24
 8006370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006374:	4632      	mov	r2, r6
 8006376:	e7ef      	b.n	8006358 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8006378:	2000000c 	.word	0x2000000c
 800637c:	002d0024 	.word	0x002d0024
 8006380:	001c0015 	.word	0x001c0015
 8006384:	000f000a 	.word	0x000f000a
 8006388:	00060003 	.word	0x00060003
 800638c:	0037003f 	.word	0x0037003f
 8006390:	00450049 	.word	0x00450049
 8006394:	00490045 	.word	0x00490045
 8006398:	003f0037 	.word	0x003f0037
 800639c:	00030006 	.word	0x00030006
 80063a0:	000a000f 	.word	0x000a000f
 80063a4:	0015001c 	.word	0x0015001c
 80063a8:	0024002d 	.word	0x0024002d

080063ac <D128_1CH_HTONS_VOL_HP>:
 80063ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b0:	b093      	sub	sp, #76	@ 0x4c
 80063b2:	6914      	ldr	r4, [r2, #16]
 80063b4:	9404      	str	r4, [sp, #16]
 80063b6:	6954      	ldr	r4, [r2, #20]
 80063b8:	9406      	str	r4, [sp, #24]
 80063ba:	6994      	ldr	r4, [r2, #24]
 80063bc:	9410      	str	r4, [sp, #64]	@ 0x40
 80063be:	6894      	ldr	r4, [r2, #8]
 80063c0:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80063c2:	9403      	str	r4, [sp, #12]
 80063c4:	68d4      	ldr	r4, [r2, #12]
 80063c6:	9211      	str	r2, [sp, #68]	@ 0x44
 80063c8:	69d6      	ldr	r6, [r2, #28]
 80063ca:	9402      	str	r4, [sp, #8]
 80063cc:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80063ce:	6a12      	ldr	r2, [r2, #32]
 80063d0:	940d      	str	r4, [sp, #52]	@ 0x34
 80063d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 814a 	beq.w	800666e <D128_1CH_HTONS_VOL_HP+0x2c2>
 80063da:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80063de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063e0:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 80066ac <D128_1CH_HTONS_VOL_HP+0x300>
 80063e4:	9107      	str	r1, [sp, #28]
 80063e6:	f100 0310 	add.w	r3, r0, #16
 80063ea:	469b      	mov	fp, r3
 80063ec:	9605      	str	r6, [sp, #20]
 80063ee:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 80063f2:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 80063f6:	ba49      	rev16	r1, r1
 80063f8:	ba52      	rev16	r2, r2
 80063fa:	ba5b      	rev16	r3, r3
 80063fc:	fa90 fa90 	rev16.w	sl, r0
 8006400:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006404:	b2cc      	uxtb	r4, r1
 8006406:	9e05      	ldr	r6, [sp, #20]
 8006408:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800640c:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8006410:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8006414:	0e09      	lsrs	r1, r1, #24
 8006416:	4426      	add	r6, r4
 8006418:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800641c:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8006420:	b2d0      	uxtb	r0, r2
 8006422:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8006426:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800642a:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 800642e:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8006432:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 8006436:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800643a:	0e12      	lsrs	r2, r2, #24
 800643c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8006440:	9401      	str	r4, [sp, #4]
 8006442:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 8006446:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800644a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800644e:	9705      	str	r7, [sp, #20]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8006456:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 800645a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800645e:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8006462:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 8006466:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800646a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800646e:	0e1b      	lsrs	r3, r3, #24
 8006470:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8006474:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8006478:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800647c:	fa5f f38a 	uxtb.w	r3, sl
 8006480:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006484:	960a      	str	r6, [sp, #40]	@ 0x28
 8006486:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800648a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800648e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006492:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8006496:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006498:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800649c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80064a0:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80064a4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80064a8:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80064ac:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80064b0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80064b4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80064b8:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80064bc:	9308      	str	r3, [sp, #32]
 80064be:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80064c2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80064c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80064c8:	9b01      	ldr	r3, [sp, #4]
 80064ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064cc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80064d0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80064d4:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 80064d8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80064dc:	9b05      	ldr	r3, [sp, #20]
 80064de:	f8cd 9014 	str.w	r9, [sp, #20]
 80064e2:	4691      	mov	r9, r2
 80064e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064e6:	f8cd a004 	str.w	sl, [sp, #4]
 80064ea:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 80064ee:	9a01      	ldr	r2, [sp, #4]
 80064f0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80064f4:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 80064f8:	9b08      	ldr	r3, [sp, #32]
 80064fa:	9a05      	ldr	r2, [sp, #20]
 80064fc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006500:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006504:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006506:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800650a:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800650e:	9201      	str	r2, [sp, #4]
 8006510:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006512:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006516:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800651a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800651e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006522:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006526:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800652a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800652e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8006532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006536:	0a92      	lsrs	r2, r2, #10
 8006538:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 800653c:	9205      	str	r2, [sp, #20]
 800653e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8006542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006546:	4d4b      	ldr	r5, [pc, #300]	@ (8006674 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8006548:	9a02      	ldr	r2, [sp, #8]
 800654a:	fb29 2505 	smlad	r5, r9, r5, r2
 800654e:	4a4a      	ldr	r2, [pc, #296]	@ (8006678 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8006550:	fb2a 5502 	smlad	r5, sl, r2, r5
 8006554:	4a49      	ldr	r2, [pc, #292]	@ (800667c <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8006556:	fb21 5502 	smlad	r5, r1, r2, r5
 800655a:	4a49      	ldr	r2, [pc, #292]	@ (8006680 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800655c:	fb24 5502 	smlad	r5, r4, r2, r5
 8006560:	4a48      	ldr	r2, [pc, #288]	@ (8006684 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8006562:	9e01      	ldr	r6, [sp, #4]
 8006564:	fb26 5502 	smlad	r5, r6, r2, r5
 8006568:	4a47      	ldr	r2, [pc, #284]	@ (8006688 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800656a:	fb20 5502 	smlad	r5, r0, r2, r5
 800656e:	4a47      	ldr	r2, [pc, #284]	@ (800668c <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8006570:	fb23 5502 	smlad	r5, r3, r2, r5
 8006574:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8006578:	fb27 520c 	smlad	r2, r7, ip, r5
 800657c:	4616      	mov	r6, r2
 800657e:	9d03      	ldr	r5, [sp, #12]
 8006580:	4a43      	ldr	r2, [pc, #268]	@ (8006690 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8006582:	fb29 5c02 	smlad	ip, r9, r2, r5
 8006586:	4a43      	ldr	r2, [pc, #268]	@ (8006694 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8006588:	fb2a ce02 	smlad	lr, sl, r2, ip
 800658c:	f8df c120 	ldr.w	ip, [pc, #288]	@ 80066b0 <D128_1CH_HTONS_VOL_HP+0x304>
 8006590:	fb21 ec0c 	smlad	ip, r1, ip, lr
 8006594:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 80066b4 <D128_1CH_HTONS_VOL_HP+0x308>
 8006598:	fb24 cc0e 	smlad	ip, r4, lr, ip
 800659c:	f8df e118 	ldr.w	lr, [pc, #280]	@ 80066b8 <D128_1CH_HTONS_VOL_HP+0x30c>
 80065a0:	9d01      	ldr	r5, [sp, #4]
 80065a2:	fb25 ce0e 	smlad	lr, r5, lr, ip
 80065a6:	f8df c114 	ldr.w	ip, [pc, #276]	@ 80066bc <D128_1CH_HTONS_VOL_HP+0x310>
 80065aa:	fb20 ee0c 	smlad	lr, r0, ip, lr
 80065ae:	f8df c110 	ldr.w	ip, [pc, #272]	@ 80066c0 <D128_1CH_HTONS_VOL_HP+0x314>
 80065b2:	fb23 ec0c 	smlad	ip, r3, ip, lr
 80065b6:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 80066c4 <D128_1CH_HTONS_VOL_HP+0x318>
 80065ba:	fb27 c20e 	smlad	r2, r7, lr, ip
 80065be:	f04f 0c01 	mov.w	ip, #1
 80065c2:	9202      	str	r2, [sp, #8]
 80065c4:	fb29 fc0c 	smuad	ip, r9, ip
 80065c8:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 80066c8 <D128_1CH_HTONS_VOL_HP+0x31c>
 80065cc:	fb2a ca09 	smlad	sl, sl, r9, ip
 80065d0:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 80066cc <D128_1CH_HTONS_VOL_HP+0x320>
 80065d4:	fb21 a909 	smlad	r9, r1, r9, sl
 80065d8:	492f      	ldr	r1, [pc, #188]	@ (8006698 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80065da:	fb24 9901 	smlad	r9, r4, r1, r9
 80065de:	492f      	ldr	r1, [pc, #188]	@ (800669c <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80065e0:	fb25 9901 	smlad	r9, r5, r1, r9
 80065e4:	492e      	ldr	r1, [pc, #184]	@ (80066a0 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80065e6:	fb20 9901 	smlad	r9, r0, r1, r9
 80065ea:	492e      	ldr	r1, [pc, #184]	@ (80066a4 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80065ec:	fb23 9301 	smlad	r3, r3, r1, r9
 80065f0:	482d      	ldr	r0, [pc, #180]	@ (80066a8 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80065f2:	fb27 3300 	smlad	r3, r7, r0, r3
 80065f6:	9303      	str	r3, [sp, #12]
 80065f8:	9b04      	ldr	r3, [sp, #16]
 80065fa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80065fc:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 8006600:	442b      	add	r3, r5
 8006602:	461a      	mov	r2, r3
 8006604:	9b06      	ldr	r3, [sp, #24]
 8006606:	9506      	str	r5, [sp, #24]
 8006608:	1ad2      	subs	r2, r2, r3
 800660a:	17d1      	asrs	r1, r2, #31
 800660c:	fba2 2304 	umull	r2, r3, r2, r4
 8006610:	fb04 3301 	mla	r3, r4, r1, r3
 8006614:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 8006618:	f143 0a00 	adc.w	sl, r3, #0
 800661c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800661e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8006622:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006626:	2100      	movs	r1, #0
 8006628:	fbc3 0102 	smlal	r0, r1, r3, r2
 800662c:	9b07      	ldr	r3, [sp, #28]
 800662e:	108a      	asrs	r2, r1, #2
 8006630:	f302 020f 	ssat	r2, #16, r2
 8006634:	f823 2b02 	strh.w	r2, [r3], #2
 8006638:	ea4f 024a 	mov.w	r2, sl, lsl #1
 800663c:	9204      	str	r2, [sp, #16]
 800663e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006640:	9307      	str	r3, [sp, #28]
 8006642:	4293      	cmp	r3, r2
 8006644:	f10b 0b10 	add.w	fp, fp, #16
 8006648:	f47f aed1 	bne.w	80063ee <D128_1CH_HTONS_VOL_HP+0x42>
 800664c:	9e05      	ldr	r6, [sp, #20]
 800664e:	4629      	mov	r1, r5
 8006650:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006652:	9803      	ldr	r0, [sp, #12]
 8006654:	6098      	str	r0, [r3, #8]
 8006656:	9802      	ldr	r0, [sp, #8]
 8006658:	60d8      	str	r0, [r3, #12]
 800665a:	9804      	ldr	r0, [sp, #16]
 800665c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800665e:	61de      	str	r6, [r3, #28]
 8006660:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006664:	2000      	movs	r0, #0
 8006666:	619a      	str	r2, [r3, #24]
 8006668:	b013      	add	sp, #76	@ 0x4c
 800666a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666e:	9906      	ldr	r1, [sp, #24]
 8006670:	e7ee      	b.n	8006650 <D128_1CH_HTONS_VOL_HP+0x2a4>
 8006672:	bf00      	nop
 8006674:	00780069 	.word	0x00780069
 8006678:	005b004e 	.word	0x005b004e
 800667c:	00420037 	.word	0x00420037
 8006680:	002d0024 	.word	0x002d0024
 8006684:	001c0015 	.word	0x001c0015
 8006688:	000f000a 	.word	0x000f000a
 800668c:	00060003 	.word	0x00060003
 8006690:	00880096 	.word	0x00880096
 8006694:	00a200ac 	.word	0x00a200ac
 8006698:	0015001c 	.word	0x0015001c
 800669c:	0024002d 	.word	0x0024002d
 80066a0:	00370042 	.word	0x00370042
 80066a4:	004e005b 	.word	0x004e005b
 80066a8:	00690078 	.word	0x00690078
 80066ac:	2000000c 	.word	0x2000000c
 80066b0:	00b400ba 	.word	0x00b400ba
 80066b4:	00be00c0 	.word	0x00be00c0
 80066b8:	00c000be 	.word	0x00c000be
 80066bc:	00ba00b4 	.word	0x00ba00b4
 80066c0:	00ac00a2 	.word	0x00ac00a2
 80066c4:	00960088 	.word	0x00960088
 80066c8:	00030006 	.word	0x00030006
 80066cc:	000a000f 	.word	0x000a000f

080066d0 <PDM_Filter_Init>:
 80066d0:	4a59      	ldr	r2, [pc, #356]	@ (8006838 <PDM_Filter_Init+0x168>)
 80066d2:	495a      	ldr	r1, [pc, #360]	@ (800683c <PDM_Filter_Init+0x16c>)
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	680b      	ldr	r3, [r1, #0]
 80066e0:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80066e4:	4013      	ands	r3, r2
 80066e6:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80066ea:	42ab      	cmp	r3, r5
 80066ec:	4604      	mov	r4, r0
 80066ee:	d044      	beq.n	800677a <PDM_Filter_Init+0xaa>
 80066f0:	680b      	ldr	r3, [r1, #0]
 80066f2:	f24c 2170 	movw	r1, #49776	@ 0xc270
 80066f6:	401a      	ands	r2, r3
 80066f8:	428a      	cmp	r2, r1
 80066fa:	d03e      	beq.n	800677a <PDM_Filter_Init+0xaa>
 80066fc:	4b50      	ldr	r3, [pc, #320]	@ (8006840 <PDM_Filter_Init+0x170>)
 80066fe:	2201      	movs	r2, #1
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	6819      	ldr	r1, [r3, #0]
 8006704:	2900      	cmp	r1, #0
 8006706:	d1fc      	bne.n	8006702 <PDM_Filter_Init+0x32>
 8006708:	4b4e      	ldr	r3, [pc, #312]	@ (8006844 <PDM_Filter_Init+0x174>)
 800670a:	4a4f      	ldr	r2, [pc, #316]	@ (8006848 <PDM_Filter_Init+0x178>)
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b4e      	ldr	r3, [pc, #312]	@ (800684c <PDM_Filter_Init+0x17c>)
 8006712:	429a      	cmp	r2, r3
 8006714:	f104 000c 	add.w	r0, r4, #12
 8006718:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800671c:	d047      	beq.n	80067ae <PDM_Filter_Init+0xde>
 800671e:	f000 fb1c 	bl	8006d5a <memset>
 8006722:	2300      	movs	r3, #0
 8006724:	6463      	str	r3, [r4, #68]	@ 0x44
 8006726:	8820      	ldrh	r0, [r4, #0]
 8006728:	8963      	ldrh	r3, [r4, #10]
 800672a:	8922      	ldrh	r2, [r4, #8]
 800672c:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800672e:	2801      	cmp	r0, #1
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	61a3      	str	r3, [r4, #24]
 8006736:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800673a:	60e3      	str	r3, [r4, #12]
 800673c:	6263      	str	r3, [r4, #36]	@ 0x24
 800673e:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8006742:	6423      	str	r3, [r4, #64]	@ 0x40
 8006744:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8006746:	d93a      	bls.n	80067be <PDM_Filter_Init+0xee>
 8006748:	2003      	movs	r0, #3
 800674a:	2302      	movs	r3, #2
 800674c:	8862      	ldrh	r2, [r4, #2]
 800674e:	2a01      	cmp	r2, #1
 8006750:	d932      	bls.n	80067b8 <PDM_Filter_Init+0xe8>
 8006752:	2140      	movs	r1, #64	@ 0x40
 8006754:	2300      	movs	r3, #0
 8006756:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006758:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 800675c:	6862      	ldr	r2, [r4, #4]
 800675e:	bf04      	itt	eq
 8006760:	6421      	streq	r1, [r4, #64]	@ 0x40
 8006762:	460b      	moveq	r3, r1
 8006764:	b11a      	cbz	r2, 800676e <PDM_Filter_Init+0x9e>
 8006766:	f043 0310 	orr.w	r3, r3, #16
 800676a:	6423      	str	r3, [r4, #64]	@ 0x40
 800676c:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800676e:	2200      	movs	r2, #0
 8006770:	8722      	strh	r2, [r4, #56]	@ 0x38
 8006772:	b908      	cbnz	r0, 8006778 <PDM_Filter_Init+0xa8>
 8006774:	3380      	adds	r3, #128	@ 0x80
 8006776:	6423      	str	r3, [r4, #64]	@ 0x40
 8006778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800677a:	4b35      	ldr	r3, [pc, #212]	@ (8006850 <PDM_Filter_Init+0x180>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1bc      	bne.n	80066fc <PDM_Filter_Init+0x2c>
 8006782:	4a34      	ldr	r2, [pc, #208]	@ (8006854 <PDM_Filter_Init+0x184>)
 8006784:	6813      	ldr	r3, [r2, #0]
 8006786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800678a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800678e:	d006      	beq.n	800679e <PDM_Filter_Init+0xce>
 8006790:	6813      	ldr	r3, [r2, #0]
 8006792:	f240 4283 	movw	r2, #1155	@ 0x483
 8006796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800679a:	4293      	cmp	r3, r2
 800679c:	d1ae      	bne.n	80066fc <PDM_Filter_Init+0x2c>
 800679e:	4b2e      	ldr	r3, [pc, #184]	@ (8006858 <PDM_Filter_Init+0x188>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	6819      	ldr	r1, [r3, #0]
 80067a6:	2900      	cmp	r1, #0
 80067a8:	d1fc      	bne.n	80067a4 <PDM_Filter_Init+0xd4>
 80067aa:	4b2c      	ldr	r3, [pc, #176]	@ (800685c <PDM_Filter_Init+0x18c>)
 80067ac:	e7ad      	b.n	800670a <PDM_Filter_Init+0x3a>
 80067ae:	f000 fad4 	bl	8006d5a <memset>
 80067b2:	4b26      	ldr	r3, [pc, #152]	@ (800684c <PDM_Filter_Init+0x17c>)
 80067b4:	6463      	str	r3, [r4, #68]	@ 0x44
 80067b6:	e7b6      	b.n	8006726 <PDM_Filter_Init+0x56>
 80067b8:	d038      	beq.n	800682c <PDM_Filter_Init+0x15c>
 80067ba:	4618      	mov	r0, r3
 80067bc:	e7c9      	b.n	8006752 <PDM_Filter_Init+0x82>
 80067be:	4d28      	ldr	r5, [pc, #160]	@ (8006860 <PDM_Filter_Init+0x190>)
 80067c0:	782a      	ldrb	r2, [r5, #0]
 80067c2:	d01a      	beq.n	80067fa <PDM_Filter_Init+0x12a>
 80067c4:	2a01      	cmp	r2, #1
 80067c6:	d001      	beq.n	80067cc <PDM_Filter_Init+0xfc>
 80067c8:	2001      	movs	r0, #1
 80067ca:	e7bf      	b.n	800674c <PDM_Filter_Init+0x7c>
 80067cc:	4925      	ldr	r1, [pc, #148]	@ (8006864 <PDM_Filter_Init+0x194>)
 80067ce:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 800686c <PDM_Filter_Init+0x19c>
 80067d2:	4f25      	ldr	r7, [pc, #148]	@ (8006868 <PDM_Filter_Init+0x198>)
 80067d4:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 80067d8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80067dc:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 80067e0:	ea02 0007 	and.w	r0, r2, r7
 80067e4:	4303      	orrs	r3, r0
 80067e6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80067ea:	4413      	add	r3, r2
 80067ec:	428e      	cmp	r6, r1
 80067ee:	600b      	str	r3, [r1, #0]
 80067f0:	d1f2      	bne.n	80067d8 <PDM_Filter_Init+0x108>
 80067f2:	2300      	movs	r3, #0
 80067f4:	702b      	strb	r3, [r5, #0]
 80067f6:	2001      	movs	r0, #1
 80067f8:	e7a8      	b.n	800674c <PDM_Filter_Init+0x7c>
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	d1a6      	bne.n	800674c <PDM_Filter_Init+0x7c>
 80067fe:	4919      	ldr	r1, [pc, #100]	@ (8006864 <PDM_Filter_Init+0x194>)
 8006800:	f8df c068 	ldr.w	ip, [pc, #104]	@ 800686c <PDM_Filter_Init+0x19c>
 8006804:	4f18      	ldr	r7, [pc, #96]	@ (8006868 <PDM_Filter_Init+0x198>)
 8006806:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 800680a:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800680e:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 8006812:	ea02 0007 	and.w	r0, r2, r7
 8006816:	4303      	orrs	r3, r0
 8006818:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800681c:	4413      	add	r3, r2
 800681e:	428e      	cmp	r6, r1
 8006820:	600b      	str	r3, [r1, #0]
 8006822:	d1f2      	bne.n	800680a <PDM_Filter_Init+0x13a>
 8006824:	2001      	movs	r0, #1
 8006826:	7028      	strb	r0, [r5, #0]
 8006828:	2300      	movs	r3, #0
 800682a:	e78f      	b.n	800674c <PDM_Filter_Init+0x7c>
 800682c:	2220      	movs	r2, #32
 800682e:	4618      	mov	r0, r3
 8006830:	6422      	str	r2, [r4, #64]	@ 0x40
 8006832:	4613      	mov	r3, r2
 8006834:	2160      	movs	r1, #96	@ 0x60
 8006836:	e78e      	b.n	8006756 <PDM_Filter_Init+0x86>
 8006838:	e0002000 	.word	0xe0002000
 800683c:	e000ed00 	.word	0xe000ed00
 8006840:	40023008 	.word	0x40023008
 8006844:	40023000 	.word	0x40023000
 8006848:	f407a5c2 	.word	0xf407a5c2
 800684c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006850:	e0042000 	.word	0xe0042000
 8006854:	5c001000 	.word	0x5c001000
 8006858:	58024c08 	.word	0x58024c08
 800685c:	58024c00 	.word	0x58024c00
 8006860:	20000966 	.word	0x20000966
 8006864:	20000008 	.word	0x20000008
 8006868:	000ffc00 	.word	0x000ffc00
 800686c:	3ff00000 	.word	0x3ff00000

08006870 <PDM_Filter_setConfig>:
 8006870:	4b6d      	ldr	r3, [pc, #436]	@ (8006a28 <PDM_Filter_setConfig+0x1b8>)
 8006872:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006874:	429a      	cmp	r2, r3
 8006876:	d12f      	bne.n	80068d8 <PDM_Filter_setConfig+0x68>
 8006878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687a:	880e      	ldrh	r6, [r1, #0]
 800687c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800687e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8006882:	ed2d 8b02 	vpush	{d8}
 8006886:	4604      	mov	r4, r0
 8006888:	1e72      	subs	r2, r6, #1
 800688a:	460d      	mov	r5, r1
 800688c:	2a06      	cmp	r2, #6
 800688e:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006892:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 8006896:	6421      	str	r1, [r4, #64]	@ 0x40
 8006898:	b083      	sub	sp, #12
 800689a:	d904      	bls.n	80068a6 <PDM_Filter_setConfig+0x36>
 800689c:	42b8      	cmp	r0, r7
 800689e:	f000 80bb 	beq.w	8006a18 <PDM_Filter_setConfig+0x1a8>
 80068a2:	2008      	movs	r0, #8
 80068a4:	e01d      	b.n	80068e2 <PDM_Filter_setConfig+0x72>
 80068a6:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 80068a8:	42b2      	cmp	r2, r6
 80068aa:	d070      	beq.n	800698e <PDM_Filter_setConfig+0x11e>
 80068ac:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	4333      	orrs	r3, r6
 80068b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80068ba:	6423      	str	r3, [r4, #64]	@ 0x40
 80068bc:	2a70      	cmp	r2, #112	@ 0x70
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068c6:	d067      	beq.n	8006998 <PDM_Filter_setConfig+0x128>
 80068c8:	2b06      	cmp	r3, #6
 80068ca:	d809      	bhi.n	80068e0 <PDM_Filter_setConfig+0x70>
 80068cc:	e8df f003 	tbb	[pc, r3]
 80068d0:	89868380 	.word	0x89868380
 80068d4:	8f8c      	.short	0x8f8c
 80068d6:	7d          	.byte	0x7d
 80068d7:	00          	.byte	0x00
 80068d8:	2004      	movs	r0, #4
 80068da:	4770      	bx	lr
 80068dc:	4b53      	ldr	r3, [pc, #332]	@ (8006a2c <PDM_Filter_setConfig+0x1bc>)
 80068de:	64a3      	str	r3, [r4, #72]	@ 0x48
 80068e0:	2000      	movs	r0, #0
 80068e2:	f117 0f0c 	cmn.w	r7, #12
 80068e6:	da0a      	bge.n	80068fe <PDM_Filter_setConfig+0x8e>
 80068e8:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 80068ec:	3040      	adds	r0, #64	@ 0x40
 80068ee:	80ab      	strh	r3, [r5, #4]
 80068f0:	886b      	ldrh	r3, [r5, #2]
 80068f2:	8663      	strh	r3, [r4, #50]	@ 0x32
 80068f4:	8626      	strh	r6, [r4, #48]	@ 0x30
 80068f6:	b003      	add	sp, #12
 80068f8:	ecbd 8b02 	vpop	{d8}
 80068fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068fe:	2f33      	cmp	r7, #51	@ 0x33
 8006900:	dc41      	bgt.n	8006986 <PDM_Filter_setConfig+0x116>
 8006902:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006904:	f003 030f 	and.w	r3, r3, #15
 8006908:	3b01      	subs	r3, #1
 800690a:	2b06      	cmp	r3, #6
 800690c:	d858      	bhi.n	80069c0 <PDM_Filter_setConfig+0x150>
 800690e:	4948      	ldr	r1, [pc, #288]	@ (8006a30 <PDM_Filter_setConfig+0x1c0>)
 8006910:	4a48      	ldr	r2, [pc, #288]	@ (8006a34 <PDM_Filter_setConfig+0x1c4>)
 8006912:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8006a38 <PDM_Filter_setConfig+0x1c8>
 8006916:	9001      	str	r0, [sp, #4]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4419      	add	r1, r3
 800691c:	edd1 7a00 	vldr	s15, [r1]
 8006920:	4413      	add	r3, r2
 8006922:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006926:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800692a:	ed93 8a00 	vldr	s16, [r3]
 800692e:	f001 f8af 	bl	8007a90 <powf>
 8006932:	9801      	ldr	r0, [sp, #4]
 8006934:	eef0 8a40 	vmov.f32	s17, s0
 8006938:	ee07 7a10 	vmov	s14, r7
 800693c:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8006a3c <PDM_Filter_setConfig+0x1cc>
 8006940:	9001      	str	r0, [sp, #4]
 8006942:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 8006946:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800694a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800694e:	f001 f89f 	bl	8007a90 <powf>
 8006952:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006956:	ee28 0a00 	vmul.f32	s0, s16, s0
 800695a:	f001 f8fb 	bl	8007b54 <roundf>
 800695e:	9801      	ldr	r0, [sp, #4]
 8006960:	886b      	ldrh	r3, [r5, #2]
 8006962:	8663      	strh	r3, [r4, #50]	@ 0x32
 8006964:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8006968:	8727      	strh	r7, [r4, #56]	@ 0x38
 800696a:	8626      	strh	r6, [r4, #48]	@ 0x30
 800696c:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 8006970:	2800      	cmp	r0, #0
 8006972:	d1c0      	bne.n	80068f6 <PDM_Filter_setConfig+0x86>
 8006974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006976:	2000      	movs	r0, #0
 8006978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800697c:	6423      	str	r3, [r4, #64]	@ 0x40
 800697e:	b003      	add	sp, #12
 8006980:	ecbd 8b02 	vpop	{d8}
 8006984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006986:	2333      	movs	r3, #51	@ 0x33
 8006988:	3040      	adds	r0, #64	@ 0x40
 800698a:	80ab      	strh	r3, [r5, #4]
 800698c:	e7b0      	b.n	80068f0 <PDM_Filter_setConfig+0x80>
 800698e:	42b8      	cmp	r0, r7
 8006990:	d1a6      	bne.n	80068e0 <PDM_Filter_setConfig+0x70>
 8006992:	886b      	ldrh	r3, [r5, #2]
 8006994:	8663      	strh	r3, [r4, #50]	@ 0x32
 8006996:	e7ed      	b.n	8006974 <PDM_Filter_setConfig+0x104>
 8006998:	2b06      	cmp	r3, #6
 800699a:	d8a1      	bhi.n	80068e0 <PDM_Filter_setConfig+0x70>
 800699c:	a201      	add	r2, pc, #4	@ (adr r2, 80069a4 <PDM_Filter_setConfig+0x134>)
 800699e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a2:	bf00      	nop
 80069a4:	08006a13 	.word	0x08006a13
 80069a8:	08006a0d 	.word	0x08006a0d
 80069ac:	08006a01 	.word	0x08006a01
 80069b0:	080069fb 	.word	0x080069fb
 80069b4:	080068dd 	.word	0x080068dd
 80069b8:	080069f5 	.word	0x080069f5
 80069bc:	08006a07 	.word	0x08006a07
 80069c0:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 8006a40 <PDM_Filter_setConfig+0x1d0>
 80069c4:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 8006a44 <PDM_Filter_setConfig+0x1d4>
 80069c8:	e7b6      	b.n	8006938 <PDM_Filter_setConfig+0xc8>
 80069ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006a48 <PDM_Filter_setConfig+0x1d8>)
 80069cc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80069ce:	e787      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 80069d0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a4c <PDM_Filter_setConfig+0x1dc>)
 80069d2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80069d4:	e784      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 80069d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006a50 <PDM_Filter_setConfig+0x1e0>)
 80069d8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80069da:	e781      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 80069dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006a54 <PDM_Filter_setConfig+0x1e4>)
 80069de:	64a3      	str	r3, [r4, #72]	@ 0x48
 80069e0:	e77e      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 80069e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a58 <PDM_Filter_setConfig+0x1e8>)
 80069e4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80069e6:	e77b      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 80069e8:	4b1c      	ldr	r3, [pc, #112]	@ (8006a5c <PDM_Filter_setConfig+0x1ec>)
 80069ea:	64a3      	str	r3, [r4, #72]	@ 0x48
 80069ec:	e778      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 80069ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006a60 <PDM_Filter_setConfig+0x1f0>)
 80069f0:	64a3      	str	r3, [r4, #72]	@ 0x48
 80069f2:	e775      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 80069f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a64 <PDM_Filter_setConfig+0x1f4>)
 80069f6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80069f8:	e772      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 80069fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006a68 <PDM_Filter_setConfig+0x1f8>)
 80069fc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80069fe:	e76f      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 8006a00:	4b1a      	ldr	r3, [pc, #104]	@ (8006a6c <PDM_Filter_setConfig+0x1fc>)
 8006a02:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006a04:	e76c      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 8006a06:	4b1a      	ldr	r3, [pc, #104]	@ (8006a70 <PDM_Filter_setConfig+0x200>)
 8006a08:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006a0a:	e769      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 8006a0c:	4b19      	ldr	r3, [pc, #100]	@ (8006a74 <PDM_Filter_setConfig+0x204>)
 8006a0e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006a10:	e766      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 8006a12:	4b19      	ldr	r3, [pc, #100]	@ (8006a78 <PDM_Filter_setConfig+0x208>)
 8006a14:	64a3      	str	r3, [r4, #72]	@ 0x48
 8006a16:	e763      	b.n	80068e0 <PDM_Filter_setConfig+0x70>
 8006a18:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8006a1a:	42b3      	cmp	r3, r6
 8006a1c:	f47f af41 	bne.w	80068a2 <PDM_Filter_setConfig+0x32>
 8006a20:	886b      	ldrh	r3, [r5, #2]
 8006a22:	8663      	strh	r3, [r4, #50]	@ 0x32
 8006a24:	2008      	movs	r0, #8
 8006a26:	e766      	b.n	80068f6 <PDM_Filter_setConfig+0x86>
 8006a28:	b5e8b5cd 	.word	0xb5e8b5cd
 8006a2c:	08005b51 	.word	0x08005b51
 8006a30:	080082a4 	.word	0x080082a4
 8006a34:	080082c0 	.word	0x080082c0
 8006a38:	42000000 	.word	0x42000000
 8006a3c:	3d4ccccd 	.word	0x3d4ccccd
 8006a40:	4f800000 	.word	0x4f800000
 8006a44:	00000000 	.word	0x00000000
 8006a48:	08004f51 	.word	0x08004f51
 8006a4c:	080050d9 	.word	0x080050d9
 8006a50:	080052c1 	.word	0x080052c1
 8006a54:	080054dd 	.word	0x080054dd
 8006a58:	08005771 	.word	0x08005771
 8006a5c:	08004cb1 	.word	0x08004cb1
 8006a60:	08004dc9 	.word	0x08004dc9
 8006a64:	08005c39 	.word	0x08005c39
 8006a68:	080063ad 	.word	0x080063ad
 8006a6c:	080061a5 	.word	0x080061a5
 8006a70:	08005d7d 	.word	0x08005d7d
 8006a74:	08006005 	.word	0x08006005
 8006a78:	08005e99 	.word	0x08005e99

08006a7c <PDM_Filter>:
 8006a7c:	b410      	push	{r4}
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006aac <PDM_Filter+0x30>)
 8006a80:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8006a82:	429c      	cmp	r4, r3
 8006a84:	d107      	bne.n	8006a96 <PDM_Filter+0x1a>
 8006a86:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8006a88:	05dc      	lsls	r4, r3, #23
 8006a8a:	d508      	bpl.n	8006a9e <PDM_Filter+0x22>
 8006a8c:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8006a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a92:	320c      	adds	r2, #12
 8006a94:	4718      	bx	r3
 8006a96:	2004      	movs	r0, #4
 8006a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006aa2:	bf14      	ite	ne
 8006aa4:	2020      	movne	r0, #32
 8006aa6:	2030      	moveq	r0, #48	@ 0x30
 8006aa8:	e7f6      	b.n	8006a98 <PDM_Filter+0x1c>
 8006aaa:	bf00      	nop
 8006aac:	b5e8b5cd 	.word	0xb5e8b5cd

08006ab0 <rand>:
 8006ab0:	4b16      	ldr	r3, [pc, #88]	@ (8006b0c <rand+0x5c>)
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	681c      	ldr	r4, [r3, #0]
 8006ab6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006ab8:	b9b3      	cbnz	r3, 8006ae8 <rand+0x38>
 8006aba:	2018      	movs	r0, #24
 8006abc:	f000 fa32 	bl	8006f24 <malloc>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6320      	str	r0, [r4, #48]	@ 0x30
 8006ac4:	b920      	cbnz	r0, 8006ad0 <rand+0x20>
 8006ac6:	4b12      	ldr	r3, [pc, #72]	@ (8006b10 <rand+0x60>)
 8006ac8:	4812      	ldr	r0, [pc, #72]	@ (8006b14 <rand+0x64>)
 8006aca:	2152      	movs	r1, #82	@ 0x52
 8006acc:	f000 f9c2 	bl	8006e54 <__assert_func>
 8006ad0:	4911      	ldr	r1, [pc, #68]	@ (8006b18 <rand+0x68>)
 8006ad2:	4b12      	ldr	r3, [pc, #72]	@ (8006b1c <rand+0x6c>)
 8006ad4:	e9c0 1300 	strd	r1, r3, [r0]
 8006ad8:	4b11      	ldr	r3, [pc, #68]	@ (8006b20 <rand+0x70>)
 8006ada:	6083      	str	r3, [r0, #8]
 8006adc:	230b      	movs	r3, #11
 8006ade:	8183      	strh	r3, [r0, #12]
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006ae8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006aea:	480e      	ldr	r0, [pc, #56]	@ (8006b24 <rand+0x74>)
 8006aec:	690b      	ldr	r3, [r1, #16]
 8006aee:	694c      	ldr	r4, [r1, #20]
 8006af0:	4a0d      	ldr	r2, [pc, #52]	@ (8006b28 <rand+0x78>)
 8006af2:	4358      	muls	r0, r3
 8006af4:	fb02 0004 	mla	r0, r2, r4, r0
 8006af8:	fba3 3202 	umull	r3, r2, r3, r2
 8006afc:	3301      	adds	r3, #1
 8006afe:	eb40 0002 	adc.w	r0, r0, r2
 8006b02:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006b06:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006b0a:	bd10      	pop	{r4, pc}
 8006b0c:	20000418 	.word	0x20000418
 8006b10:	080082dc 	.word	0x080082dc
 8006b14:	080082f3 	.word	0x080082f3
 8006b18:	abcd330e 	.word	0xabcd330e
 8006b1c:	e66d1234 	.word	0xe66d1234
 8006b20:	0005deec 	.word	0x0005deec
 8006b24:	5851f42d 	.word	0x5851f42d
 8006b28:	4c957f2d 	.word	0x4c957f2d

08006b2c <std>:
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	b510      	push	{r4, lr}
 8006b30:	4604      	mov	r4, r0
 8006b32:	e9c0 3300 	strd	r3, r3, [r0]
 8006b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b3a:	6083      	str	r3, [r0, #8]
 8006b3c:	8181      	strh	r1, [r0, #12]
 8006b3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b40:	81c2      	strh	r2, [r0, #14]
 8006b42:	6183      	str	r3, [r0, #24]
 8006b44:	4619      	mov	r1, r3
 8006b46:	2208      	movs	r2, #8
 8006b48:	305c      	adds	r0, #92	@ 0x5c
 8006b4a:	f000 f906 	bl	8006d5a <memset>
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b84 <std+0x58>)
 8006b50:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b52:	4b0d      	ldr	r3, [pc, #52]	@ (8006b88 <std+0x5c>)
 8006b54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b56:	4b0d      	ldr	r3, [pc, #52]	@ (8006b8c <std+0x60>)
 8006b58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b90 <std+0x64>)
 8006b5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b94 <std+0x68>)
 8006b60:	6224      	str	r4, [r4, #32]
 8006b62:	429c      	cmp	r4, r3
 8006b64:	d006      	beq.n	8006b74 <std+0x48>
 8006b66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b6a:	4294      	cmp	r4, r2
 8006b6c:	d002      	beq.n	8006b74 <std+0x48>
 8006b6e:	33d0      	adds	r3, #208	@ 0xd0
 8006b70:	429c      	cmp	r4, r3
 8006b72:	d105      	bne.n	8006b80 <std+0x54>
 8006b74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b7c:	f000 b966 	b.w	8006e4c <__retarget_lock_init_recursive>
 8006b80:	bd10      	pop	{r4, pc}
 8006b82:	bf00      	nop
 8006b84:	08006cd5 	.word	0x08006cd5
 8006b88:	08006cf7 	.word	0x08006cf7
 8006b8c:	08006d2f 	.word	0x08006d2f
 8006b90:	08006d53 	.word	0x08006d53
 8006b94:	20000968 	.word	0x20000968

08006b98 <stdio_exit_handler>:
 8006b98:	4a02      	ldr	r2, [pc, #8]	@ (8006ba4 <stdio_exit_handler+0xc>)
 8006b9a:	4903      	ldr	r1, [pc, #12]	@ (8006ba8 <stdio_exit_handler+0x10>)
 8006b9c:	4803      	ldr	r0, [pc, #12]	@ (8006bac <stdio_exit_handler+0x14>)
 8006b9e:	f000 b869 	b.w	8006c74 <_fwalk_sglue>
 8006ba2:	bf00      	nop
 8006ba4:	2000040c 	.word	0x2000040c
 8006ba8:	08007735 	.word	0x08007735
 8006bac:	2000041c 	.word	0x2000041c

08006bb0 <cleanup_stdio>:
 8006bb0:	6841      	ldr	r1, [r0, #4]
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006be4 <cleanup_stdio+0x34>)
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	b510      	push	{r4, lr}
 8006bb8:	4604      	mov	r4, r0
 8006bba:	d001      	beq.n	8006bc0 <cleanup_stdio+0x10>
 8006bbc:	f000 fdba 	bl	8007734 <_fflush_r>
 8006bc0:	68a1      	ldr	r1, [r4, #8]
 8006bc2:	4b09      	ldr	r3, [pc, #36]	@ (8006be8 <cleanup_stdio+0x38>)
 8006bc4:	4299      	cmp	r1, r3
 8006bc6:	d002      	beq.n	8006bce <cleanup_stdio+0x1e>
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fdb3 	bl	8007734 <_fflush_r>
 8006bce:	68e1      	ldr	r1, [r4, #12]
 8006bd0:	4b06      	ldr	r3, [pc, #24]	@ (8006bec <cleanup_stdio+0x3c>)
 8006bd2:	4299      	cmp	r1, r3
 8006bd4:	d004      	beq.n	8006be0 <cleanup_stdio+0x30>
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bdc:	f000 bdaa 	b.w	8007734 <_fflush_r>
 8006be0:	bd10      	pop	{r4, pc}
 8006be2:	bf00      	nop
 8006be4:	20000968 	.word	0x20000968
 8006be8:	200009d0 	.word	0x200009d0
 8006bec:	20000a38 	.word	0x20000a38

08006bf0 <global_stdio_init.part.0>:
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c20 <global_stdio_init.part.0+0x30>)
 8006bf4:	4c0b      	ldr	r4, [pc, #44]	@ (8006c24 <global_stdio_init.part.0+0x34>)
 8006bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c28 <global_stdio_init.part.0+0x38>)
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2104      	movs	r1, #4
 8006c00:	f7ff ff94 	bl	8006b2c <std>
 8006c04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c08:	2201      	movs	r2, #1
 8006c0a:	2109      	movs	r1, #9
 8006c0c:	f7ff ff8e 	bl	8006b2c <std>
 8006c10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c14:	2202      	movs	r2, #2
 8006c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c1a:	2112      	movs	r1, #18
 8006c1c:	f7ff bf86 	b.w	8006b2c <std>
 8006c20:	20000aa0 	.word	0x20000aa0
 8006c24:	20000968 	.word	0x20000968
 8006c28:	08006b99 	.word	0x08006b99

08006c2c <__sfp_lock_acquire>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	@ (8006c34 <__sfp_lock_acquire+0x8>)
 8006c2e:	f000 b90e 	b.w	8006e4e <__retarget_lock_acquire_recursive>
 8006c32:	bf00      	nop
 8006c34:	20000aa9 	.word	0x20000aa9

08006c38 <__sfp_lock_release>:
 8006c38:	4801      	ldr	r0, [pc, #4]	@ (8006c40 <__sfp_lock_release+0x8>)
 8006c3a:	f000 b909 	b.w	8006e50 <__retarget_lock_release_recursive>
 8006c3e:	bf00      	nop
 8006c40:	20000aa9 	.word	0x20000aa9

08006c44 <__sinit>:
 8006c44:	b510      	push	{r4, lr}
 8006c46:	4604      	mov	r4, r0
 8006c48:	f7ff fff0 	bl	8006c2c <__sfp_lock_acquire>
 8006c4c:	6a23      	ldr	r3, [r4, #32]
 8006c4e:	b11b      	cbz	r3, 8006c58 <__sinit+0x14>
 8006c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c54:	f7ff bff0 	b.w	8006c38 <__sfp_lock_release>
 8006c58:	4b04      	ldr	r3, [pc, #16]	@ (8006c6c <__sinit+0x28>)
 8006c5a:	6223      	str	r3, [r4, #32]
 8006c5c:	4b04      	ldr	r3, [pc, #16]	@ (8006c70 <__sinit+0x2c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1f5      	bne.n	8006c50 <__sinit+0xc>
 8006c64:	f7ff ffc4 	bl	8006bf0 <global_stdio_init.part.0>
 8006c68:	e7f2      	b.n	8006c50 <__sinit+0xc>
 8006c6a:	bf00      	nop
 8006c6c:	08006bb1 	.word	0x08006bb1
 8006c70:	20000aa0 	.word	0x20000aa0

08006c74 <_fwalk_sglue>:
 8006c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c78:	4607      	mov	r7, r0
 8006c7a:	4688      	mov	r8, r1
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	2600      	movs	r6, #0
 8006c80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c84:	f1b9 0901 	subs.w	r9, r9, #1
 8006c88:	d505      	bpl.n	8006c96 <_fwalk_sglue+0x22>
 8006c8a:	6824      	ldr	r4, [r4, #0]
 8006c8c:	2c00      	cmp	r4, #0
 8006c8e:	d1f7      	bne.n	8006c80 <_fwalk_sglue+0xc>
 8006c90:	4630      	mov	r0, r6
 8006c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c96:	89ab      	ldrh	r3, [r5, #12]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d907      	bls.n	8006cac <_fwalk_sglue+0x38>
 8006c9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	d003      	beq.n	8006cac <_fwalk_sglue+0x38>
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	47c0      	blx	r8
 8006caa:	4306      	orrs	r6, r0
 8006cac:	3568      	adds	r5, #104	@ 0x68
 8006cae:	e7e9      	b.n	8006c84 <_fwalk_sglue+0x10>

08006cb0 <iprintf>:
 8006cb0:	b40f      	push	{r0, r1, r2, r3}
 8006cb2:	b507      	push	{r0, r1, r2, lr}
 8006cb4:	4906      	ldr	r1, [pc, #24]	@ (8006cd0 <iprintf+0x20>)
 8006cb6:	ab04      	add	r3, sp, #16
 8006cb8:	6808      	ldr	r0, [r1, #0]
 8006cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cbe:	6881      	ldr	r1, [r0, #8]
 8006cc0:	9301      	str	r3, [sp, #4]
 8006cc2:	f000 fa0f 	bl	80070e4 <_vfiprintf_r>
 8006cc6:	b003      	add	sp, #12
 8006cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ccc:	b004      	add	sp, #16
 8006cce:	4770      	bx	lr
 8006cd0:	20000418 	.word	0x20000418

08006cd4 <__sread>:
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cdc:	f000 f868 	bl	8006db0 <_read_r>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	bfab      	itete	ge
 8006ce4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ce8:	181b      	addge	r3, r3, r0
 8006cea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cee:	bfac      	ite	ge
 8006cf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cf2:	81a3      	strhlt	r3, [r4, #12]
 8006cf4:	bd10      	pop	{r4, pc}

08006cf6 <__swrite>:
 8006cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cfa:	461f      	mov	r7, r3
 8006cfc:	898b      	ldrh	r3, [r1, #12]
 8006cfe:	05db      	lsls	r3, r3, #23
 8006d00:	4605      	mov	r5, r0
 8006d02:	460c      	mov	r4, r1
 8006d04:	4616      	mov	r6, r2
 8006d06:	d505      	bpl.n	8006d14 <__swrite+0x1e>
 8006d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f000 f83c 	bl	8006d8c <_lseek_r>
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	4632      	mov	r2, r6
 8006d22:	463b      	mov	r3, r7
 8006d24:	4628      	mov	r0, r5
 8006d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2a:	f000 b853 	b.w	8006dd4 <_write_r>

08006d2e <__sseek>:
 8006d2e:	b510      	push	{r4, lr}
 8006d30:	460c      	mov	r4, r1
 8006d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d36:	f000 f829 	bl	8006d8c <_lseek_r>
 8006d3a:	1c43      	adds	r3, r0, #1
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	bf15      	itete	ne
 8006d40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d4a:	81a3      	strheq	r3, [r4, #12]
 8006d4c:	bf18      	it	ne
 8006d4e:	81a3      	strhne	r3, [r4, #12]
 8006d50:	bd10      	pop	{r4, pc}

08006d52 <__sclose>:
 8006d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d56:	f000 b809 	b.w	8006d6c <_close_r>

08006d5a <memset>:
 8006d5a:	4402      	add	r2, r0
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d100      	bne.n	8006d64 <memset+0xa>
 8006d62:	4770      	bx	lr
 8006d64:	f803 1b01 	strb.w	r1, [r3], #1
 8006d68:	e7f9      	b.n	8006d5e <memset+0x4>
	...

08006d6c <_close_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	4d06      	ldr	r5, [pc, #24]	@ (8006d88 <_close_r+0x1c>)
 8006d70:	2300      	movs	r3, #0
 8006d72:	4604      	mov	r4, r0
 8006d74:	4608      	mov	r0, r1
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7fa faf4 	bl	8001364 <_close>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_close_r+0x1a>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_close_r+0x1a>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	20000aa4 	.word	0x20000aa4

08006d8c <_lseek_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4d07      	ldr	r5, [pc, #28]	@ (8006dac <_lseek_r+0x20>)
 8006d90:	4604      	mov	r4, r0
 8006d92:	4608      	mov	r0, r1
 8006d94:	4611      	mov	r1, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	602a      	str	r2, [r5, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f7fa fb09 	bl	80013b2 <_lseek>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_lseek_r+0x1e>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_lseek_r+0x1e>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	20000aa4 	.word	0x20000aa4

08006db0 <_read_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4d07      	ldr	r5, [pc, #28]	@ (8006dd0 <_read_r+0x20>)
 8006db4:	4604      	mov	r4, r0
 8006db6:	4608      	mov	r0, r1
 8006db8:	4611      	mov	r1, r2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	602a      	str	r2, [r5, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f7fa fab3 	bl	800132a <_read>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d102      	bne.n	8006dce <_read_r+0x1e>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b103      	cbz	r3, 8006dce <_read_r+0x1e>
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	20000aa4 	.word	0x20000aa4

08006dd4 <_write_r>:
 8006dd4:	b538      	push	{r3, r4, r5, lr}
 8006dd6:	4d07      	ldr	r5, [pc, #28]	@ (8006df4 <_write_r+0x20>)
 8006dd8:	4604      	mov	r4, r0
 8006dda:	4608      	mov	r0, r1
 8006ddc:	4611      	mov	r1, r2
 8006dde:	2200      	movs	r2, #0
 8006de0:	602a      	str	r2, [r5, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	f7fa f854 	bl	8000e90 <_write>
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d102      	bne.n	8006df2 <_write_r+0x1e>
 8006dec:	682b      	ldr	r3, [r5, #0]
 8006dee:	b103      	cbz	r3, 8006df2 <_write_r+0x1e>
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	20000aa4 	.word	0x20000aa4

08006df8 <__errno>:
 8006df8:	4b01      	ldr	r3, [pc, #4]	@ (8006e00 <__errno+0x8>)
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	20000418 	.word	0x20000418

08006e04 <__libc_init_array>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	4d0d      	ldr	r5, [pc, #52]	@ (8006e3c <__libc_init_array+0x38>)
 8006e08:	4c0d      	ldr	r4, [pc, #52]	@ (8006e40 <__libc_init_array+0x3c>)
 8006e0a:	1b64      	subs	r4, r4, r5
 8006e0c:	10a4      	asrs	r4, r4, #2
 8006e0e:	2600      	movs	r6, #0
 8006e10:	42a6      	cmp	r6, r4
 8006e12:	d109      	bne.n	8006e28 <__libc_init_array+0x24>
 8006e14:	4d0b      	ldr	r5, [pc, #44]	@ (8006e44 <__libc_init_array+0x40>)
 8006e16:	4c0c      	ldr	r4, [pc, #48]	@ (8006e48 <__libc_init_array+0x44>)
 8006e18:	f001 fa26 	bl	8008268 <_init>
 8006e1c:	1b64      	subs	r4, r4, r5
 8006e1e:	10a4      	asrs	r4, r4, #2
 8006e20:	2600      	movs	r6, #0
 8006e22:	42a6      	cmp	r6, r4
 8006e24:	d105      	bne.n	8006e32 <__libc_init_array+0x2e>
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e2c:	4798      	blx	r3
 8006e2e:	3601      	adds	r6, #1
 8006e30:	e7ee      	b.n	8006e10 <__libc_init_array+0xc>
 8006e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e36:	4798      	blx	r3
 8006e38:	3601      	adds	r6, #1
 8006e3a:	e7f2      	b.n	8006e22 <__libc_init_array+0x1e>
 8006e3c:	080083dc 	.word	0x080083dc
 8006e40:	080083dc 	.word	0x080083dc
 8006e44:	080083dc 	.word	0x080083dc
 8006e48:	080083e0 	.word	0x080083e0

08006e4c <__retarget_lock_init_recursive>:
 8006e4c:	4770      	bx	lr

08006e4e <__retarget_lock_acquire_recursive>:
 8006e4e:	4770      	bx	lr

08006e50 <__retarget_lock_release_recursive>:
 8006e50:	4770      	bx	lr
	...

08006e54 <__assert_func>:
 8006e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e56:	4614      	mov	r4, r2
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4b09      	ldr	r3, [pc, #36]	@ (8006e80 <__assert_func+0x2c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4605      	mov	r5, r0
 8006e60:	68d8      	ldr	r0, [r3, #12]
 8006e62:	b14c      	cbz	r4, 8006e78 <__assert_func+0x24>
 8006e64:	4b07      	ldr	r3, [pc, #28]	@ (8006e84 <__assert_func+0x30>)
 8006e66:	9100      	str	r1, [sp, #0]
 8006e68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e6c:	4906      	ldr	r1, [pc, #24]	@ (8006e88 <__assert_func+0x34>)
 8006e6e:	462b      	mov	r3, r5
 8006e70:	f000 fc88 	bl	8007784 <fiprintf>
 8006e74:	f000 fd3c 	bl	80078f0 <abort>
 8006e78:	4b04      	ldr	r3, [pc, #16]	@ (8006e8c <__assert_func+0x38>)
 8006e7a:	461c      	mov	r4, r3
 8006e7c:	e7f3      	b.n	8006e66 <__assert_func+0x12>
 8006e7e:	bf00      	nop
 8006e80:	20000418 	.word	0x20000418
 8006e84:	0800834b 	.word	0x0800834b
 8006e88:	08008358 	.word	0x08008358
 8006e8c:	08008386 	.word	0x08008386

08006e90 <_free_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4605      	mov	r5, r0
 8006e94:	2900      	cmp	r1, #0
 8006e96:	d041      	beq.n	8006f1c <_free_r+0x8c>
 8006e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e9c:	1f0c      	subs	r4, r1, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bfb8      	it	lt
 8006ea2:	18e4      	addlt	r4, r4, r3
 8006ea4:	f000 f8e8 	bl	8007078 <__malloc_lock>
 8006ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f20 <_free_r+0x90>)
 8006eaa:	6813      	ldr	r3, [r2, #0]
 8006eac:	b933      	cbnz	r3, 8006ebc <_free_r+0x2c>
 8006eae:	6063      	str	r3, [r4, #4]
 8006eb0:	6014      	str	r4, [r2, #0]
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006eb8:	f000 b8e4 	b.w	8007084 <__malloc_unlock>
 8006ebc:	42a3      	cmp	r3, r4
 8006ebe:	d908      	bls.n	8006ed2 <_free_r+0x42>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	1821      	adds	r1, r4, r0
 8006ec4:	428b      	cmp	r3, r1
 8006ec6:	bf01      	itttt	eq
 8006ec8:	6819      	ldreq	r1, [r3, #0]
 8006eca:	685b      	ldreq	r3, [r3, #4]
 8006ecc:	1809      	addeq	r1, r1, r0
 8006ece:	6021      	streq	r1, [r4, #0]
 8006ed0:	e7ed      	b.n	8006eae <_free_r+0x1e>
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	b10b      	cbz	r3, 8006edc <_free_r+0x4c>
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d9fa      	bls.n	8006ed2 <_free_r+0x42>
 8006edc:	6811      	ldr	r1, [r2, #0]
 8006ede:	1850      	adds	r0, r2, r1
 8006ee0:	42a0      	cmp	r0, r4
 8006ee2:	d10b      	bne.n	8006efc <_free_r+0x6c>
 8006ee4:	6820      	ldr	r0, [r4, #0]
 8006ee6:	4401      	add	r1, r0
 8006ee8:	1850      	adds	r0, r2, r1
 8006eea:	4283      	cmp	r3, r0
 8006eec:	6011      	str	r1, [r2, #0]
 8006eee:	d1e0      	bne.n	8006eb2 <_free_r+0x22>
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	6053      	str	r3, [r2, #4]
 8006ef6:	4408      	add	r0, r1
 8006ef8:	6010      	str	r0, [r2, #0]
 8006efa:	e7da      	b.n	8006eb2 <_free_r+0x22>
 8006efc:	d902      	bls.n	8006f04 <_free_r+0x74>
 8006efe:	230c      	movs	r3, #12
 8006f00:	602b      	str	r3, [r5, #0]
 8006f02:	e7d6      	b.n	8006eb2 <_free_r+0x22>
 8006f04:	6820      	ldr	r0, [r4, #0]
 8006f06:	1821      	adds	r1, r4, r0
 8006f08:	428b      	cmp	r3, r1
 8006f0a:	bf04      	itt	eq
 8006f0c:	6819      	ldreq	r1, [r3, #0]
 8006f0e:	685b      	ldreq	r3, [r3, #4]
 8006f10:	6063      	str	r3, [r4, #4]
 8006f12:	bf04      	itt	eq
 8006f14:	1809      	addeq	r1, r1, r0
 8006f16:	6021      	streq	r1, [r4, #0]
 8006f18:	6054      	str	r4, [r2, #4]
 8006f1a:	e7ca      	b.n	8006eb2 <_free_r+0x22>
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000ab0 	.word	0x20000ab0

08006f24 <malloc>:
 8006f24:	4b02      	ldr	r3, [pc, #8]	@ (8006f30 <malloc+0xc>)
 8006f26:	4601      	mov	r1, r0
 8006f28:	6818      	ldr	r0, [r3, #0]
 8006f2a:	f000 b825 	b.w	8006f78 <_malloc_r>
 8006f2e:	bf00      	nop
 8006f30:	20000418 	.word	0x20000418

08006f34 <sbrk_aligned>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	4e0f      	ldr	r6, [pc, #60]	@ (8006f74 <sbrk_aligned+0x40>)
 8006f38:	460c      	mov	r4, r1
 8006f3a:	6831      	ldr	r1, [r6, #0]
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	b911      	cbnz	r1, 8006f46 <sbrk_aligned+0x12>
 8006f40:	f000 fcc6 	bl	80078d0 <_sbrk_r>
 8006f44:	6030      	str	r0, [r6, #0]
 8006f46:	4621      	mov	r1, r4
 8006f48:	4628      	mov	r0, r5
 8006f4a:	f000 fcc1 	bl	80078d0 <_sbrk_r>
 8006f4e:	1c43      	adds	r3, r0, #1
 8006f50:	d103      	bne.n	8006f5a <sbrk_aligned+0x26>
 8006f52:	f04f 34ff 	mov.w	r4, #4294967295
 8006f56:	4620      	mov	r0, r4
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
 8006f5a:	1cc4      	adds	r4, r0, #3
 8006f5c:	f024 0403 	bic.w	r4, r4, #3
 8006f60:	42a0      	cmp	r0, r4
 8006f62:	d0f8      	beq.n	8006f56 <sbrk_aligned+0x22>
 8006f64:	1a21      	subs	r1, r4, r0
 8006f66:	4628      	mov	r0, r5
 8006f68:	f000 fcb2 	bl	80078d0 <_sbrk_r>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d1f2      	bne.n	8006f56 <sbrk_aligned+0x22>
 8006f70:	e7ef      	b.n	8006f52 <sbrk_aligned+0x1e>
 8006f72:	bf00      	nop
 8006f74:	20000aac 	.word	0x20000aac

08006f78 <_malloc_r>:
 8006f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f7c:	1ccd      	adds	r5, r1, #3
 8006f7e:	f025 0503 	bic.w	r5, r5, #3
 8006f82:	3508      	adds	r5, #8
 8006f84:	2d0c      	cmp	r5, #12
 8006f86:	bf38      	it	cc
 8006f88:	250c      	movcc	r5, #12
 8006f8a:	2d00      	cmp	r5, #0
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	db01      	blt.n	8006f94 <_malloc_r+0x1c>
 8006f90:	42a9      	cmp	r1, r5
 8006f92:	d904      	bls.n	8006f9e <_malloc_r+0x26>
 8006f94:	230c      	movs	r3, #12
 8006f96:	6033      	str	r3, [r6, #0]
 8006f98:	2000      	movs	r0, #0
 8006f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007074 <_malloc_r+0xfc>
 8006fa2:	f000 f869 	bl	8007078 <__malloc_lock>
 8006fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8006faa:	461c      	mov	r4, r3
 8006fac:	bb44      	cbnz	r4, 8007000 <_malloc_r+0x88>
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f7ff ffbf 	bl	8006f34 <sbrk_aligned>
 8006fb6:	1c43      	adds	r3, r0, #1
 8006fb8:	4604      	mov	r4, r0
 8006fba:	d158      	bne.n	800706e <_malloc_r+0xf6>
 8006fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8006fc0:	4627      	mov	r7, r4
 8006fc2:	2f00      	cmp	r7, #0
 8006fc4:	d143      	bne.n	800704e <_malloc_r+0xd6>
 8006fc6:	2c00      	cmp	r4, #0
 8006fc8:	d04b      	beq.n	8007062 <_malloc_r+0xea>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	4639      	mov	r1, r7
 8006fce:	4630      	mov	r0, r6
 8006fd0:	eb04 0903 	add.w	r9, r4, r3
 8006fd4:	f000 fc7c 	bl	80078d0 <_sbrk_r>
 8006fd8:	4581      	cmp	r9, r0
 8006fda:	d142      	bne.n	8007062 <_malloc_r+0xea>
 8006fdc:	6821      	ldr	r1, [r4, #0]
 8006fde:	1a6d      	subs	r5, r5, r1
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f7ff ffa6 	bl	8006f34 <sbrk_aligned>
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d03a      	beq.n	8007062 <_malloc_r+0xea>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	442b      	add	r3, r5
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	bb62      	cbnz	r2, 8007054 <_malloc_r+0xdc>
 8006ffa:	f8c8 7000 	str.w	r7, [r8]
 8006ffe:	e00f      	b.n	8007020 <_malloc_r+0xa8>
 8007000:	6822      	ldr	r2, [r4, #0]
 8007002:	1b52      	subs	r2, r2, r5
 8007004:	d420      	bmi.n	8007048 <_malloc_r+0xd0>
 8007006:	2a0b      	cmp	r2, #11
 8007008:	d917      	bls.n	800703a <_malloc_r+0xc2>
 800700a:	1961      	adds	r1, r4, r5
 800700c:	42a3      	cmp	r3, r4
 800700e:	6025      	str	r5, [r4, #0]
 8007010:	bf18      	it	ne
 8007012:	6059      	strne	r1, [r3, #4]
 8007014:	6863      	ldr	r3, [r4, #4]
 8007016:	bf08      	it	eq
 8007018:	f8c8 1000 	streq.w	r1, [r8]
 800701c:	5162      	str	r2, [r4, r5]
 800701e:	604b      	str	r3, [r1, #4]
 8007020:	4630      	mov	r0, r6
 8007022:	f000 f82f 	bl	8007084 <__malloc_unlock>
 8007026:	f104 000b 	add.w	r0, r4, #11
 800702a:	1d23      	adds	r3, r4, #4
 800702c:	f020 0007 	bic.w	r0, r0, #7
 8007030:	1ac2      	subs	r2, r0, r3
 8007032:	bf1c      	itt	ne
 8007034:	1a1b      	subne	r3, r3, r0
 8007036:	50a3      	strne	r3, [r4, r2]
 8007038:	e7af      	b.n	8006f9a <_malloc_r+0x22>
 800703a:	6862      	ldr	r2, [r4, #4]
 800703c:	42a3      	cmp	r3, r4
 800703e:	bf0c      	ite	eq
 8007040:	f8c8 2000 	streq.w	r2, [r8]
 8007044:	605a      	strne	r2, [r3, #4]
 8007046:	e7eb      	b.n	8007020 <_malloc_r+0xa8>
 8007048:	4623      	mov	r3, r4
 800704a:	6864      	ldr	r4, [r4, #4]
 800704c:	e7ae      	b.n	8006fac <_malloc_r+0x34>
 800704e:	463c      	mov	r4, r7
 8007050:	687f      	ldr	r7, [r7, #4]
 8007052:	e7b6      	b.n	8006fc2 <_malloc_r+0x4a>
 8007054:	461a      	mov	r2, r3
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	42a3      	cmp	r3, r4
 800705a:	d1fb      	bne.n	8007054 <_malloc_r+0xdc>
 800705c:	2300      	movs	r3, #0
 800705e:	6053      	str	r3, [r2, #4]
 8007060:	e7de      	b.n	8007020 <_malloc_r+0xa8>
 8007062:	230c      	movs	r3, #12
 8007064:	6033      	str	r3, [r6, #0]
 8007066:	4630      	mov	r0, r6
 8007068:	f000 f80c 	bl	8007084 <__malloc_unlock>
 800706c:	e794      	b.n	8006f98 <_malloc_r+0x20>
 800706e:	6005      	str	r5, [r0, #0]
 8007070:	e7d6      	b.n	8007020 <_malloc_r+0xa8>
 8007072:	bf00      	nop
 8007074:	20000ab0 	.word	0x20000ab0

08007078 <__malloc_lock>:
 8007078:	4801      	ldr	r0, [pc, #4]	@ (8007080 <__malloc_lock+0x8>)
 800707a:	f7ff bee8 	b.w	8006e4e <__retarget_lock_acquire_recursive>
 800707e:	bf00      	nop
 8007080:	20000aa8 	.word	0x20000aa8

08007084 <__malloc_unlock>:
 8007084:	4801      	ldr	r0, [pc, #4]	@ (800708c <__malloc_unlock+0x8>)
 8007086:	f7ff bee3 	b.w	8006e50 <__retarget_lock_release_recursive>
 800708a:	bf00      	nop
 800708c:	20000aa8 	.word	0x20000aa8

08007090 <__sfputc_r>:
 8007090:	6893      	ldr	r3, [r2, #8]
 8007092:	3b01      	subs	r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	b410      	push	{r4}
 8007098:	6093      	str	r3, [r2, #8]
 800709a:	da08      	bge.n	80070ae <__sfputc_r+0x1e>
 800709c:	6994      	ldr	r4, [r2, #24]
 800709e:	42a3      	cmp	r3, r4
 80070a0:	db01      	blt.n	80070a6 <__sfputc_r+0x16>
 80070a2:	290a      	cmp	r1, #10
 80070a4:	d103      	bne.n	80070ae <__sfputc_r+0x1e>
 80070a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070aa:	f000 bb7d 	b.w	80077a8 <__swbuf_r>
 80070ae:	6813      	ldr	r3, [r2, #0]
 80070b0:	1c58      	adds	r0, r3, #1
 80070b2:	6010      	str	r0, [r2, #0]
 80070b4:	7019      	strb	r1, [r3, #0]
 80070b6:	4608      	mov	r0, r1
 80070b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070bc:	4770      	bx	lr

080070be <__sfputs_r>:
 80070be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c0:	4606      	mov	r6, r0
 80070c2:	460f      	mov	r7, r1
 80070c4:	4614      	mov	r4, r2
 80070c6:	18d5      	adds	r5, r2, r3
 80070c8:	42ac      	cmp	r4, r5
 80070ca:	d101      	bne.n	80070d0 <__sfputs_r+0x12>
 80070cc:	2000      	movs	r0, #0
 80070ce:	e007      	b.n	80070e0 <__sfputs_r+0x22>
 80070d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d4:	463a      	mov	r2, r7
 80070d6:	4630      	mov	r0, r6
 80070d8:	f7ff ffda 	bl	8007090 <__sfputc_r>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d1f3      	bne.n	80070c8 <__sfputs_r+0xa>
 80070e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070e4 <_vfiprintf_r>:
 80070e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	460d      	mov	r5, r1
 80070ea:	b09d      	sub	sp, #116	@ 0x74
 80070ec:	4614      	mov	r4, r2
 80070ee:	4698      	mov	r8, r3
 80070f0:	4606      	mov	r6, r0
 80070f2:	b118      	cbz	r0, 80070fc <_vfiprintf_r+0x18>
 80070f4:	6a03      	ldr	r3, [r0, #32]
 80070f6:	b90b      	cbnz	r3, 80070fc <_vfiprintf_r+0x18>
 80070f8:	f7ff fda4 	bl	8006c44 <__sinit>
 80070fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070fe:	07d9      	lsls	r1, r3, #31
 8007100:	d405      	bmi.n	800710e <_vfiprintf_r+0x2a>
 8007102:	89ab      	ldrh	r3, [r5, #12]
 8007104:	059a      	lsls	r2, r3, #22
 8007106:	d402      	bmi.n	800710e <_vfiprintf_r+0x2a>
 8007108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800710a:	f7ff fea0 	bl	8006e4e <__retarget_lock_acquire_recursive>
 800710e:	89ab      	ldrh	r3, [r5, #12]
 8007110:	071b      	lsls	r3, r3, #28
 8007112:	d501      	bpl.n	8007118 <_vfiprintf_r+0x34>
 8007114:	692b      	ldr	r3, [r5, #16]
 8007116:	b99b      	cbnz	r3, 8007140 <_vfiprintf_r+0x5c>
 8007118:	4629      	mov	r1, r5
 800711a:	4630      	mov	r0, r6
 800711c:	f000 fb82 	bl	8007824 <__swsetup_r>
 8007120:	b170      	cbz	r0, 8007140 <_vfiprintf_r+0x5c>
 8007122:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007124:	07dc      	lsls	r4, r3, #31
 8007126:	d504      	bpl.n	8007132 <_vfiprintf_r+0x4e>
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	b01d      	add	sp, #116	@ 0x74
 800712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007132:	89ab      	ldrh	r3, [r5, #12]
 8007134:	0598      	lsls	r0, r3, #22
 8007136:	d4f7      	bmi.n	8007128 <_vfiprintf_r+0x44>
 8007138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800713a:	f7ff fe89 	bl	8006e50 <__retarget_lock_release_recursive>
 800713e:	e7f3      	b.n	8007128 <_vfiprintf_r+0x44>
 8007140:	2300      	movs	r3, #0
 8007142:	9309      	str	r3, [sp, #36]	@ 0x24
 8007144:	2320      	movs	r3, #32
 8007146:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800714a:	f8cd 800c 	str.w	r8, [sp, #12]
 800714e:	2330      	movs	r3, #48	@ 0x30
 8007150:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007300 <_vfiprintf_r+0x21c>
 8007154:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007158:	f04f 0901 	mov.w	r9, #1
 800715c:	4623      	mov	r3, r4
 800715e:	469a      	mov	sl, r3
 8007160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007164:	b10a      	cbz	r2, 800716a <_vfiprintf_r+0x86>
 8007166:	2a25      	cmp	r2, #37	@ 0x25
 8007168:	d1f9      	bne.n	800715e <_vfiprintf_r+0x7a>
 800716a:	ebba 0b04 	subs.w	fp, sl, r4
 800716e:	d00b      	beq.n	8007188 <_vfiprintf_r+0xa4>
 8007170:	465b      	mov	r3, fp
 8007172:	4622      	mov	r2, r4
 8007174:	4629      	mov	r1, r5
 8007176:	4630      	mov	r0, r6
 8007178:	f7ff ffa1 	bl	80070be <__sfputs_r>
 800717c:	3001      	adds	r0, #1
 800717e:	f000 80a7 	beq.w	80072d0 <_vfiprintf_r+0x1ec>
 8007182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007184:	445a      	add	r2, fp
 8007186:	9209      	str	r2, [sp, #36]	@ 0x24
 8007188:	f89a 3000 	ldrb.w	r3, [sl]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 809f 	beq.w	80072d0 <_vfiprintf_r+0x1ec>
 8007192:	2300      	movs	r3, #0
 8007194:	f04f 32ff 	mov.w	r2, #4294967295
 8007198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800719c:	f10a 0a01 	add.w	sl, sl, #1
 80071a0:	9304      	str	r3, [sp, #16]
 80071a2:	9307      	str	r3, [sp, #28]
 80071a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80071aa:	4654      	mov	r4, sl
 80071ac:	2205      	movs	r2, #5
 80071ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b2:	4853      	ldr	r0, [pc, #332]	@ (8007300 <_vfiprintf_r+0x21c>)
 80071b4:	f7f9 f80c 	bl	80001d0 <memchr>
 80071b8:	9a04      	ldr	r2, [sp, #16]
 80071ba:	b9d8      	cbnz	r0, 80071f4 <_vfiprintf_r+0x110>
 80071bc:	06d1      	lsls	r1, r2, #27
 80071be:	bf44      	itt	mi
 80071c0:	2320      	movmi	r3, #32
 80071c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071c6:	0713      	lsls	r3, r2, #28
 80071c8:	bf44      	itt	mi
 80071ca:	232b      	movmi	r3, #43	@ 0x2b
 80071cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071d0:	f89a 3000 	ldrb.w	r3, [sl]
 80071d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80071d6:	d015      	beq.n	8007204 <_vfiprintf_r+0x120>
 80071d8:	9a07      	ldr	r2, [sp, #28]
 80071da:	4654      	mov	r4, sl
 80071dc:	2000      	movs	r0, #0
 80071de:	f04f 0c0a 	mov.w	ip, #10
 80071e2:	4621      	mov	r1, r4
 80071e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e8:	3b30      	subs	r3, #48	@ 0x30
 80071ea:	2b09      	cmp	r3, #9
 80071ec:	d94b      	bls.n	8007286 <_vfiprintf_r+0x1a2>
 80071ee:	b1b0      	cbz	r0, 800721e <_vfiprintf_r+0x13a>
 80071f0:	9207      	str	r2, [sp, #28]
 80071f2:	e014      	b.n	800721e <_vfiprintf_r+0x13a>
 80071f4:	eba0 0308 	sub.w	r3, r0, r8
 80071f8:	fa09 f303 	lsl.w	r3, r9, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	46a2      	mov	sl, r4
 8007202:	e7d2      	b.n	80071aa <_vfiprintf_r+0xc6>
 8007204:	9b03      	ldr	r3, [sp, #12]
 8007206:	1d19      	adds	r1, r3, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	9103      	str	r1, [sp, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfbb      	ittet	lt
 8007210:	425b      	neglt	r3, r3
 8007212:	f042 0202 	orrlt.w	r2, r2, #2
 8007216:	9307      	strge	r3, [sp, #28]
 8007218:	9307      	strlt	r3, [sp, #28]
 800721a:	bfb8      	it	lt
 800721c:	9204      	strlt	r2, [sp, #16]
 800721e:	7823      	ldrb	r3, [r4, #0]
 8007220:	2b2e      	cmp	r3, #46	@ 0x2e
 8007222:	d10a      	bne.n	800723a <_vfiprintf_r+0x156>
 8007224:	7863      	ldrb	r3, [r4, #1]
 8007226:	2b2a      	cmp	r3, #42	@ 0x2a
 8007228:	d132      	bne.n	8007290 <_vfiprintf_r+0x1ac>
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	1d1a      	adds	r2, r3, #4
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	9203      	str	r2, [sp, #12]
 8007232:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007236:	3402      	adds	r4, #2
 8007238:	9305      	str	r3, [sp, #20]
 800723a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007310 <_vfiprintf_r+0x22c>
 800723e:	7821      	ldrb	r1, [r4, #0]
 8007240:	2203      	movs	r2, #3
 8007242:	4650      	mov	r0, sl
 8007244:	f7f8 ffc4 	bl	80001d0 <memchr>
 8007248:	b138      	cbz	r0, 800725a <_vfiprintf_r+0x176>
 800724a:	9b04      	ldr	r3, [sp, #16]
 800724c:	eba0 000a 	sub.w	r0, r0, sl
 8007250:	2240      	movs	r2, #64	@ 0x40
 8007252:	4082      	lsls	r2, r0
 8007254:	4313      	orrs	r3, r2
 8007256:	3401      	adds	r4, #1
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800725e:	4829      	ldr	r0, [pc, #164]	@ (8007304 <_vfiprintf_r+0x220>)
 8007260:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007264:	2206      	movs	r2, #6
 8007266:	f7f8 ffb3 	bl	80001d0 <memchr>
 800726a:	2800      	cmp	r0, #0
 800726c:	d03f      	beq.n	80072ee <_vfiprintf_r+0x20a>
 800726e:	4b26      	ldr	r3, [pc, #152]	@ (8007308 <_vfiprintf_r+0x224>)
 8007270:	bb1b      	cbnz	r3, 80072ba <_vfiprintf_r+0x1d6>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	3307      	adds	r3, #7
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	3308      	adds	r3, #8
 800727c:	9303      	str	r3, [sp, #12]
 800727e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007280:	443b      	add	r3, r7
 8007282:	9309      	str	r3, [sp, #36]	@ 0x24
 8007284:	e76a      	b.n	800715c <_vfiprintf_r+0x78>
 8007286:	fb0c 3202 	mla	r2, ip, r2, r3
 800728a:	460c      	mov	r4, r1
 800728c:	2001      	movs	r0, #1
 800728e:	e7a8      	b.n	80071e2 <_vfiprintf_r+0xfe>
 8007290:	2300      	movs	r3, #0
 8007292:	3401      	adds	r4, #1
 8007294:	9305      	str	r3, [sp, #20]
 8007296:	4619      	mov	r1, r3
 8007298:	f04f 0c0a 	mov.w	ip, #10
 800729c:	4620      	mov	r0, r4
 800729e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a2:	3a30      	subs	r2, #48	@ 0x30
 80072a4:	2a09      	cmp	r2, #9
 80072a6:	d903      	bls.n	80072b0 <_vfiprintf_r+0x1cc>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0c6      	beq.n	800723a <_vfiprintf_r+0x156>
 80072ac:	9105      	str	r1, [sp, #20]
 80072ae:	e7c4      	b.n	800723a <_vfiprintf_r+0x156>
 80072b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80072b4:	4604      	mov	r4, r0
 80072b6:	2301      	movs	r3, #1
 80072b8:	e7f0      	b.n	800729c <_vfiprintf_r+0x1b8>
 80072ba:	ab03      	add	r3, sp, #12
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	462a      	mov	r2, r5
 80072c0:	4b12      	ldr	r3, [pc, #72]	@ (800730c <_vfiprintf_r+0x228>)
 80072c2:	a904      	add	r1, sp, #16
 80072c4:	4630      	mov	r0, r6
 80072c6:	f3af 8000 	nop.w
 80072ca:	4607      	mov	r7, r0
 80072cc:	1c78      	adds	r0, r7, #1
 80072ce:	d1d6      	bne.n	800727e <_vfiprintf_r+0x19a>
 80072d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072d2:	07d9      	lsls	r1, r3, #31
 80072d4:	d405      	bmi.n	80072e2 <_vfiprintf_r+0x1fe>
 80072d6:	89ab      	ldrh	r3, [r5, #12]
 80072d8:	059a      	lsls	r2, r3, #22
 80072da:	d402      	bmi.n	80072e2 <_vfiprintf_r+0x1fe>
 80072dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072de:	f7ff fdb7 	bl	8006e50 <__retarget_lock_release_recursive>
 80072e2:	89ab      	ldrh	r3, [r5, #12]
 80072e4:	065b      	lsls	r3, r3, #25
 80072e6:	f53f af1f 	bmi.w	8007128 <_vfiprintf_r+0x44>
 80072ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072ec:	e71e      	b.n	800712c <_vfiprintf_r+0x48>
 80072ee:	ab03      	add	r3, sp, #12
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	462a      	mov	r2, r5
 80072f4:	4b05      	ldr	r3, [pc, #20]	@ (800730c <_vfiprintf_r+0x228>)
 80072f6:	a904      	add	r1, sp, #16
 80072f8:	4630      	mov	r0, r6
 80072fa:	f000 f879 	bl	80073f0 <_printf_i>
 80072fe:	e7e4      	b.n	80072ca <_vfiprintf_r+0x1e6>
 8007300:	08008387 	.word	0x08008387
 8007304:	08008391 	.word	0x08008391
 8007308:	00000000 	.word	0x00000000
 800730c:	080070bf 	.word	0x080070bf
 8007310:	0800838d 	.word	0x0800838d

08007314 <_printf_common>:
 8007314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	4616      	mov	r6, r2
 800731a:	4698      	mov	r8, r3
 800731c:	688a      	ldr	r2, [r1, #8]
 800731e:	690b      	ldr	r3, [r1, #16]
 8007320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007324:	4293      	cmp	r3, r2
 8007326:	bfb8      	it	lt
 8007328:	4613      	movlt	r3, r2
 800732a:	6033      	str	r3, [r6, #0]
 800732c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007330:	4607      	mov	r7, r0
 8007332:	460c      	mov	r4, r1
 8007334:	b10a      	cbz	r2, 800733a <_printf_common+0x26>
 8007336:	3301      	adds	r3, #1
 8007338:	6033      	str	r3, [r6, #0]
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	0699      	lsls	r1, r3, #26
 800733e:	bf42      	ittt	mi
 8007340:	6833      	ldrmi	r3, [r6, #0]
 8007342:	3302      	addmi	r3, #2
 8007344:	6033      	strmi	r3, [r6, #0]
 8007346:	6825      	ldr	r5, [r4, #0]
 8007348:	f015 0506 	ands.w	r5, r5, #6
 800734c:	d106      	bne.n	800735c <_printf_common+0x48>
 800734e:	f104 0a19 	add.w	sl, r4, #25
 8007352:	68e3      	ldr	r3, [r4, #12]
 8007354:	6832      	ldr	r2, [r6, #0]
 8007356:	1a9b      	subs	r3, r3, r2
 8007358:	42ab      	cmp	r3, r5
 800735a:	dc26      	bgt.n	80073aa <_printf_common+0x96>
 800735c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007360:	6822      	ldr	r2, [r4, #0]
 8007362:	3b00      	subs	r3, #0
 8007364:	bf18      	it	ne
 8007366:	2301      	movne	r3, #1
 8007368:	0692      	lsls	r2, r2, #26
 800736a:	d42b      	bmi.n	80073c4 <_printf_common+0xb0>
 800736c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007370:	4641      	mov	r1, r8
 8007372:	4638      	mov	r0, r7
 8007374:	47c8      	blx	r9
 8007376:	3001      	adds	r0, #1
 8007378:	d01e      	beq.n	80073b8 <_printf_common+0xa4>
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	6922      	ldr	r2, [r4, #16]
 800737e:	f003 0306 	and.w	r3, r3, #6
 8007382:	2b04      	cmp	r3, #4
 8007384:	bf02      	ittt	eq
 8007386:	68e5      	ldreq	r5, [r4, #12]
 8007388:	6833      	ldreq	r3, [r6, #0]
 800738a:	1aed      	subeq	r5, r5, r3
 800738c:	68a3      	ldr	r3, [r4, #8]
 800738e:	bf0c      	ite	eq
 8007390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007394:	2500      	movne	r5, #0
 8007396:	4293      	cmp	r3, r2
 8007398:	bfc4      	itt	gt
 800739a:	1a9b      	subgt	r3, r3, r2
 800739c:	18ed      	addgt	r5, r5, r3
 800739e:	2600      	movs	r6, #0
 80073a0:	341a      	adds	r4, #26
 80073a2:	42b5      	cmp	r5, r6
 80073a4:	d11a      	bne.n	80073dc <_printf_common+0xc8>
 80073a6:	2000      	movs	r0, #0
 80073a8:	e008      	b.n	80073bc <_printf_common+0xa8>
 80073aa:	2301      	movs	r3, #1
 80073ac:	4652      	mov	r2, sl
 80073ae:	4641      	mov	r1, r8
 80073b0:	4638      	mov	r0, r7
 80073b2:	47c8      	blx	r9
 80073b4:	3001      	adds	r0, #1
 80073b6:	d103      	bne.n	80073c0 <_printf_common+0xac>
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c0:	3501      	adds	r5, #1
 80073c2:	e7c6      	b.n	8007352 <_printf_common+0x3e>
 80073c4:	18e1      	adds	r1, r4, r3
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	2030      	movs	r0, #48	@ 0x30
 80073ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073ce:	4422      	add	r2, r4
 80073d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073d8:	3302      	adds	r3, #2
 80073da:	e7c7      	b.n	800736c <_printf_common+0x58>
 80073dc:	2301      	movs	r3, #1
 80073de:	4622      	mov	r2, r4
 80073e0:	4641      	mov	r1, r8
 80073e2:	4638      	mov	r0, r7
 80073e4:	47c8      	blx	r9
 80073e6:	3001      	adds	r0, #1
 80073e8:	d0e6      	beq.n	80073b8 <_printf_common+0xa4>
 80073ea:	3601      	adds	r6, #1
 80073ec:	e7d9      	b.n	80073a2 <_printf_common+0x8e>
	...

080073f0 <_printf_i>:
 80073f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f4:	7e0f      	ldrb	r7, [r1, #24]
 80073f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073f8:	2f78      	cmp	r7, #120	@ 0x78
 80073fa:	4691      	mov	r9, r2
 80073fc:	4680      	mov	r8, r0
 80073fe:	460c      	mov	r4, r1
 8007400:	469a      	mov	sl, r3
 8007402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007406:	d807      	bhi.n	8007418 <_printf_i+0x28>
 8007408:	2f62      	cmp	r7, #98	@ 0x62
 800740a:	d80a      	bhi.n	8007422 <_printf_i+0x32>
 800740c:	2f00      	cmp	r7, #0
 800740e:	f000 80d1 	beq.w	80075b4 <_printf_i+0x1c4>
 8007412:	2f58      	cmp	r7, #88	@ 0x58
 8007414:	f000 80b8 	beq.w	8007588 <_printf_i+0x198>
 8007418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800741c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007420:	e03a      	b.n	8007498 <_printf_i+0xa8>
 8007422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007426:	2b15      	cmp	r3, #21
 8007428:	d8f6      	bhi.n	8007418 <_printf_i+0x28>
 800742a:	a101      	add	r1, pc, #4	@ (adr r1, 8007430 <_printf_i+0x40>)
 800742c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007430:	08007489 	.word	0x08007489
 8007434:	0800749d 	.word	0x0800749d
 8007438:	08007419 	.word	0x08007419
 800743c:	08007419 	.word	0x08007419
 8007440:	08007419 	.word	0x08007419
 8007444:	08007419 	.word	0x08007419
 8007448:	0800749d 	.word	0x0800749d
 800744c:	08007419 	.word	0x08007419
 8007450:	08007419 	.word	0x08007419
 8007454:	08007419 	.word	0x08007419
 8007458:	08007419 	.word	0x08007419
 800745c:	0800759b 	.word	0x0800759b
 8007460:	080074c7 	.word	0x080074c7
 8007464:	08007555 	.word	0x08007555
 8007468:	08007419 	.word	0x08007419
 800746c:	08007419 	.word	0x08007419
 8007470:	080075bd 	.word	0x080075bd
 8007474:	08007419 	.word	0x08007419
 8007478:	080074c7 	.word	0x080074c7
 800747c:	08007419 	.word	0x08007419
 8007480:	08007419 	.word	0x08007419
 8007484:	0800755d 	.word	0x0800755d
 8007488:	6833      	ldr	r3, [r6, #0]
 800748a:	1d1a      	adds	r2, r3, #4
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6032      	str	r2, [r6, #0]
 8007490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007498:	2301      	movs	r3, #1
 800749a:	e09c      	b.n	80075d6 <_printf_i+0x1e6>
 800749c:	6833      	ldr	r3, [r6, #0]
 800749e:	6820      	ldr	r0, [r4, #0]
 80074a0:	1d19      	adds	r1, r3, #4
 80074a2:	6031      	str	r1, [r6, #0]
 80074a4:	0606      	lsls	r6, r0, #24
 80074a6:	d501      	bpl.n	80074ac <_printf_i+0xbc>
 80074a8:	681d      	ldr	r5, [r3, #0]
 80074aa:	e003      	b.n	80074b4 <_printf_i+0xc4>
 80074ac:	0645      	lsls	r5, r0, #25
 80074ae:	d5fb      	bpl.n	80074a8 <_printf_i+0xb8>
 80074b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	da03      	bge.n	80074c0 <_printf_i+0xd0>
 80074b8:	232d      	movs	r3, #45	@ 0x2d
 80074ba:	426d      	negs	r5, r5
 80074bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074c0:	4858      	ldr	r0, [pc, #352]	@ (8007624 <_printf_i+0x234>)
 80074c2:	230a      	movs	r3, #10
 80074c4:	e011      	b.n	80074ea <_printf_i+0xfa>
 80074c6:	6821      	ldr	r1, [r4, #0]
 80074c8:	6833      	ldr	r3, [r6, #0]
 80074ca:	0608      	lsls	r0, r1, #24
 80074cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80074d0:	d402      	bmi.n	80074d8 <_printf_i+0xe8>
 80074d2:	0649      	lsls	r1, r1, #25
 80074d4:	bf48      	it	mi
 80074d6:	b2ad      	uxthmi	r5, r5
 80074d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80074da:	4852      	ldr	r0, [pc, #328]	@ (8007624 <_printf_i+0x234>)
 80074dc:	6033      	str	r3, [r6, #0]
 80074de:	bf14      	ite	ne
 80074e0:	230a      	movne	r3, #10
 80074e2:	2308      	moveq	r3, #8
 80074e4:	2100      	movs	r1, #0
 80074e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074ea:	6866      	ldr	r6, [r4, #4]
 80074ec:	60a6      	str	r6, [r4, #8]
 80074ee:	2e00      	cmp	r6, #0
 80074f0:	db05      	blt.n	80074fe <_printf_i+0x10e>
 80074f2:	6821      	ldr	r1, [r4, #0]
 80074f4:	432e      	orrs	r6, r5
 80074f6:	f021 0104 	bic.w	r1, r1, #4
 80074fa:	6021      	str	r1, [r4, #0]
 80074fc:	d04b      	beq.n	8007596 <_printf_i+0x1a6>
 80074fe:	4616      	mov	r6, r2
 8007500:	fbb5 f1f3 	udiv	r1, r5, r3
 8007504:	fb03 5711 	mls	r7, r3, r1, r5
 8007508:	5dc7      	ldrb	r7, [r0, r7]
 800750a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800750e:	462f      	mov	r7, r5
 8007510:	42bb      	cmp	r3, r7
 8007512:	460d      	mov	r5, r1
 8007514:	d9f4      	bls.n	8007500 <_printf_i+0x110>
 8007516:	2b08      	cmp	r3, #8
 8007518:	d10b      	bne.n	8007532 <_printf_i+0x142>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	07df      	lsls	r7, r3, #31
 800751e:	d508      	bpl.n	8007532 <_printf_i+0x142>
 8007520:	6923      	ldr	r3, [r4, #16]
 8007522:	6861      	ldr	r1, [r4, #4]
 8007524:	4299      	cmp	r1, r3
 8007526:	bfde      	ittt	le
 8007528:	2330      	movle	r3, #48	@ 0x30
 800752a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800752e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007532:	1b92      	subs	r2, r2, r6
 8007534:	6122      	str	r2, [r4, #16]
 8007536:	f8cd a000 	str.w	sl, [sp]
 800753a:	464b      	mov	r3, r9
 800753c:	aa03      	add	r2, sp, #12
 800753e:	4621      	mov	r1, r4
 8007540:	4640      	mov	r0, r8
 8007542:	f7ff fee7 	bl	8007314 <_printf_common>
 8007546:	3001      	adds	r0, #1
 8007548:	d14a      	bne.n	80075e0 <_printf_i+0x1f0>
 800754a:	f04f 30ff 	mov.w	r0, #4294967295
 800754e:	b004      	add	sp, #16
 8007550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	f043 0320 	orr.w	r3, r3, #32
 800755a:	6023      	str	r3, [r4, #0]
 800755c:	4832      	ldr	r0, [pc, #200]	@ (8007628 <_printf_i+0x238>)
 800755e:	2778      	movs	r7, #120	@ 0x78
 8007560:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	6831      	ldr	r1, [r6, #0]
 8007568:	061f      	lsls	r7, r3, #24
 800756a:	f851 5b04 	ldr.w	r5, [r1], #4
 800756e:	d402      	bmi.n	8007576 <_printf_i+0x186>
 8007570:	065f      	lsls	r7, r3, #25
 8007572:	bf48      	it	mi
 8007574:	b2ad      	uxthmi	r5, r5
 8007576:	6031      	str	r1, [r6, #0]
 8007578:	07d9      	lsls	r1, r3, #31
 800757a:	bf44      	itt	mi
 800757c:	f043 0320 	orrmi.w	r3, r3, #32
 8007580:	6023      	strmi	r3, [r4, #0]
 8007582:	b11d      	cbz	r5, 800758c <_printf_i+0x19c>
 8007584:	2310      	movs	r3, #16
 8007586:	e7ad      	b.n	80074e4 <_printf_i+0xf4>
 8007588:	4826      	ldr	r0, [pc, #152]	@ (8007624 <_printf_i+0x234>)
 800758a:	e7e9      	b.n	8007560 <_printf_i+0x170>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	f023 0320 	bic.w	r3, r3, #32
 8007592:	6023      	str	r3, [r4, #0]
 8007594:	e7f6      	b.n	8007584 <_printf_i+0x194>
 8007596:	4616      	mov	r6, r2
 8007598:	e7bd      	b.n	8007516 <_printf_i+0x126>
 800759a:	6833      	ldr	r3, [r6, #0]
 800759c:	6825      	ldr	r5, [r4, #0]
 800759e:	6961      	ldr	r1, [r4, #20]
 80075a0:	1d18      	adds	r0, r3, #4
 80075a2:	6030      	str	r0, [r6, #0]
 80075a4:	062e      	lsls	r6, r5, #24
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	d501      	bpl.n	80075ae <_printf_i+0x1be>
 80075aa:	6019      	str	r1, [r3, #0]
 80075ac:	e002      	b.n	80075b4 <_printf_i+0x1c4>
 80075ae:	0668      	lsls	r0, r5, #25
 80075b0:	d5fb      	bpl.n	80075aa <_printf_i+0x1ba>
 80075b2:	8019      	strh	r1, [r3, #0]
 80075b4:	2300      	movs	r3, #0
 80075b6:	6123      	str	r3, [r4, #16]
 80075b8:	4616      	mov	r6, r2
 80075ba:	e7bc      	b.n	8007536 <_printf_i+0x146>
 80075bc:	6833      	ldr	r3, [r6, #0]
 80075be:	1d1a      	adds	r2, r3, #4
 80075c0:	6032      	str	r2, [r6, #0]
 80075c2:	681e      	ldr	r6, [r3, #0]
 80075c4:	6862      	ldr	r2, [r4, #4]
 80075c6:	2100      	movs	r1, #0
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7f8 fe01 	bl	80001d0 <memchr>
 80075ce:	b108      	cbz	r0, 80075d4 <_printf_i+0x1e4>
 80075d0:	1b80      	subs	r0, r0, r6
 80075d2:	6060      	str	r0, [r4, #4]
 80075d4:	6863      	ldr	r3, [r4, #4]
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	2300      	movs	r3, #0
 80075da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075de:	e7aa      	b.n	8007536 <_printf_i+0x146>
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	4632      	mov	r2, r6
 80075e4:	4649      	mov	r1, r9
 80075e6:	4640      	mov	r0, r8
 80075e8:	47d0      	blx	sl
 80075ea:	3001      	adds	r0, #1
 80075ec:	d0ad      	beq.n	800754a <_printf_i+0x15a>
 80075ee:	6823      	ldr	r3, [r4, #0]
 80075f0:	079b      	lsls	r3, r3, #30
 80075f2:	d413      	bmi.n	800761c <_printf_i+0x22c>
 80075f4:	68e0      	ldr	r0, [r4, #12]
 80075f6:	9b03      	ldr	r3, [sp, #12]
 80075f8:	4298      	cmp	r0, r3
 80075fa:	bfb8      	it	lt
 80075fc:	4618      	movlt	r0, r3
 80075fe:	e7a6      	b.n	800754e <_printf_i+0x15e>
 8007600:	2301      	movs	r3, #1
 8007602:	4632      	mov	r2, r6
 8007604:	4649      	mov	r1, r9
 8007606:	4640      	mov	r0, r8
 8007608:	47d0      	blx	sl
 800760a:	3001      	adds	r0, #1
 800760c:	d09d      	beq.n	800754a <_printf_i+0x15a>
 800760e:	3501      	adds	r5, #1
 8007610:	68e3      	ldr	r3, [r4, #12]
 8007612:	9903      	ldr	r1, [sp, #12]
 8007614:	1a5b      	subs	r3, r3, r1
 8007616:	42ab      	cmp	r3, r5
 8007618:	dcf2      	bgt.n	8007600 <_printf_i+0x210>
 800761a:	e7eb      	b.n	80075f4 <_printf_i+0x204>
 800761c:	2500      	movs	r5, #0
 800761e:	f104 0619 	add.w	r6, r4, #25
 8007622:	e7f5      	b.n	8007610 <_printf_i+0x220>
 8007624:	08008398 	.word	0x08008398
 8007628:	080083a9 	.word	0x080083a9

0800762c <__sflush_r>:
 800762c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007634:	0716      	lsls	r6, r2, #28
 8007636:	4605      	mov	r5, r0
 8007638:	460c      	mov	r4, r1
 800763a:	d454      	bmi.n	80076e6 <__sflush_r+0xba>
 800763c:	684b      	ldr	r3, [r1, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	dc02      	bgt.n	8007648 <__sflush_r+0x1c>
 8007642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	dd48      	ble.n	80076da <__sflush_r+0xae>
 8007648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800764a:	2e00      	cmp	r6, #0
 800764c:	d045      	beq.n	80076da <__sflush_r+0xae>
 800764e:	2300      	movs	r3, #0
 8007650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007654:	682f      	ldr	r7, [r5, #0]
 8007656:	6a21      	ldr	r1, [r4, #32]
 8007658:	602b      	str	r3, [r5, #0]
 800765a:	d030      	beq.n	80076be <__sflush_r+0x92>
 800765c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	0759      	lsls	r1, r3, #29
 8007662:	d505      	bpl.n	8007670 <__sflush_r+0x44>
 8007664:	6863      	ldr	r3, [r4, #4]
 8007666:	1ad2      	subs	r2, r2, r3
 8007668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800766a:	b10b      	cbz	r3, 8007670 <__sflush_r+0x44>
 800766c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800766e:	1ad2      	subs	r2, r2, r3
 8007670:	2300      	movs	r3, #0
 8007672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007674:	6a21      	ldr	r1, [r4, #32]
 8007676:	4628      	mov	r0, r5
 8007678:	47b0      	blx	r6
 800767a:	1c43      	adds	r3, r0, #1
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	d106      	bne.n	800768e <__sflush_r+0x62>
 8007680:	6829      	ldr	r1, [r5, #0]
 8007682:	291d      	cmp	r1, #29
 8007684:	d82b      	bhi.n	80076de <__sflush_r+0xb2>
 8007686:	4a2a      	ldr	r2, [pc, #168]	@ (8007730 <__sflush_r+0x104>)
 8007688:	40ca      	lsrs	r2, r1
 800768a:	07d6      	lsls	r6, r2, #31
 800768c:	d527      	bpl.n	80076de <__sflush_r+0xb2>
 800768e:	2200      	movs	r2, #0
 8007690:	6062      	str	r2, [r4, #4]
 8007692:	04d9      	lsls	r1, r3, #19
 8007694:	6922      	ldr	r2, [r4, #16]
 8007696:	6022      	str	r2, [r4, #0]
 8007698:	d504      	bpl.n	80076a4 <__sflush_r+0x78>
 800769a:	1c42      	adds	r2, r0, #1
 800769c:	d101      	bne.n	80076a2 <__sflush_r+0x76>
 800769e:	682b      	ldr	r3, [r5, #0]
 80076a0:	b903      	cbnz	r3, 80076a4 <__sflush_r+0x78>
 80076a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80076a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076a6:	602f      	str	r7, [r5, #0]
 80076a8:	b1b9      	cbz	r1, 80076da <__sflush_r+0xae>
 80076aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076ae:	4299      	cmp	r1, r3
 80076b0:	d002      	beq.n	80076b8 <__sflush_r+0x8c>
 80076b2:	4628      	mov	r0, r5
 80076b4:	f7ff fbec 	bl	8006e90 <_free_r>
 80076b8:	2300      	movs	r3, #0
 80076ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80076bc:	e00d      	b.n	80076da <__sflush_r+0xae>
 80076be:	2301      	movs	r3, #1
 80076c0:	4628      	mov	r0, r5
 80076c2:	47b0      	blx	r6
 80076c4:	4602      	mov	r2, r0
 80076c6:	1c50      	adds	r0, r2, #1
 80076c8:	d1c9      	bne.n	800765e <__sflush_r+0x32>
 80076ca:	682b      	ldr	r3, [r5, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0c6      	beq.n	800765e <__sflush_r+0x32>
 80076d0:	2b1d      	cmp	r3, #29
 80076d2:	d001      	beq.n	80076d8 <__sflush_r+0xac>
 80076d4:	2b16      	cmp	r3, #22
 80076d6:	d11e      	bne.n	8007716 <__sflush_r+0xea>
 80076d8:	602f      	str	r7, [r5, #0]
 80076da:	2000      	movs	r0, #0
 80076dc:	e022      	b.n	8007724 <__sflush_r+0xf8>
 80076de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e2:	b21b      	sxth	r3, r3
 80076e4:	e01b      	b.n	800771e <__sflush_r+0xf2>
 80076e6:	690f      	ldr	r7, [r1, #16]
 80076e8:	2f00      	cmp	r7, #0
 80076ea:	d0f6      	beq.n	80076da <__sflush_r+0xae>
 80076ec:	0793      	lsls	r3, r2, #30
 80076ee:	680e      	ldr	r6, [r1, #0]
 80076f0:	bf08      	it	eq
 80076f2:	694b      	ldreq	r3, [r1, #20]
 80076f4:	600f      	str	r7, [r1, #0]
 80076f6:	bf18      	it	ne
 80076f8:	2300      	movne	r3, #0
 80076fa:	eba6 0807 	sub.w	r8, r6, r7
 80076fe:	608b      	str	r3, [r1, #8]
 8007700:	f1b8 0f00 	cmp.w	r8, #0
 8007704:	dde9      	ble.n	80076da <__sflush_r+0xae>
 8007706:	6a21      	ldr	r1, [r4, #32]
 8007708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800770a:	4643      	mov	r3, r8
 800770c:	463a      	mov	r2, r7
 800770e:	4628      	mov	r0, r5
 8007710:	47b0      	blx	r6
 8007712:	2800      	cmp	r0, #0
 8007714:	dc08      	bgt.n	8007728 <__sflush_r+0xfc>
 8007716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800771a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800771e:	81a3      	strh	r3, [r4, #12]
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007728:	4407      	add	r7, r0
 800772a:	eba8 0800 	sub.w	r8, r8, r0
 800772e:	e7e7      	b.n	8007700 <__sflush_r+0xd4>
 8007730:	20400001 	.word	0x20400001

08007734 <_fflush_r>:
 8007734:	b538      	push	{r3, r4, r5, lr}
 8007736:	690b      	ldr	r3, [r1, #16]
 8007738:	4605      	mov	r5, r0
 800773a:	460c      	mov	r4, r1
 800773c:	b913      	cbnz	r3, 8007744 <_fflush_r+0x10>
 800773e:	2500      	movs	r5, #0
 8007740:	4628      	mov	r0, r5
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	b118      	cbz	r0, 800774e <_fflush_r+0x1a>
 8007746:	6a03      	ldr	r3, [r0, #32]
 8007748:	b90b      	cbnz	r3, 800774e <_fflush_r+0x1a>
 800774a:	f7ff fa7b 	bl	8006c44 <__sinit>
 800774e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0f3      	beq.n	800773e <_fflush_r+0xa>
 8007756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007758:	07d0      	lsls	r0, r2, #31
 800775a:	d404      	bmi.n	8007766 <_fflush_r+0x32>
 800775c:	0599      	lsls	r1, r3, #22
 800775e:	d402      	bmi.n	8007766 <_fflush_r+0x32>
 8007760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007762:	f7ff fb74 	bl	8006e4e <__retarget_lock_acquire_recursive>
 8007766:	4628      	mov	r0, r5
 8007768:	4621      	mov	r1, r4
 800776a:	f7ff ff5f 	bl	800762c <__sflush_r>
 800776e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007770:	07da      	lsls	r2, r3, #31
 8007772:	4605      	mov	r5, r0
 8007774:	d4e4      	bmi.n	8007740 <_fflush_r+0xc>
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	059b      	lsls	r3, r3, #22
 800777a:	d4e1      	bmi.n	8007740 <_fflush_r+0xc>
 800777c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800777e:	f7ff fb67 	bl	8006e50 <__retarget_lock_release_recursive>
 8007782:	e7dd      	b.n	8007740 <_fflush_r+0xc>

08007784 <fiprintf>:
 8007784:	b40e      	push	{r1, r2, r3}
 8007786:	b503      	push	{r0, r1, lr}
 8007788:	4601      	mov	r1, r0
 800778a:	ab03      	add	r3, sp, #12
 800778c:	4805      	ldr	r0, [pc, #20]	@ (80077a4 <fiprintf+0x20>)
 800778e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007792:	6800      	ldr	r0, [r0, #0]
 8007794:	9301      	str	r3, [sp, #4]
 8007796:	f7ff fca5 	bl	80070e4 <_vfiprintf_r>
 800779a:	b002      	add	sp, #8
 800779c:	f85d eb04 	ldr.w	lr, [sp], #4
 80077a0:	b003      	add	sp, #12
 80077a2:	4770      	bx	lr
 80077a4:	20000418 	.word	0x20000418

080077a8 <__swbuf_r>:
 80077a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077aa:	460e      	mov	r6, r1
 80077ac:	4614      	mov	r4, r2
 80077ae:	4605      	mov	r5, r0
 80077b0:	b118      	cbz	r0, 80077ba <__swbuf_r+0x12>
 80077b2:	6a03      	ldr	r3, [r0, #32]
 80077b4:	b90b      	cbnz	r3, 80077ba <__swbuf_r+0x12>
 80077b6:	f7ff fa45 	bl	8006c44 <__sinit>
 80077ba:	69a3      	ldr	r3, [r4, #24]
 80077bc:	60a3      	str	r3, [r4, #8]
 80077be:	89a3      	ldrh	r3, [r4, #12]
 80077c0:	071a      	lsls	r2, r3, #28
 80077c2:	d501      	bpl.n	80077c8 <__swbuf_r+0x20>
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	b943      	cbnz	r3, 80077da <__swbuf_r+0x32>
 80077c8:	4621      	mov	r1, r4
 80077ca:	4628      	mov	r0, r5
 80077cc:	f000 f82a 	bl	8007824 <__swsetup_r>
 80077d0:	b118      	cbz	r0, 80077da <__swbuf_r+0x32>
 80077d2:	f04f 37ff 	mov.w	r7, #4294967295
 80077d6:	4638      	mov	r0, r7
 80077d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	6922      	ldr	r2, [r4, #16]
 80077de:	1a98      	subs	r0, r3, r2
 80077e0:	6963      	ldr	r3, [r4, #20]
 80077e2:	b2f6      	uxtb	r6, r6
 80077e4:	4283      	cmp	r3, r0
 80077e6:	4637      	mov	r7, r6
 80077e8:	dc05      	bgt.n	80077f6 <__swbuf_r+0x4e>
 80077ea:	4621      	mov	r1, r4
 80077ec:	4628      	mov	r0, r5
 80077ee:	f7ff ffa1 	bl	8007734 <_fflush_r>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d1ed      	bne.n	80077d2 <__swbuf_r+0x2a>
 80077f6:	68a3      	ldr	r3, [r4, #8]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	60a3      	str	r3, [r4, #8]
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	6022      	str	r2, [r4, #0]
 8007802:	701e      	strb	r6, [r3, #0]
 8007804:	6962      	ldr	r2, [r4, #20]
 8007806:	1c43      	adds	r3, r0, #1
 8007808:	429a      	cmp	r2, r3
 800780a:	d004      	beq.n	8007816 <__swbuf_r+0x6e>
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	07db      	lsls	r3, r3, #31
 8007810:	d5e1      	bpl.n	80077d6 <__swbuf_r+0x2e>
 8007812:	2e0a      	cmp	r6, #10
 8007814:	d1df      	bne.n	80077d6 <__swbuf_r+0x2e>
 8007816:	4621      	mov	r1, r4
 8007818:	4628      	mov	r0, r5
 800781a:	f7ff ff8b 	bl	8007734 <_fflush_r>
 800781e:	2800      	cmp	r0, #0
 8007820:	d0d9      	beq.n	80077d6 <__swbuf_r+0x2e>
 8007822:	e7d6      	b.n	80077d2 <__swbuf_r+0x2a>

08007824 <__swsetup_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	4b29      	ldr	r3, [pc, #164]	@ (80078cc <__swsetup_r+0xa8>)
 8007828:	4605      	mov	r5, r0
 800782a:	6818      	ldr	r0, [r3, #0]
 800782c:	460c      	mov	r4, r1
 800782e:	b118      	cbz	r0, 8007838 <__swsetup_r+0x14>
 8007830:	6a03      	ldr	r3, [r0, #32]
 8007832:	b90b      	cbnz	r3, 8007838 <__swsetup_r+0x14>
 8007834:	f7ff fa06 	bl	8006c44 <__sinit>
 8007838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800783c:	0719      	lsls	r1, r3, #28
 800783e:	d422      	bmi.n	8007886 <__swsetup_r+0x62>
 8007840:	06da      	lsls	r2, r3, #27
 8007842:	d407      	bmi.n	8007854 <__swsetup_r+0x30>
 8007844:	2209      	movs	r2, #9
 8007846:	602a      	str	r2, [r5, #0]
 8007848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	f04f 30ff 	mov.w	r0, #4294967295
 8007852:	e033      	b.n	80078bc <__swsetup_r+0x98>
 8007854:	0758      	lsls	r0, r3, #29
 8007856:	d512      	bpl.n	800787e <__swsetup_r+0x5a>
 8007858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800785a:	b141      	cbz	r1, 800786e <__swsetup_r+0x4a>
 800785c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007860:	4299      	cmp	r1, r3
 8007862:	d002      	beq.n	800786a <__swsetup_r+0x46>
 8007864:	4628      	mov	r0, r5
 8007866:	f7ff fb13 	bl	8006e90 <_free_r>
 800786a:	2300      	movs	r3, #0
 800786c:	6363      	str	r3, [r4, #52]	@ 0x34
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007874:	81a3      	strh	r3, [r4, #12]
 8007876:	2300      	movs	r3, #0
 8007878:	6063      	str	r3, [r4, #4]
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f043 0308 	orr.w	r3, r3, #8
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	6923      	ldr	r3, [r4, #16]
 8007888:	b94b      	cbnz	r3, 800789e <__swsetup_r+0x7a>
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007894:	d003      	beq.n	800789e <__swsetup_r+0x7a>
 8007896:	4621      	mov	r1, r4
 8007898:	4628      	mov	r0, r5
 800789a:	f000 f856 	bl	800794a <__smakebuf_r>
 800789e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a2:	f013 0201 	ands.w	r2, r3, #1
 80078a6:	d00a      	beq.n	80078be <__swsetup_r+0x9a>
 80078a8:	2200      	movs	r2, #0
 80078aa:	60a2      	str	r2, [r4, #8]
 80078ac:	6962      	ldr	r2, [r4, #20]
 80078ae:	4252      	negs	r2, r2
 80078b0:	61a2      	str	r2, [r4, #24]
 80078b2:	6922      	ldr	r2, [r4, #16]
 80078b4:	b942      	cbnz	r2, 80078c8 <__swsetup_r+0xa4>
 80078b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078ba:	d1c5      	bne.n	8007848 <__swsetup_r+0x24>
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
 80078be:	0799      	lsls	r1, r3, #30
 80078c0:	bf58      	it	pl
 80078c2:	6962      	ldrpl	r2, [r4, #20]
 80078c4:	60a2      	str	r2, [r4, #8]
 80078c6:	e7f4      	b.n	80078b2 <__swsetup_r+0x8e>
 80078c8:	2000      	movs	r0, #0
 80078ca:	e7f7      	b.n	80078bc <__swsetup_r+0x98>
 80078cc:	20000418 	.word	0x20000418

080078d0 <_sbrk_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d06      	ldr	r5, [pc, #24]	@ (80078ec <_sbrk_r+0x1c>)
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	602b      	str	r3, [r5, #0]
 80078dc:	f7f9 fd76 	bl	80013cc <_sbrk>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d102      	bne.n	80078ea <_sbrk_r+0x1a>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	b103      	cbz	r3, 80078ea <_sbrk_r+0x1a>
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	20000aa4 	.word	0x20000aa4

080078f0 <abort>:
 80078f0:	b508      	push	{r3, lr}
 80078f2:	2006      	movs	r0, #6
 80078f4:	f000 f88e 	bl	8007a14 <raise>
 80078f8:	2001      	movs	r0, #1
 80078fa:	f7f9 fd0b 	bl	8001314 <_exit>

080078fe <__swhatbuf_r>:
 80078fe:	b570      	push	{r4, r5, r6, lr}
 8007900:	460c      	mov	r4, r1
 8007902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007906:	2900      	cmp	r1, #0
 8007908:	b096      	sub	sp, #88	@ 0x58
 800790a:	4615      	mov	r5, r2
 800790c:	461e      	mov	r6, r3
 800790e:	da0d      	bge.n	800792c <__swhatbuf_r+0x2e>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007916:	f04f 0100 	mov.w	r1, #0
 800791a:	bf14      	ite	ne
 800791c:	2340      	movne	r3, #64	@ 0x40
 800791e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007922:	2000      	movs	r0, #0
 8007924:	6031      	str	r1, [r6, #0]
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	b016      	add	sp, #88	@ 0x58
 800792a:	bd70      	pop	{r4, r5, r6, pc}
 800792c:	466a      	mov	r2, sp
 800792e:	f000 f879 	bl	8007a24 <_fstat_r>
 8007932:	2800      	cmp	r0, #0
 8007934:	dbec      	blt.n	8007910 <__swhatbuf_r+0x12>
 8007936:	9901      	ldr	r1, [sp, #4]
 8007938:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800793c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007940:	4259      	negs	r1, r3
 8007942:	4159      	adcs	r1, r3
 8007944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007948:	e7eb      	b.n	8007922 <__swhatbuf_r+0x24>

0800794a <__smakebuf_r>:
 800794a:	898b      	ldrh	r3, [r1, #12]
 800794c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800794e:	079d      	lsls	r5, r3, #30
 8007950:	4606      	mov	r6, r0
 8007952:	460c      	mov	r4, r1
 8007954:	d507      	bpl.n	8007966 <__smakebuf_r+0x1c>
 8007956:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800795a:	6023      	str	r3, [r4, #0]
 800795c:	6123      	str	r3, [r4, #16]
 800795e:	2301      	movs	r3, #1
 8007960:	6163      	str	r3, [r4, #20]
 8007962:	b003      	add	sp, #12
 8007964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007966:	ab01      	add	r3, sp, #4
 8007968:	466a      	mov	r2, sp
 800796a:	f7ff ffc8 	bl	80078fe <__swhatbuf_r>
 800796e:	9f00      	ldr	r7, [sp, #0]
 8007970:	4605      	mov	r5, r0
 8007972:	4639      	mov	r1, r7
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff faff 	bl	8006f78 <_malloc_r>
 800797a:	b948      	cbnz	r0, 8007990 <__smakebuf_r+0x46>
 800797c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007980:	059a      	lsls	r2, r3, #22
 8007982:	d4ee      	bmi.n	8007962 <__smakebuf_r+0x18>
 8007984:	f023 0303 	bic.w	r3, r3, #3
 8007988:	f043 0302 	orr.w	r3, r3, #2
 800798c:	81a3      	strh	r3, [r4, #12]
 800798e:	e7e2      	b.n	8007956 <__smakebuf_r+0xc>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	6020      	str	r0, [r4, #0]
 8007994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	9b01      	ldr	r3, [sp, #4]
 800799c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079a0:	b15b      	cbz	r3, 80079ba <__smakebuf_r+0x70>
 80079a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 f84e 	bl	8007a48 <_isatty_r>
 80079ac:	b128      	cbz	r0, 80079ba <__smakebuf_r+0x70>
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	f023 0303 	bic.w	r3, r3, #3
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	431d      	orrs	r5, r3
 80079be:	81a5      	strh	r5, [r4, #12]
 80079c0:	e7cf      	b.n	8007962 <__smakebuf_r+0x18>

080079c2 <_raise_r>:
 80079c2:	291f      	cmp	r1, #31
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4605      	mov	r5, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	d904      	bls.n	80079d6 <_raise_r+0x14>
 80079cc:	2316      	movs	r3, #22
 80079ce:	6003      	str	r3, [r0, #0]
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	bd38      	pop	{r3, r4, r5, pc}
 80079d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80079d8:	b112      	cbz	r2, 80079e0 <_raise_r+0x1e>
 80079da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079de:	b94b      	cbnz	r3, 80079f4 <_raise_r+0x32>
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 f853 	bl	8007a8c <_getpid_r>
 80079e6:	4622      	mov	r2, r4
 80079e8:	4601      	mov	r1, r0
 80079ea:	4628      	mov	r0, r5
 80079ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079f0:	f000 b83a 	b.w	8007a68 <_kill_r>
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d00a      	beq.n	8007a0e <_raise_r+0x4c>
 80079f8:	1c59      	adds	r1, r3, #1
 80079fa:	d103      	bne.n	8007a04 <_raise_r+0x42>
 80079fc:	2316      	movs	r3, #22
 80079fe:	6003      	str	r3, [r0, #0]
 8007a00:	2001      	movs	r0, #1
 8007a02:	e7e7      	b.n	80079d4 <_raise_r+0x12>
 8007a04:	2100      	movs	r1, #0
 8007a06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	4798      	blx	r3
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e7e0      	b.n	80079d4 <_raise_r+0x12>
	...

08007a14 <raise>:
 8007a14:	4b02      	ldr	r3, [pc, #8]	@ (8007a20 <raise+0xc>)
 8007a16:	4601      	mov	r1, r0
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	f7ff bfd2 	b.w	80079c2 <_raise_r>
 8007a1e:	bf00      	nop
 8007a20:	20000418 	.word	0x20000418

08007a24 <_fstat_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d07      	ldr	r5, [pc, #28]	@ (8007a44 <_fstat_r+0x20>)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	4611      	mov	r1, r2
 8007a30:	602b      	str	r3, [r5, #0]
 8007a32:	f7f9 fca3 	bl	800137c <_fstat>
 8007a36:	1c43      	adds	r3, r0, #1
 8007a38:	d102      	bne.n	8007a40 <_fstat_r+0x1c>
 8007a3a:	682b      	ldr	r3, [r5, #0]
 8007a3c:	b103      	cbz	r3, 8007a40 <_fstat_r+0x1c>
 8007a3e:	6023      	str	r3, [r4, #0]
 8007a40:	bd38      	pop	{r3, r4, r5, pc}
 8007a42:	bf00      	nop
 8007a44:	20000aa4 	.word	0x20000aa4

08007a48 <_isatty_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d06      	ldr	r5, [pc, #24]	@ (8007a64 <_isatty_r+0x1c>)
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4608      	mov	r0, r1
 8007a52:	602b      	str	r3, [r5, #0]
 8007a54:	f7f9 fca2 	bl	800139c <_isatty>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d102      	bne.n	8007a62 <_isatty_r+0x1a>
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	b103      	cbz	r3, 8007a62 <_isatty_r+0x1a>
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	20000aa4 	.word	0x20000aa4

08007a68 <_kill_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d07      	ldr	r5, [pc, #28]	@ (8007a88 <_kill_r+0x20>)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	4611      	mov	r1, r2
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	f7f9 fc3d 	bl	80012f4 <_kill>
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	d102      	bne.n	8007a84 <_kill_r+0x1c>
 8007a7e:	682b      	ldr	r3, [r5, #0]
 8007a80:	b103      	cbz	r3, 8007a84 <_kill_r+0x1c>
 8007a82:	6023      	str	r3, [r4, #0]
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	bf00      	nop
 8007a88:	20000aa4 	.word	0x20000aa4

08007a8c <_getpid_r>:
 8007a8c:	f7f9 bc2a 	b.w	80012e4 <_getpid>

08007a90 <powf>:
 8007a90:	b508      	push	{r3, lr}
 8007a92:	ed2d 8b04 	vpush	{d8-d9}
 8007a96:	eeb0 8a60 	vmov.f32	s16, s1
 8007a9a:	eeb0 9a40 	vmov.f32	s18, s0
 8007a9e:	f000 f87d 	bl	8007b9c <__ieee754_powf>
 8007aa2:	eeb4 8a48 	vcmp.f32	s16, s16
 8007aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aaa:	eef0 8a40 	vmov.f32	s17, s0
 8007aae:	d63e      	bvs.n	8007b2e <powf+0x9e>
 8007ab0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8007ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab8:	d112      	bne.n	8007ae0 <powf+0x50>
 8007aba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac2:	d039      	beq.n	8007b38 <powf+0xa8>
 8007ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ac8:	f000 f839 	bl	8007b3e <finitef>
 8007acc:	b378      	cbz	r0, 8007b2e <powf+0x9e>
 8007ace:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad6:	d52a      	bpl.n	8007b2e <powf+0x9e>
 8007ad8:	f7ff f98e 	bl	8006df8 <__errno>
 8007adc:	2322      	movs	r3, #34	@ 0x22
 8007ade:	e014      	b.n	8007b0a <powf+0x7a>
 8007ae0:	f000 f82d 	bl	8007b3e <finitef>
 8007ae4:	b998      	cbnz	r0, 8007b0e <powf+0x7e>
 8007ae6:	eeb0 0a49 	vmov.f32	s0, s18
 8007aea:	f000 f828 	bl	8007b3e <finitef>
 8007aee:	b170      	cbz	r0, 8007b0e <powf+0x7e>
 8007af0:	eeb0 0a48 	vmov.f32	s0, s16
 8007af4:	f000 f823 	bl	8007b3e <finitef>
 8007af8:	b148      	cbz	r0, 8007b0e <powf+0x7e>
 8007afa:	eef4 8a68 	vcmp.f32	s17, s17
 8007afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b02:	d7e9      	bvc.n	8007ad8 <powf+0x48>
 8007b04:	f7ff f978 	bl	8006df8 <__errno>
 8007b08:	2321      	movs	r3, #33	@ 0x21
 8007b0a:	6003      	str	r3, [r0, #0]
 8007b0c:	e00f      	b.n	8007b2e <powf+0x9e>
 8007b0e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b16:	d10a      	bne.n	8007b2e <powf+0x9e>
 8007b18:	eeb0 0a49 	vmov.f32	s0, s18
 8007b1c:	f000 f80f 	bl	8007b3e <finitef>
 8007b20:	b128      	cbz	r0, 8007b2e <powf+0x9e>
 8007b22:	eeb0 0a48 	vmov.f32	s0, s16
 8007b26:	f000 f80a 	bl	8007b3e <finitef>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d1d4      	bne.n	8007ad8 <powf+0x48>
 8007b2e:	eeb0 0a68 	vmov.f32	s0, s17
 8007b32:	ecbd 8b04 	vpop	{d8-d9}
 8007b36:	bd08      	pop	{r3, pc}
 8007b38:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8007b3c:	e7f7      	b.n	8007b2e <powf+0x9e>

08007b3e <finitef>:
 8007b3e:	ee10 3a10 	vmov	r3, s0
 8007b42:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8007b46:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007b4a:	bfac      	ite	ge
 8007b4c:	2000      	movge	r0, #0
 8007b4e:	2001      	movlt	r0, #1
 8007b50:	4770      	bx	lr
	...

08007b54 <roundf>:
 8007b54:	ee10 0a10 	vmov	r0, s0
 8007b58:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007b5c:	3a7f      	subs	r2, #127	@ 0x7f
 8007b5e:	2a16      	cmp	r2, #22
 8007b60:	dc15      	bgt.n	8007b8e <roundf+0x3a>
 8007b62:	2a00      	cmp	r2, #0
 8007b64:	da08      	bge.n	8007b78 <roundf+0x24>
 8007b66:	3201      	adds	r2, #1
 8007b68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8007b6c:	d101      	bne.n	8007b72 <roundf+0x1e>
 8007b6e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8007b72:	ee00 3a10 	vmov	s0, r3
 8007b76:	4770      	bx	lr
 8007b78:	4907      	ldr	r1, [pc, #28]	@ (8007b98 <roundf+0x44>)
 8007b7a:	4111      	asrs	r1, r2
 8007b7c:	4201      	tst	r1, r0
 8007b7e:	d0fa      	beq.n	8007b76 <roundf+0x22>
 8007b80:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007b84:	4113      	asrs	r3, r2
 8007b86:	4403      	add	r3, r0
 8007b88:	ea23 0301 	bic.w	r3, r3, r1
 8007b8c:	e7f1      	b.n	8007b72 <roundf+0x1e>
 8007b8e:	2a80      	cmp	r2, #128	@ 0x80
 8007b90:	d1f1      	bne.n	8007b76 <roundf+0x22>
 8007b92:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b96:	4770      	bx	lr
 8007b98:	007fffff 	.word	0x007fffff

08007b9c <__ieee754_powf>:
 8007b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba0:	ee10 4a90 	vmov	r4, s1
 8007ba4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8007ba8:	ed2d 8b02 	vpush	{d8}
 8007bac:	ee10 6a10 	vmov	r6, s0
 8007bb0:	eeb0 8a40 	vmov.f32	s16, s0
 8007bb4:	eef0 8a60 	vmov.f32	s17, s1
 8007bb8:	d10c      	bne.n	8007bd4 <__ieee754_powf+0x38>
 8007bba:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8007bbe:	0076      	lsls	r6, r6, #1
 8007bc0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8007bc4:	f240 8274 	bls.w	80080b0 <__ieee754_powf+0x514>
 8007bc8:	ee38 0a28 	vadd.f32	s0, s16, s17
 8007bcc:	ecbd 8b02 	vpop	{d8}
 8007bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bd4:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8007bd8:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8007bdc:	d802      	bhi.n	8007be4 <__ieee754_powf+0x48>
 8007bde:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007be2:	d908      	bls.n	8007bf6 <__ieee754_powf+0x5a>
 8007be4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8007be8:	d1ee      	bne.n	8007bc8 <__ieee754_powf+0x2c>
 8007bea:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8007bee:	0064      	lsls	r4, r4, #1
 8007bf0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8007bf4:	e7e6      	b.n	8007bc4 <__ieee754_powf+0x28>
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	da1f      	bge.n	8007c3a <__ieee754_powf+0x9e>
 8007bfa:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8007bfe:	f080 8260 	bcs.w	80080c2 <__ieee754_powf+0x526>
 8007c02:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8007c06:	d32f      	bcc.n	8007c68 <__ieee754_powf+0xcc>
 8007c08:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8007c0c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8007c10:	fa49 f503 	asr.w	r5, r9, r3
 8007c14:	fa05 f303 	lsl.w	r3, r5, r3
 8007c18:	454b      	cmp	r3, r9
 8007c1a:	d123      	bne.n	8007c64 <__ieee754_powf+0xc8>
 8007c1c:	f005 0501 	and.w	r5, r5, #1
 8007c20:	f1c5 0502 	rsb	r5, r5, #2
 8007c24:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8007c28:	d11f      	bne.n	8007c6a <__ieee754_powf+0xce>
 8007c2a:	2c00      	cmp	r4, #0
 8007c2c:	f280 8246 	bge.w	80080bc <__ieee754_powf+0x520>
 8007c30:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007c34:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007c38:	e7c8      	b.n	8007bcc <__ieee754_powf+0x30>
 8007c3a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8007c3e:	d111      	bne.n	8007c64 <__ieee754_powf+0xc8>
 8007c40:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8007c44:	f000 8234 	beq.w	80080b0 <__ieee754_powf+0x514>
 8007c48:	d906      	bls.n	8007c58 <__ieee754_powf+0xbc>
 8007c4a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8007f60 <__ieee754_powf+0x3c4>
 8007c4e:	2c00      	cmp	r4, #0
 8007c50:	bfa8      	it	ge
 8007c52:	eeb0 0a68 	vmovge.f32	s0, s17
 8007c56:	e7b9      	b.n	8007bcc <__ieee754_powf+0x30>
 8007c58:	2c00      	cmp	r4, #0
 8007c5a:	f280 822c 	bge.w	80080b6 <__ieee754_powf+0x51a>
 8007c5e:	eeb1 0a68 	vneg.f32	s0, s17
 8007c62:	e7b3      	b.n	8007bcc <__ieee754_powf+0x30>
 8007c64:	2500      	movs	r5, #0
 8007c66:	e7dd      	b.n	8007c24 <__ieee754_powf+0x88>
 8007c68:	2500      	movs	r5, #0
 8007c6a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8007c6e:	d102      	bne.n	8007c76 <__ieee754_powf+0xda>
 8007c70:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007c74:	e7aa      	b.n	8007bcc <__ieee754_powf+0x30>
 8007c76:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8007c7a:	f040 8227 	bne.w	80080cc <__ieee754_powf+0x530>
 8007c7e:	2e00      	cmp	r6, #0
 8007c80:	f2c0 8224 	blt.w	80080cc <__ieee754_powf+0x530>
 8007c84:	eeb0 0a48 	vmov.f32	s0, s16
 8007c88:	ecbd 8b02 	vpop	{d8}
 8007c8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c90:	f000 bae6 	b.w	8008260 <__ieee754_sqrtf>
 8007c94:	2d01      	cmp	r5, #1
 8007c96:	d199      	bne.n	8007bcc <__ieee754_powf+0x30>
 8007c98:	eeb1 0a40 	vneg.f32	s0, s0
 8007c9c:	e796      	b.n	8007bcc <__ieee754_powf+0x30>
 8007c9e:	0ff0      	lsrs	r0, r6, #31
 8007ca0:	3801      	subs	r0, #1
 8007ca2:	ea55 0300 	orrs.w	r3, r5, r0
 8007ca6:	d104      	bne.n	8007cb2 <__ieee754_powf+0x116>
 8007ca8:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007cac:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007cb0:	e78c      	b.n	8007bcc <__ieee754_powf+0x30>
 8007cb2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8007cb6:	d96d      	bls.n	8007d94 <__ieee754_powf+0x1f8>
 8007cb8:	4baa      	ldr	r3, [pc, #680]	@ (8007f64 <__ieee754_powf+0x3c8>)
 8007cba:	4598      	cmp	r8, r3
 8007cbc:	d808      	bhi.n	8007cd0 <__ieee754_powf+0x134>
 8007cbe:	2c00      	cmp	r4, #0
 8007cc0:	da0b      	bge.n	8007cda <__ieee754_powf+0x13e>
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	ecbd 8b02 	vpop	{d8}
 8007cc8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ccc:	f000 bac2 	b.w	8008254 <__math_oflowf>
 8007cd0:	4ba5      	ldr	r3, [pc, #660]	@ (8007f68 <__ieee754_powf+0x3cc>)
 8007cd2:	4598      	cmp	r8, r3
 8007cd4:	d908      	bls.n	8007ce8 <__ieee754_powf+0x14c>
 8007cd6:	2c00      	cmp	r4, #0
 8007cd8:	dcf3      	bgt.n	8007cc2 <__ieee754_powf+0x126>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	ecbd 8b02 	vpop	{d8}
 8007ce0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce4:	f000 bab0 	b.w	8008248 <__math_uflowf>
 8007ce8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007cec:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007cf0:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8007f6c <__ieee754_powf+0x3d0>
 8007cf4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8007cf8:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007cfc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007d00:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007d04:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007d08:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8007f70 <__ieee754_powf+0x3d4>
 8007d0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007d10:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8007f74 <__ieee754_powf+0x3d8>
 8007d14:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8007d18:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8007f78 <__ieee754_powf+0x3dc>
 8007d1c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007d20:	eeb0 7a67 	vmov.f32	s14, s15
 8007d24:	eea0 7a26 	vfma.f32	s14, s0, s13
 8007d28:	ee17 3a10 	vmov	r3, s14
 8007d2c:	f36f 030b 	bfc	r3, #0, #12
 8007d30:	ee07 3a10 	vmov	s14, r3
 8007d34:	eeb0 6a47 	vmov.f32	s12, s14
 8007d38:	eea0 6a66 	vfms.f32	s12, s0, s13
 8007d3c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007d40:	3d01      	subs	r5, #1
 8007d42:	4305      	orrs	r5, r0
 8007d44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d48:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8007d4c:	f36f 040b 	bfc	r4, #0, #12
 8007d50:	bf18      	it	ne
 8007d52:	eeb0 8a66 	vmovne.f32	s16, s13
 8007d56:	ee06 4a90 	vmov	s13, r4
 8007d5a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007d5e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8007d62:	ee67 7a26 	vmul.f32	s15, s14, s13
 8007d66:	eee6 0a07 	vfma.f32	s1, s12, s14
 8007d6a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007d6e:	ee17 1a10 	vmov	r1, s14
 8007d72:	2900      	cmp	r1, #0
 8007d74:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007d78:	f340 80dd 	ble.w	8007f36 <__ieee754_powf+0x39a>
 8007d7c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8007d80:	f240 80ca 	bls.w	8007f18 <__ieee754_powf+0x37c>
 8007d84:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8c:	bf4c      	ite	mi
 8007d8e:	2001      	movmi	r0, #1
 8007d90:	2000      	movpl	r0, #0
 8007d92:	e797      	b.n	8007cc4 <__ieee754_powf+0x128>
 8007d94:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007d98:	bf01      	itttt	eq
 8007d9a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8007f7c <__ieee754_powf+0x3e0>
 8007d9e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007da2:	f06f 0317 	mvneq.w	r3, #23
 8007da6:	ee17 7a90 	vmoveq	r7, s15
 8007daa:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8007dae:	bf18      	it	ne
 8007db0:	2300      	movne	r3, #0
 8007db2:	3a7f      	subs	r2, #127	@ 0x7f
 8007db4:	441a      	add	r2, r3
 8007db6:	4b72      	ldr	r3, [pc, #456]	@ (8007f80 <__ieee754_powf+0x3e4>)
 8007db8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8007dbc:	429f      	cmp	r7, r3
 8007dbe:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8007dc2:	dd06      	ble.n	8007dd2 <__ieee754_powf+0x236>
 8007dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8007f84 <__ieee754_powf+0x3e8>)
 8007dc6:	429f      	cmp	r7, r3
 8007dc8:	f340 80a4 	ble.w	8007f14 <__ieee754_powf+0x378>
 8007dcc:	3201      	adds	r2, #1
 8007dce:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8007dd2:	2600      	movs	r6, #0
 8007dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8007f88 <__ieee754_powf+0x3ec>)
 8007dd6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8007dda:	ee07 1a10 	vmov	s14, r1
 8007dde:	edd3 5a00 	vldr	s11, [r3]
 8007de2:	4b6a      	ldr	r3, [pc, #424]	@ (8007f8c <__ieee754_powf+0x3f0>)
 8007de4:	ee75 7a87 	vadd.f32	s15, s11, s14
 8007de8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dec:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8007df0:	1049      	asrs	r1, r1, #1
 8007df2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8007df6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8007dfa:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8007dfe:	ee37 6a65 	vsub.f32	s12, s14, s11
 8007e02:	ee07 1a90 	vmov	s15, r1
 8007e06:	ee26 5a24 	vmul.f32	s10, s12, s9
 8007e0a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8007e0e:	ee15 7a10 	vmov	r7, s10
 8007e12:	401f      	ands	r7, r3
 8007e14:	ee06 7a90 	vmov	s13, r7
 8007e18:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8007e1c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8007e20:	ee65 7a05 	vmul.f32	s15, s10, s10
 8007e24:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007e28:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8007f90 <__ieee754_powf+0x3f4>
 8007e2c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8007f94 <__ieee754_powf+0x3f8>
 8007e30:	eee7 5a87 	vfma.f32	s11, s15, s14
 8007e34:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8007f98 <__ieee754_powf+0x3fc>
 8007e38:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007e3c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8007f6c <__ieee754_powf+0x3d0>
 8007e40:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007e44:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8007f9c <__ieee754_powf+0x400>
 8007e48:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007e4c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8007fa0 <__ieee754_powf+0x404>
 8007e50:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007e54:	eee7 5a27 	vfma.f32	s11, s14, s15
 8007e58:	ee35 7a26 	vadd.f32	s14, s10, s13
 8007e5c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8007e60:	ee27 7a06 	vmul.f32	s14, s14, s12
 8007e64:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8007e68:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8007e6c:	eef0 5a67 	vmov.f32	s11, s15
 8007e70:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8007e74:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007e78:	ee15 1a90 	vmov	r1, s11
 8007e7c:	4019      	ands	r1, r3
 8007e7e:	ee05 1a90 	vmov	s11, r1
 8007e82:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007e86:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8007e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e8e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007e92:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007e96:	eeb0 6a67 	vmov.f32	s12, s15
 8007e9a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8007e9e:	ee16 1a10 	vmov	r1, s12
 8007ea2:	4019      	ands	r1, r3
 8007ea4:	ee06 1a10 	vmov	s12, r1
 8007ea8:	eeb0 7a46 	vmov.f32	s14, s12
 8007eac:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8007eb0:	493c      	ldr	r1, [pc, #240]	@ (8007fa4 <__ieee754_powf+0x408>)
 8007eb2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8007eb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007eba:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8007fa8 <__ieee754_powf+0x40c>
 8007ebe:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8007fac <__ieee754_powf+0x410>
 8007ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ec6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8007fb0 <__ieee754_powf+0x414>
 8007eca:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007ece:	ed91 7a00 	vldr	s14, [r1]
 8007ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ed6:	ee07 2a10 	vmov	s14, r2
 8007eda:	4a36      	ldr	r2, [pc, #216]	@ (8007fb4 <__ieee754_powf+0x418>)
 8007edc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007ee0:	eeb0 7a67 	vmov.f32	s14, s15
 8007ee4:	eea6 7a25 	vfma.f32	s14, s12, s11
 8007ee8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8007eec:	ed92 5a00 	vldr	s10, [r2]
 8007ef0:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007ef4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007ef8:	ee17 2a10 	vmov	r2, s14
 8007efc:	401a      	ands	r2, r3
 8007efe:	ee07 2a10 	vmov	s14, r2
 8007f02:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007f06:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8007f0a:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007f0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f12:	e715      	b.n	8007d40 <__ieee754_powf+0x1a4>
 8007f14:	2601      	movs	r6, #1
 8007f16:	e75d      	b.n	8007dd4 <__ieee754_powf+0x238>
 8007f18:	d152      	bne.n	8007fc0 <__ieee754_powf+0x424>
 8007f1a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007fb8 <__ieee754_powf+0x41c>
 8007f1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f22:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007f26:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f2e:	f73f af29 	bgt.w	8007d84 <__ieee754_powf+0x1e8>
 8007f32:	2386      	movs	r3, #134	@ 0x86
 8007f34:	e048      	b.n	8007fc8 <__ieee754_powf+0x42c>
 8007f36:	4a21      	ldr	r2, [pc, #132]	@ (8007fbc <__ieee754_powf+0x420>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d907      	bls.n	8007f4c <__ieee754_powf+0x3b0>
 8007f3c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f44:	bf4c      	ite	mi
 8007f46:	2001      	movmi	r0, #1
 8007f48:	2000      	movpl	r0, #0
 8007f4a:	e6c7      	b.n	8007cdc <__ieee754_powf+0x140>
 8007f4c:	d138      	bne.n	8007fc0 <__ieee754_powf+0x424>
 8007f4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f52:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8007f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f5a:	dbea      	blt.n	8007f32 <__ieee754_powf+0x396>
 8007f5c:	e7ee      	b.n	8007f3c <__ieee754_powf+0x3a0>
 8007f5e:	bf00      	nop
 8007f60:	00000000 	.word	0x00000000
 8007f64:	3f7ffff3 	.word	0x3f7ffff3
 8007f68:	3f800007 	.word	0x3f800007
 8007f6c:	3eaaaaab 	.word	0x3eaaaaab
 8007f70:	3fb8aa00 	.word	0x3fb8aa00
 8007f74:	3fb8aa3b 	.word	0x3fb8aa3b
 8007f78:	36eca570 	.word	0x36eca570
 8007f7c:	4b800000 	.word	0x4b800000
 8007f80:	001cc471 	.word	0x001cc471
 8007f84:	005db3d6 	.word	0x005db3d6
 8007f88:	080083cc 	.word	0x080083cc
 8007f8c:	fffff000 	.word	0xfffff000
 8007f90:	3e6c3255 	.word	0x3e6c3255
 8007f94:	3e53f142 	.word	0x3e53f142
 8007f98:	3e8ba305 	.word	0x3e8ba305
 8007f9c:	3edb6db7 	.word	0x3edb6db7
 8007fa0:	3f19999a 	.word	0x3f19999a
 8007fa4:	080083bc 	.word	0x080083bc
 8007fa8:	3f76384f 	.word	0x3f76384f
 8007fac:	3f763800 	.word	0x3f763800
 8007fb0:	369dc3a0 	.word	0x369dc3a0
 8007fb4:	080083c4 	.word	0x080083c4
 8007fb8:	3338aa3c 	.word	0x3338aa3c
 8007fbc:	43160000 	.word	0x43160000
 8007fc0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8007fc4:	d96f      	bls.n	80080a6 <__ieee754_powf+0x50a>
 8007fc6:	15db      	asrs	r3, r3, #23
 8007fc8:	3b7e      	subs	r3, #126	@ 0x7e
 8007fca:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8007fce:	4118      	asrs	r0, r3
 8007fd0:	4408      	add	r0, r1
 8007fd2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8008110 <__ieee754_powf+0x574>)
 8007fd8:	3b7f      	subs	r3, #127	@ 0x7f
 8007fda:	411a      	asrs	r2, r3
 8007fdc:	4002      	ands	r2, r0
 8007fde:	ee07 2a10 	vmov	s14, r2
 8007fe2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8007fe6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8007fea:	f1c3 0317 	rsb	r3, r3, #23
 8007fee:	4118      	asrs	r0, r3
 8007ff0:	2900      	cmp	r1, #0
 8007ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ff6:	bfb8      	it	lt
 8007ff8:	4240      	neglt	r0, r0
 8007ffa:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8007ffe:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8008114 <__ieee754_powf+0x578>
 8008002:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8008118 <__ieee754_powf+0x57c>
 8008006:	ee16 3a90 	vmov	r3, s13
 800800a:	f36f 030b 	bfc	r3, #0, #12
 800800e:	ee06 3a90 	vmov	s13, r3
 8008012:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008016:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800801a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800801e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800811c <__ieee754_powf+0x580>
 8008022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008026:	eee0 7a87 	vfma.f32	s15, s1, s14
 800802a:	eeb0 7a67 	vmov.f32	s14, s15
 800802e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8008032:	eef0 5a47 	vmov.f32	s11, s14
 8008036:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800803a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800803e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008042:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8008120 <__ieee754_powf+0x584>
 8008046:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8008124 <__ieee754_powf+0x588>
 800804a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800804e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8008128 <__ieee754_powf+0x58c>
 8008052:	eee6 5a26 	vfma.f32	s11, s12, s13
 8008056:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800812c <__ieee754_powf+0x590>
 800805a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800805e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008130 <__ieee754_powf+0x594>
 8008062:	eee6 5a26 	vfma.f32	s11, s12, s13
 8008066:	eeb0 6a47 	vmov.f32	s12, s14
 800806a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800806e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8008072:	ee67 5a06 	vmul.f32	s11, s14, s12
 8008076:	ee36 6a66 	vsub.f32	s12, s12, s13
 800807a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800807e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8008082:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008086:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800808a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800808e:	ee10 3a10 	vmov	r3, s0
 8008092:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008096:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800809a:	da06      	bge.n	80080aa <__ieee754_powf+0x50e>
 800809c:	f000 f854 	bl	8008148 <scalbnf>
 80080a0:	ee20 0a08 	vmul.f32	s0, s0, s16
 80080a4:	e592      	b.n	8007bcc <__ieee754_powf+0x30>
 80080a6:	2000      	movs	r0, #0
 80080a8:	e7a7      	b.n	8007ffa <__ieee754_powf+0x45e>
 80080aa:	ee00 3a10 	vmov	s0, r3
 80080ae:	e7f7      	b.n	80080a0 <__ieee754_powf+0x504>
 80080b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80080b4:	e58a      	b.n	8007bcc <__ieee754_powf+0x30>
 80080b6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8008134 <__ieee754_powf+0x598>
 80080ba:	e587      	b.n	8007bcc <__ieee754_powf+0x30>
 80080bc:	eeb0 0a48 	vmov.f32	s0, s16
 80080c0:	e584      	b.n	8007bcc <__ieee754_powf+0x30>
 80080c2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80080c6:	f43f adbb 	beq.w	8007c40 <__ieee754_powf+0xa4>
 80080ca:	2502      	movs	r5, #2
 80080cc:	eeb0 0a48 	vmov.f32	s0, s16
 80080d0:	f000 f832 	bl	8008138 <fabsf>
 80080d4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80080d8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80080dc:	4647      	mov	r7, r8
 80080de:	d003      	beq.n	80080e8 <__ieee754_powf+0x54c>
 80080e0:	f1b8 0f00 	cmp.w	r8, #0
 80080e4:	f47f addb 	bne.w	8007c9e <__ieee754_powf+0x102>
 80080e8:	2c00      	cmp	r4, #0
 80080ea:	bfbc      	itt	lt
 80080ec:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80080f0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80080f4:	2e00      	cmp	r6, #0
 80080f6:	f6bf ad69 	bge.w	8007bcc <__ieee754_powf+0x30>
 80080fa:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80080fe:	ea58 0805 	orrs.w	r8, r8, r5
 8008102:	f47f adc7 	bne.w	8007c94 <__ieee754_powf+0xf8>
 8008106:	ee70 7a40 	vsub.f32	s15, s0, s0
 800810a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800810e:	e55d      	b.n	8007bcc <__ieee754_powf+0x30>
 8008110:	ff800000 	.word	0xff800000
 8008114:	3f317218 	.word	0x3f317218
 8008118:	3f317200 	.word	0x3f317200
 800811c:	35bfbe8c 	.word	0x35bfbe8c
 8008120:	b5ddea0e 	.word	0xb5ddea0e
 8008124:	3331bb4c 	.word	0x3331bb4c
 8008128:	388ab355 	.word	0x388ab355
 800812c:	bb360b61 	.word	0xbb360b61
 8008130:	3e2aaaab 	.word	0x3e2aaaab
 8008134:	00000000 	.word	0x00000000

08008138 <fabsf>:
 8008138:	ee10 3a10 	vmov	r3, s0
 800813c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008140:	ee00 3a10 	vmov	s0, r3
 8008144:	4770      	bx	lr
	...

08008148 <scalbnf>:
 8008148:	ee10 3a10 	vmov	r3, s0
 800814c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008150:	d02b      	beq.n	80081aa <scalbnf+0x62>
 8008152:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008156:	d302      	bcc.n	800815e <scalbnf+0x16>
 8008158:	ee30 0a00 	vadd.f32	s0, s0, s0
 800815c:	4770      	bx	lr
 800815e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008162:	d123      	bne.n	80081ac <scalbnf+0x64>
 8008164:	4b24      	ldr	r3, [pc, #144]	@ (80081f8 <scalbnf+0xb0>)
 8008166:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80081fc <scalbnf+0xb4>
 800816a:	4298      	cmp	r0, r3
 800816c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008170:	db17      	blt.n	80081a2 <scalbnf+0x5a>
 8008172:	ee10 3a10 	vmov	r3, s0
 8008176:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800817a:	3a19      	subs	r2, #25
 800817c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008180:	4288      	cmp	r0, r1
 8008182:	dd15      	ble.n	80081b0 <scalbnf+0x68>
 8008184:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008200 <scalbnf+0xb8>
 8008188:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8008204 <scalbnf+0xbc>
 800818c:	ee10 3a10 	vmov	r3, s0
 8008190:	eeb0 7a67 	vmov.f32	s14, s15
 8008194:	2b00      	cmp	r3, #0
 8008196:	bfb8      	it	lt
 8008198:	eef0 7a66 	vmovlt.f32	s15, s13
 800819c:	ee27 0a87 	vmul.f32	s0, s15, s14
 80081a0:	4770      	bx	lr
 80081a2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008208 <scalbnf+0xc0>
 80081a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80081aa:	4770      	bx	lr
 80081ac:	0dd2      	lsrs	r2, r2, #23
 80081ae:	e7e5      	b.n	800817c <scalbnf+0x34>
 80081b0:	4410      	add	r0, r2
 80081b2:	28fe      	cmp	r0, #254	@ 0xfe
 80081b4:	dce6      	bgt.n	8008184 <scalbnf+0x3c>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	dd06      	ble.n	80081c8 <scalbnf+0x80>
 80081ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80081be:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80081c2:	ee00 3a10 	vmov	s0, r3
 80081c6:	4770      	bx	lr
 80081c8:	f110 0f16 	cmn.w	r0, #22
 80081cc:	da09      	bge.n	80081e2 <scalbnf+0x9a>
 80081ce:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008208 <scalbnf+0xc0>
 80081d2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800820c <scalbnf+0xc4>
 80081d6:	ee10 3a10 	vmov	r3, s0
 80081da:	eeb0 7a67 	vmov.f32	s14, s15
 80081de:	2b00      	cmp	r3, #0
 80081e0:	e7d9      	b.n	8008196 <scalbnf+0x4e>
 80081e2:	3019      	adds	r0, #25
 80081e4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80081e8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80081ec:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008210 <scalbnf+0xc8>
 80081f0:	ee07 3a90 	vmov	s15, r3
 80081f4:	e7d7      	b.n	80081a6 <scalbnf+0x5e>
 80081f6:	bf00      	nop
 80081f8:	ffff3cb0 	.word	0xffff3cb0
 80081fc:	4c000000 	.word	0x4c000000
 8008200:	7149f2ca 	.word	0x7149f2ca
 8008204:	f149f2ca 	.word	0xf149f2ca
 8008208:	0da24260 	.word	0x0da24260
 800820c:	8da24260 	.word	0x8da24260
 8008210:	33000000 	.word	0x33000000

08008214 <with_errnof>:
 8008214:	b510      	push	{r4, lr}
 8008216:	ed2d 8b02 	vpush	{d8}
 800821a:	eeb0 8a40 	vmov.f32	s16, s0
 800821e:	4604      	mov	r4, r0
 8008220:	f7fe fdea 	bl	8006df8 <__errno>
 8008224:	eeb0 0a48 	vmov.f32	s0, s16
 8008228:	ecbd 8b02 	vpop	{d8}
 800822c:	6004      	str	r4, [r0, #0]
 800822e:	bd10      	pop	{r4, pc}

08008230 <xflowf>:
 8008230:	b130      	cbz	r0, 8008240 <xflowf+0x10>
 8008232:	eef1 7a40 	vneg.f32	s15, s0
 8008236:	ee27 0a80 	vmul.f32	s0, s15, s0
 800823a:	2022      	movs	r0, #34	@ 0x22
 800823c:	f7ff bfea 	b.w	8008214 <with_errnof>
 8008240:	eef0 7a40 	vmov.f32	s15, s0
 8008244:	e7f7      	b.n	8008236 <xflowf+0x6>
	...

08008248 <__math_uflowf>:
 8008248:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008250 <__math_uflowf+0x8>
 800824c:	f7ff bff0 	b.w	8008230 <xflowf>
 8008250:	10000000 	.word	0x10000000

08008254 <__math_oflowf>:
 8008254:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800825c <__math_oflowf+0x8>
 8008258:	f7ff bfea 	b.w	8008230 <xflowf>
 800825c:	70000000 	.word	0x70000000

08008260 <__ieee754_sqrtf>:
 8008260:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008264:	4770      	bx	lr
	...

08008268 <_init>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr

08008274 <_fini>:
 8008274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008276:	bf00      	nop
 8008278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827a:	bc08      	pop	{r3}
 800827c:	469e      	mov	lr, r3
 800827e:	4770      	bx	lr
